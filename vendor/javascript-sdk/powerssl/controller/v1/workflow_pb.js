/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var powerssl_controller_v1_integration_pb = require('../../../powerssl/controller/v1/integration_pb.js');
goog.exportSymbol('proto.powerssl.controller.v1.CreateACMEAccountInput', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.CreateWorkflowRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.RequestACMECertificateInput', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Workflow', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Workflow.IntegrationFilter', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.WorkflowKind', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.CreateWorkflowRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.CreateWorkflowRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.CreateWorkflowRequest.displayName = 'proto.powerssl.controller.v1.CreateWorkflowRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.CreateWorkflowRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.CreateWorkflowRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workflow: (f = msg.getWorkflow()) && proto.powerssl.controller.v1.Workflow.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.CreateWorkflowRequest}
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.CreateWorkflowRequest;
  return proto.powerssl.controller.v1.CreateWorkflowRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.CreateWorkflowRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.CreateWorkflowRequest}
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.controller.v1.Workflow;
      reader.readMessage(value,proto.powerssl.controller.v1.Workflow.deserializeBinaryFromReader);
      msg.setWorkflow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.CreateWorkflowRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.CreateWorkflowRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkflow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.controller.v1.Workflow.serializeBinaryToWriter
    );
  }
};


/**
 * optional Workflow workflow = 1;
 * @return {?proto.powerssl.controller.v1.Workflow}
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.prototype.getWorkflow = function() {
  return /** @type{?proto.powerssl.controller.v1.Workflow} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.Workflow, 1));
};


/** @param {?proto.powerssl.controller.v1.Workflow|undefined} value */
proto.powerssl.controller.v1.CreateWorkflowRequest.prototype.setWorkflow = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.CreateWorkflowRequest.prototype.clearWorkflow = function() {
  this.setWorkflow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.CreateWorkflowRequest.prototype.hasWorkflow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Workflow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.Workflow.repeatedFields_, proto.powerssl.controller.v1.Workflow.oneofGroups_);
};
goog.inherits(proto.powerssl.controller.v1.Workflow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Workflow.displayName = 'proto.powerssl.controller.v1.Workflow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.Workflow.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.powerssl.controller.v1.Workflow.oneofGroups_ = [[11,12]];

/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Workflow.InputCase = {
  INPUT_NOT_SET: 0,
  CREATE_ACME_ACCOUNT_INPUT: 11,
  REQUEST_ACME_CERTIFICATE_INPUT: 12
};

/**
 * @return {proto.powerssl.controller.v1.Workflow.InputCase}
 */
proto.powerssl.controller.v1.Workflow.prototype.getInputCase = function() {
  return /** @type {proto.powerssl.controller.v1.Workflow.InputCase} */(jspb.Message.computeOneofCase(this, proto.powerssl.controller.v1.Workflow.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Workflow.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Workflow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Workflow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Workflow.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 2, 0),
    integrationFiltersList: jspb.Message.toObjectList(msg.getIntegrationFiltersList(),
    proto.powerssl.controller.v1.Workflow.IntegrationFilter.toObject, includeInstance),
    createAcmeAccountInput: (f = msg.getCreateAcmeAccountInput()) && proto.powerssl.controller.v1.CreateACMEAccountInput.toObject(includeInstance, f),
    requestAcmeCertificateInput: (f = msg.getRequestAcmeCertificateInput()) && proto.powerssl.controller.v1.RequestACMECertificateInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Workflow}
 */
proto.powerssl.controller.v1.Workflow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Workflow;
  return proto.powerssl.controller.v1.Workflow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Workflow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Workflow}
 */
proto.powerssl.controller.v1.Workflow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.powerssl.controller.v1.WorkflowKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = new proto.powerssl.controller.v1.Workflow.IntegrationFilter;
      reader.readMessage(value,proto.powerssl.controller.v1.Workflow.IntegrationFilter.deserializeBinaryFromReader);
      msg.addIntegrationFilters(value);
      break;
    case 11:
      var value = new proto.powerssl.controller.v1.CreateACMEAccountInput;
      reader.readMessage(value,proto.powerssl.controller.v1.CreateACMEAccountInput.deserializeBinaryFromReader);
      msg.setCreateAcmeAccountInput(value);
      break;
    case 12:
      var value = new proto.powerssl.controller.v1.RequestACMECertificateInput;
      reader.readMessage(value,proto.powerssl.controller.v1.RequestACMECertificateInput.deserializeBinaryFromReader);
      msg.setRequestAcmeCertificateInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Workflow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Workflow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Workflow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Workflow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIntegrationFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.powerssl.controller.v1.Workflow.IntegrationFilter.serializeBinaryToWriter
    );
  }
  f = message.getCreateAcmeAccountInput();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.powerssl.controller.v1.CreateACMEAccountInput.serializeBinaryToWriter
    );
  }
  f = message.getRequestAcmeCertificateInput();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.powerssl.controller.v1.RequestACMECertificateInput.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.Workflow.IntegrationFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Workflow.IntegrationFilter.displayName = 'proto.powerssl.controller.v1.Workflow.IntegrationFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Workflow.IntegrationFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Workflow.IntegrationFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Workflow.IntegrationFilter}
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Workflow.IntegrationFilter;
  return proto.powerssl.controller.v1.Workflow.IntegrationFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Workflow.IntegrationFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Workflow.IntegrationFilter}
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powerssl.controller.v1.IntegrationKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Workflow.IntegrationFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Workflow.IntegrationFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional IntegrationKind kind = 1;
 * @return {!proto.powerssl.controller.v1.IntegrationKind}
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.prototype.getKind = function() {
  return /** @type {!proto.powerssl.controller.v1.IntegrationKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.powerssl.controller.v1.IntegrationKind} value */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Workflow.IntegrationFilter.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.controller.v1.Workflow.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Workflow.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional WorkflowKind kind = 2;
 * @return {!proto.powerssl.controller.v1.WorkflowKind}
 */
proto.powerssl.controller.v1.Workflow.prototype.getKind = function() {
  return /** @type {!proto.powerssl.controller.v1.WorkflowKind} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.powerssl.controller.v1.WorkflowKind} value */
proto.powerssl.controller.v1.Workflow.prototype.setKind = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated IntegrationFilter integration_filters = 3;
 * @return {!Array<!proto.powerssl.controller.v1.Workflow.IntegrationFilter>}
 */
proto.powerssl.controller.v1.Workflow.prototype.getIntegrationFiltersList = function() {
  return /** @type{!Array<!proto.powerssl.controller.v1.Workflow.IntegrationFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.controller.v1.Workflow.IntegrationFilter, 3));
};


/** @param {!Array<!proto.powerssl.controller.v1.Workflow.IntegrationFilter>} value */
proto.powerssl.controller.v1.Workflow.prototype.setIntegrationFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.powerssl.controller.v1.Workflow.IntegrationFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.controller.v1.Workflow.IntegrationFilter}
 */
proto.powerssl.controller.v1.Workflow.prototype.addIntegrationFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.powerssl.controller.v1.Workflow.IntegrationFilter, opt_index);
};


proto.powerssl.controller.v1.Workflow.prototype.clearIntegrationFiltersList = function() {
  this.setIntegrationFiltersList([]);
};


/**
 * optional CreateACMEAccountInput create_acme_account_input = 11;
 * @return {?proto.powerssl.controller.v1.CreateACMEAccountInput}
 */
proto.powerssl.controller.v1.Workflow.prototype.getCreateAcmeAccountInput = function() {
  return /** @type{?proto.powerssl.controller.v1.CreateACMEAccountInput} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.CreateACMEAccountInput, 11));
};


/** @param {?proto.powerssl.controller.v1.CreateACMEAccountInput|undefined} value */
proto.powerssl.controller.v1.Workflow.prototype.setCreateAcmeAccountInput = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.powerssl.controller.v1.Workflow.oneofGroups_[0], value);
};


proto.powerssl.controller.v1.Workflow.prototype.clearCreateAcmeAccountInput = function() {
  this.setCreateAcmeAccountInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.Workflow.prototype.hasCreateAcmeAccountInput = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RequestACMECertificateInput request_acme_certificate_input = 12;
 * @return {?proto.powerssl.controller.v1.RequestACMECertificateInput}
 */
proto.powerssl.controller.v1.Workflow.prototype.getRequestAcmeCertificateInput = function() {
  return /** @type{?proto.powerssl.controller.v1.RequestACMECertificateInput} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.RequestACMECertificateInput, 12));
};


/** @param {?proto.powerssl.controller.v1.RequestACMECertificateInput|undefined} value */
proto.powerssl.controller.v1.Workflow.prototype.setRequestAcmeCertificateInput = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.powerssl.controller.v1.Workflow.oneofGroups_[0], value);
};


proto.powerssl.controller.v1.Workflow.prototype.clearRequestAcmeCertificateInput = function() {
  this.setRequestAcmeCertificateInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.Workflow.prototype.hasRequestAcmeCertificateInput = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.CreateACMEAccountInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.CreateACMEAccountInput.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.CreateACMEAccountInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.CreateACMEAccountInput.displayName = 'proto.powerssl.controller.v1.CreateACMEAccountInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.CreateACMEAccountInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.CreateACMEAccountInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    directoryUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    termsOfServiceAgreed: jspb.Message.getFieldWithDefault(msg, 2, false),
    contactsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.CreateACMEAccountInput}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.CreateACMEAccountInput;
  return proto.powerssl.controller.v1.CreateACMEAccountInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.CreateACMEAccountInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.CreateACMEAccountInput}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectoryUrl(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTermsOfServiceAgreed(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addContacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.CreateACMEAccountInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.CreateACMEAccountInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirectoryUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTermsOfServiceAgreed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string directory_url = 1;
 * @return {string}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.getDirectoryUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.setDirectoryUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool terms_of_service_agreed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.getTermsOfServiceAgreed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.setTermsOfServiceAgreed = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string contacts = 3;
 * @return {!Array<string>}
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.getContactsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.setContactsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.addContacts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.powerssl.controller.v1.CreateACMEAccountInput.prototype.clearContactsList = function() {
  this.setContactsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.RequestACMECertificateInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.RequestACMECertificateInput.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.RequestACMECertificateInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.RequestACMECertificateInput.displayName = 'proto.powerssl.controller.v1.RequestACMECertificateInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.RequestACMECertificateInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.RequestACMECertificateInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    directoryUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dnsnamesList: jspb.Message.getRepeatedField(msg, 3),
    notBefore: jspb.Message.getFieldWithDefault(msg, 4, ""),
    notAfter: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.RequestACMECertificateInput}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.RequestACMECertificateInput;
  return proto.powerssl.controller.v1.RequestACMECertificateInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.RequestACMECertificateInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.RequestACMECertificateInput}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectoryUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDnsnames(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotBefore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.RequestACMECertificateInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.RequestACMECertificateInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirectoryUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDnsnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getNotBefore();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNotAfter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string directory_url = 1;
 * @return {string}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.getDirectoryUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.setDirectoryUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_url = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.getAccountUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.setAccountUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string dnsnames = 3;
 * @return {!Array<string>}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.getDnsnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.setDnsnamesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.addDnsnames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.clearDnsnamesList = function() {
  this.setDnsnamesList([]);
};


/**
 * optional string not_before = 4;
 * @return {string}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.getNotBefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.setNotBefore = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string not_after = 5;
 * @return {string}
 */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.getNotAfter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.RequestACMECertificateInput.prototype.setNotAfter = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.powerssl.controller.v1.WorkflowKind = {
  WORKFLOW_KIND_UNSPECIFIED: 0,
  CREATE_ACME_ACCOUNT: 1,
  REQUEST_ACME_CERTIFICATE: 2
};

goog.object.extend(exports, proto.powerssl.controller.v1);
