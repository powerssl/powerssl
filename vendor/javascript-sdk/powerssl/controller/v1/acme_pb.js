/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var powerssl_controller_v1_meta_pb = require('../../../powerssl/controller/v1/meta_pb.js');
goog.exportSymbol('proto.powerssl.controller.v1.Account', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Account.Status', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Authorization', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Authorization.Status', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Challenge', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Challenge.Status', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Challenge.Type', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetCreateAccountRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetCreateOrderRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetGetCertificateRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetGetChallengeRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetGetOrderRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetRekeyAccountRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetUpdateAccountRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.GetValidateChallengeRequestResponse', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Identifier', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Identifier.Type', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Order', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Order.Status', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Problem', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.Problem.Subproblem', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetCreateAccountResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetCreateOrderResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetGetCertificateResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetGetChallengeResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetGetOrderResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetRekeyAccountResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetUpdateAccountResponseRequest', null, global);
goog.exportSymbol('proto.powerssl.controller.v1.SetValidateChallengeResponseRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.GetCreateAccountRequestResponse.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.GetCreateAccountRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetCreateAccountRequestResponse.displayName = 'proto.powerssl.controller.v1.GetCreateAccountRequestResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetCreateAccountRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetCreateAccountRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f),
    directoryUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    termsOfServiceAgreed: jspb.Message.getFieldWithDefault(msg, 3, false),
    contactsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetCreateAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetCreateAccountRequestResponse;
  return proto.powerssl.controller.v1.GetCreateAccountRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetCreateAccountRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetCreateAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectoryUrl(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTermsOfServiceAgreed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addContacts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetCreateAccountRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetCreateAccountRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
  f = message.getDirectoryUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTermsOfServiceAgreed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string directory_url = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.getDirectoryUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.setDirectoryUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool terms_of_service_agreed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.getTermsOfServiceAgreed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.setTermsOfServiceAgreed = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated string contacts = 4;
 * @return {!Array<string>}
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.getContactsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.setContactsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.addContacts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.powerssl.controller.v1.GetCreateAccountRequestResponse.prototype.clearContactsList = function() {
  this.setContactsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetCreateAccountResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetCreateAccountResponseRequest.displayName = 'proto.powerssl.controller.v1.SetCreateAccountResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetCreateAccountResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetCreateAccountResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f),
    account: (f = msg.getAccount()) && proto.powerssl.controller.v1.Account.toObject(includeInstance, f),
    error: (f = msg.getError()) && powerssl_controller_v1_meta_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetCreateAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetCreateAccountResponseRequest;
  return proto.powerssl.controller.v1.SetCreateAccountResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetCreateAccountResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetCreateAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    case 2:
      var value = new proto.powerssl.controller.v1.Account;
      reader.readMessage(value,proto.powerssl.controller.v1.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 3:
      var value = new powerssl_controller_v1_meta_pb.Error;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetCreateAccountResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetCreateAccountResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.powerssl.controller.v1.Account.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      powerssl_controller_v1_meta_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Account account = 2;
 * @return {?proto.powerssl.controller.v1.Account}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.getAccount = function() {
  return /** @type{?proto.powerssl.controller.v1.Account} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.Account, 2));
};


/** @param {?proto.powerssl.controller.v1.Account|undefined} value */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.setAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.clearAccount = function() {
  this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error error = 3;
 * @return {?proto.powerssl.controller.v1.Error}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.getError = function() {
  return /** @type{?proto.powerssl.controller.v1.Error} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Error, 3));
};


/** @param {?proto.powerssl.controller.v1.Error|undefined} value */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetCreateAccountResponseRequest.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.displayName = 'proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse;
  return proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetDeactivateAccountRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.displayName = 'proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest;
  return proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetDeactivateAccountResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetRekeyAccountRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.displayName = 'proto.powerssl.controller.v1.GetRekeyAccountRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetRekeyAccountRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetRekeyAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetRekeyAccountRequestResponse;
  return proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetRekeyAccountRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetRekeyAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetRekeyAccountRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetRekeyAccountRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetRekeyAccountResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.displayName = 'proto.powerssl.controller.v1.SetRekeyAccountResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetRekeyAccountResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetRekeyAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetRekeyAccountResponseRequest;
  return proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetRekeyAccountResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetRekeyAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetRekeyAccountResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetRekeyAccountResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetUpdateAccountRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.displayName = 'proto.powerssl.controller.v1.GetUpdateAccountRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetUpdateAccountRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetUpdateAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetUpdateAccountRequestResponse;
  return proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetUpdateAccountRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetUpdateAccountRequestResponse}
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetUpdateAccountRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetUpdateAccountRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetUpdateAccountResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.displayName = 'proto.powerssl.controller.v1.SetUpdateAccountResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetUpdateAccountResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetUpdateAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetUpdateAccountResponseRequest;
  return proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetUpdateAccountResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetUpdateAccountResponseRequest}
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetUpdateAccountResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetUpdateAccountResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetCreateOrderRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetCreateOrderRequestResponse.displayName = 'proto.powerssl.controller.v1.GetCreateOrderRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetCreateOrderRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetCreateOrderRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetCreateOrderRequestResponse}
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetCreateOrderRequestResponse;
  return proto.powerssl.controller.v1.GetCreateOrderRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetCreateOrderRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetCreateOrderRequestResponse}
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetCreateOrderRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetCreateOrderRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetCreateOrderRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetCreateOrderRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetCreateOrderResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetCreateOrderResponseRequest.displayName = 'proto.powerssl.controller.v1.SetCreateOrderResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetCreateOrderResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetCreateOrderResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetCreateOrderResponseRequest}
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetCreateOrderResponseRequest;
  return proto.powerssl.controller.v1.SetCreateOrderResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetCreateOrderResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetCreateOrderResponseRequest}
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetCreateOrderResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetCreateOrderResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetCreateOrderResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetCreateOrderResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.displayName = 'proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse}
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse;
  return proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse}
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetFinalizeOrderRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.displayName = 'proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest}
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest;
  return proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest}
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetFinalizeOrderResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetGetOrderRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetGetOrderRequestResponse.displayName = 'proto.powerssl.controller.v1.GetGetOrderRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetGetOrderRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetGetOrderRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetGetOrderRequestResponse}
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetGetOrderRequestResponse;
  return proto.powerssl.controller.v1.GetGetOrderRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetGetOrderRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetGetOrderRequestResponse}
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetGetOrderRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetGetOrderRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetGetOrderRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetGetOrderRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetGetOrderResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetGetOrderResponseRequest.displayName = 'proto.powerssl.controller.v1.SetGetOrderResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetGetOrderResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetGetOrderResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetGetOrderResponseRequest}
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetGetOrderResponseRequest;
  return proto.powerssl.controller.v1.SetGetOrderResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetGetOrderResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetGetOrderResponseRequest}
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetGetOrderResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetGetOrderResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetGetOrderResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetGetOrderResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.displayName = 'proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse}
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse;
  return proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse}
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetCreateAuthorizationRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.displayName = 'proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest}
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest;
  return proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest}
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetCreateAuthorizationResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.displayName = 'proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse}
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse;
  return proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse}
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.displayName = 'proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest}
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest;
  return proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest}
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.displayName = 'proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse}
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse;
  return proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse}
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetGetAuthorizationRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.displayName = 'proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest}
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest;
  return proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest}
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetGetAuthorizationResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetGetChallengeRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetGetChallengeRequestResponse.displayName = 'proto.powerssl.controller.v1.GetGetChallengeRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetGetChallengeRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetGetChallengeRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetGetChallengeRequestResponse}
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetGetChallengeRequestResponse;
  return proto.powerssl.controller.v1.GetGetChallengeRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetGetChallengeRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetGetChallengeRequestResponse}
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetGetChallengeRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetGetChallengeRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetGetChallengeRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetGetChallengeRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetGetChallengeResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetGetChallengeResponseRequest.displayName = 'proto.powerssl.controller.v1.SetGetChallengeResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetGetChallengeResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetGetChallengeResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetGetChallengeResponseRequest}
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetGetChallengeResponseRequest;
  return proto.powerssl.controller.v1.SetGetChallengeResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetGetChallengeResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetGetChallengeResponseRequest}
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetGetChallengeResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetGetChallengeResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetGetChallengeResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetGetChallengeResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetValidateChallengeRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.displayName = 'proto.powerssl.controller.v1.GetValidateChallengeRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetValidateChallengeRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetValidateChallengeRequestResponse}
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetValidateChallengeRequestResponse;
  return proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetValidateChallengeRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetValidateChallengeRequestResponse}
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetValidateChallengeRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetValidateChallengeRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetValidateChallengeResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.displayName = 'proto.powerssl.controller.v1.SetValidateChallengeResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetValidateChallengeResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetValidateChallengeResponseRequest}
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetValidateChallengeResponseRequest;
  return proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetValidateChallengeResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetValidateChallengeResponseRequest}
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetValidateChallengeResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetValidateChallengeResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetGetCertificateRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetGetCertificateRequestResponse.displayName = 'proto.powerssl.controller.v1.GetGetCertificateRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetGetCertificateRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetGetCertificateRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetGetCertificateRequestResponse}
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetGetCertificateRequestResponse;
  return proto.powerssl.controller.v1.GetGetCertificateRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetGetCertificateRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetGetCertificateRequestResponse}
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetGetCertificateRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetGetCertificateRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetGetCertificateRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetGetCertificateRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetGetCertificateResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetGetCertificateResponseRequest.displayName = 'proto.powerssl.controller.v1.SetGetCertificateResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetGetCertificateResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetGetCertificateResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetGetCertificateResponseRequest}
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetGetCertificateResponseRequest;
  return proto.powerssl.controller.v1.SetGetCertificateResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetGetCertificateResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetGetCertificateResponseRequest}
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetGetCertificateResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetGetCertificateResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetGetCertificateResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetGetCertificateResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.displayName = 'proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse}
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse;
  return proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse}
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.GetRevokeCertificateRequestResponse.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.displayName = 'proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    activity: (f = msg.getActivity()) && powerssl_controller_v1_meta_pb.Activity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest}
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest;
  return proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest}
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new powerssl_controller_v1_meta_pb.Activity;
      reader.readMessage(value,powerssl_controller_v1_meta_pb.Activity.deserializeBinaryFromReader);
      msg.setActivity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      powerssl_controller_v1_meta_pb.Activity.serializeBinaryToWriter
    );
  }
};


/**
 * optional Activity activity = 1;
 * @return {?proto.powerssl.controller.v1.Activity}
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.prototype.getActivity = function() {
  return /** @type{?proto.powerssl.controller.v1.Activity} */ (
    jspb.Message.getWrapperField(this, powerssl_controller_v1_meta_pb.Activity, 1));
};


/** @param {?proto.powerssl.controller.v1.Activity|undefined} value */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.prototype.setActivity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.prototype.clearActivity = function() {
  this.setActivity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.SetRevokeCertificateResponseRequest.prototype.hasActivity = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.Account.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Account.displayName = 'proto.powerssl.controller.v1.Account';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.Account.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    contactsList: jspb.Message.getRepeatedField(msg, 2),
    termsOfServiceAgreed: jspb.Message.getFieldWithDefault(msg, 3, false),
    orders: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Account}
 */
proto.powerssl.controller.v1.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Account;
  return proto.powerssl.controller.v1.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Account}
 */
proto.powerssl.controller.v1.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powerssl.controller.v1.Account.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addContacts(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTermsOfServiceAgreed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrders(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContactsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTermsOfServiceAgreed();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOrders();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Account.Status = {
  STATUS_UNSPECIFIED: 0,
  VALID: 1,
  DEACTIVATED: 2,
  REVOKED: 3
};

/**
 * optional Status status = 1;
 * @return {!proto.powerssl.controller.v1.Account.Status}
 */
proto.powerssl.controller.v1.Account.prototype.getStatus = function() {
  return /** @type {!proto.powerssl.controller.v1.Account.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.powerssl.controller.v1.Account.Status} value */
proto.powerssl.controller.v1.Account.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string contacts = 2;
 * @return {!Array<string>}
 */
proto.powerssl.controller.v1.Account.prototype.getContactsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.powerssl.controller.v1.Account.prototype.setContactsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.powerssl.controller.v1.Account.prototype.addContacts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.powerssl.controller.v1.Account.prototype.clearContactsList = function() {
  this.setContactsList([]);
};


/**
 * optional bool terms_of_service_agreed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.powerssl.controller.v1.Account.prototype.getTermsOfServiceAgreed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.powerssl.controller.v1.Account.prototype.setTermsOfServiceAgreed = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string orders = 4;
 * @return {string}
 */
proto.powerssl.controller.v1.Account.prototype.getOrders = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Account.prototype.setOrders = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.powerssl.controller.v1.Account.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Account.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Authorization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.Authorization.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.Authorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Authorization.displayName = 'proto.powerssl.controller.v1.Authorization';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.Authorization.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Authorization.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Authorization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Authorization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Authorization.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: (f = msg.getIdentifier()) && proto.powerssl.controller.v1.Identifier.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    expires: jspb.Message.getFieldWithDefault(msg, 3, ""),
    challengesList: jspb.Message.toObjectList(msg.getChallengesList(),
    proto.powerssl.controller.v1.Challenge.toObject, includeInstance),
    wildcard: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Authorization}
 */
proto.powerssl.controller.v1.Authorization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Authorization;
  return proto.powerssl.controller.v1.Authorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Authorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Authorization}
 */
proto.powerssl.controller.v1.Authorization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.controller.v1.Identifier;
      reader.readMessage(value,proto.powerssl.controller.v1.Identifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {!proto.powerssl.controller.v1.Authorization.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpires(value);
      break;
    case 4:
      var value = new proto.powerssl.controller.v1.Challenge;
      reader.readMessage(value,proto.powerssl.controller.v1.Challenge.deserializeBinaryFromReader);
      msg.addChallenges(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWildcard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Authorization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Authorization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Authorization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Authorization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.controller.v1.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getExpires();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChallengesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.powerssl.controller.v1.Challenge.serializeBinaryToWriter
    );
  }
  f = message.getWildcard();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Authorization.Status = {
  STATUS_UNSPECIFIED: 0,
  PENDING: 1,
  VALID: 2,
  INVALID: 3,
  DEACTIVATED: 4,
  EXPIRED: 5,
  REVOKED: 6
};

/**
 * optional Identifier identifier = 1;
 * @return {?proto.powerssl.controller.v1.Identifier}
 */
proto.powerssl.controller.v1.Authorization.prototype.getIdentifier = function() {
  return /** @type{?proto.powerssl.controller.v1.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.Identifier, 1));
};


/** @param {?proto.powerssl.controller.v1.Identifier|undefined} value */
proto.powerssl.controller.v1.Authorization.prototype.setIdentifier = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.controller.v1.Authorization.prototype.clearIdentifier = function() {
  this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.Authorization.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.powerssl.controller.v1.Authorization.Status}
 */
proto.powerssl.controller.v1.Authorization.prototype.getStatus = function() {
  return /** @type {!proto.powerssl.controller.v1.Authorization.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.powerssl.controller.v1.Authorization.Status} value */
proto.powerssl.controller.v1.Authorization.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string expires = 3;
 * @return {string}
 */
proto.powerssl.controller.v1.Authorization.prototype.getExpires = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Authorization.prototype.setExpires = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Challenge challenges = 4;
 * @return {!Array<!proto.powerssl.controller.v1.Challenge>}
 */
proto.powerssl.controller.v1.Authorization.prototype.getChallengesList = function() {
  return /** @type{!Array<!proto.powerssl.controller.v1.Challenge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.controller.v1.Challenge, 4));
};


/** @param {!Array<!proto.powerssl.controller.v1.Challenge>} value */
proto.powerssl.controller.v1.Authorization.prototype.setChallengesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.powerssl.controller.v1.Challenge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.controller.v1.Challenge}
 */
proto.powerssl.controller.v1.Authorization.prototype.addChallenges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.powerssl.controller.v1.Challenge, opt_index);
};


proto.powerssl.controller.v1.Authorization.prototype.clearChallengesList = function() {
  this.setChallengesList([]);
};


/**
 * optional bool wildcard = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.powerssl.controller.v1.Authorization.prototype.getWildcard = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.powerssl.controller.v1.Authorization.prototype.setWildcard = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Challenge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.Challenge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Challenge.displayName = 'proto.powerssl.controller.v1.Challenge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Challenge.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Challenge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Challenge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Challenge.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    validated: jspb.Message.getFieldWithDefault(msg, 4, ""),
    error: (f = msg.getError()) && proto.powerssl.controller.v1.Problem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Challenge}
 */
proto.powerssl.controller.v1.Challenge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Challenge;
  return proto.powerssl.controller.v1.Challenge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Challenge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Challenge}
 */
proto.powerssl.controller.v1.Challenge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powerssl.controller.v1.Challenge.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {!proto.powerssl.controller.v1.Challenge.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidated(value);
      break;
    case 5:
      var value = new proto.powerssl.controller.v1.Problem;
      reader.readMessage(value,proto.powerssl.controller.v1.Problem.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Challenge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Challenge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Challenge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Challenge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getValidated();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.powerssl.controller.v1.Problem.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Challenge.Type = {
  TYPE_UNSPECIFIED: 0,
  HTTP_01: 1,
  DNS_01: 2
};

/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Challenge.Status = {
  STATUS_UNSPECIFIED: 0,
  PENDING: 1,
  PROCESSING: 2,
  VALID: 3,
  INVALID: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.powerssl.controller.v1.Challenge.Type}
 */
proto.powerssl.controller.v1.Challenge.prototype.getType = function() {
  return /** @type {!proto.powerssl.controller.v1.Challenge.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.powerssl.controller.v1.Challenge.Type} value */
proto.powerssl.controller.v1.Challenge.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.Challenge.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Challenge.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Status status = 3;
 * @return {!proto.powerssl.controller.v1.Challenge.Status}
 */
proto.powerssl.controller.v1.Challenge.prototype.getStatus = function() {
  return /** @type {!proto.powerssl.controller.v1.Challenge.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.powerssl.controller.v1.Challenge.Status} value */
proto.powerssl.controller.v1.Challenge.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string validated = 4;
 * @return {string}
 */
proto.powerssl.controller.v1.Challenge.prototype.getValidated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Challenge.prototype.setValidated = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Problem error = 5;
 * @return {?proto.powerssl.controller.v1.Problem}
 */
proto.powerssl.controller.v1.Challenge.prototype.getError = function() {
  return /** @type{?proto.powerssl.controller.v1.Problem} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.Problem, 5));
};


/** @param {?proto.powerssl.controller.v1.Problem|undefined} value */
proto.powerssl.controller.v1.Challenge.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.powerssl.controller.v1.Challenge.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.Challenge.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Identifier.displayName = 'proto.powerssl.controller.v1.Identifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Identifier}
 */
proto.powerssl.controller.v1.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Identifier;
  return proto.powerssl.controller.v1.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Identifier}
 */
proto.powerssl.controller.v1.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powerssl.controller.v1.Identifier.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Identifier.Type = {
  TYPE_UNSPECIFIED: 0,
  DNS: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.powerssl.controller.v1.Identifier.Type}
 */
proto.powerssl.controller.v1.Identifier.prototype.getType = function() {
  return /** @type {!proto.powerssl.controller.v1.Identifier.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.powerssl.controller.v1.Identifier.Type} value */
proto.powerssl.controller.v1.Identifier.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.Identifier.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Identifier.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.Order.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Order.displayName = 'proto.powerssl.controller.v1.Order';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.Order.repeatedFields_ = [3,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    expires: jspb.Message.getFieldWithDefault(msg, 2, ""),
    identifiersList: jspb.Message.toObjectList(msg.getIdentifiersList(),
    proto.powerssl.controller.v1.Identifier.toObject, includeInstance),
    notBefore: jspb.Message.getFieldWithDefault(msg, 4, ""),
    notAfter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    error: (f = msg.getError()) && proto.powerssl.controller.v1.Problem.toObject(includeInstance, f),
    authorizationsList: jspb.Message.getRepeatedField(msg, 7),
    finalize: jspb.Message.getFieldWithDefault(msg, 8, ""),
    certificate: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Order}
 */
proto.powerssl.controller.v1.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Order;
  return proto.powerssl.controller.v1.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Order}
 */
proto.powerssl.controller.v1.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powerssl.controller.v1.Order.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpires(value);
      break;
    case 3:
      var value = new proto.powerssl.controller.v1.Identifier;
      reader.readMessage(value,proto.powerssl.controller.v1.Identifier.deserializeBinaryFromReader);
      msg.addIdentifiers(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotBefore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotAfter(value);
      break;
    case 6:
      var value = new proto.powerssl.controller.v1.Problem;
      reader.readMessage(value,proto.powerssl.controller.v1.Problem.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAuthorizations(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFinalize(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExpires();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.powerssl.controller.v1.Identifier.serializeBinaryToWriter
    );
  }
  f = message.getNotBefore();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNotAfter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.powerssl.controller.v1.Problem.serializeBinaryToWriter
    );
  }
  f = message.getAuthorizationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getFinalize();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCertificate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.powerssl.controller.v1.Order.Status = {
  STATUS_UNSPECIFIED: 0,
  PENDING: 1,
  READY: 2,
  PROCESSING: 3,
  VALID: 4,
  INVALID: 5
};

/**
 * optional Status status = 1;
 * @return {!proto.powerssl.controller.v1.Order.Status}
 */
proto.powerssl.controller.v1.Order.prototype.getStatus = function() {
  return /** @type {!proto.powerssl.controller.v1.Order.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.powerssl.controller.v1.Order.Status} value */
proto.powerssl.controller.v1.Order.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string expires = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.Order.prototype.getExpires = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Order.prototype.setExpires = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Identifier identifiers = 3;
 * @return {!Array<!proto.powerssl.controller.v1.Identifier>}
 */
proto.powerssl.controller.v1.Order.prototype.getIdentifiersList = function() {
  return /** @type{!Array<!proto.powerssl.controller.v1.Identifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.controller.v1.Identifier, 3));
};


/** @param {!Array<!proto.powerssl.controller.v1.Identifier>} value */
proto.powerssl.controller.v1.Order.prototype.setIdentifiersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.powerssl.controller.v1.Identifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.controller.v1.Identifier}
 */
proto.powerssl.controller.v1.Order.prototype.addIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.powerssl.controller.v1.Identifier, opt_index);
};


proto.powerssl.controller.v1.Order.prototype.clearIdentifiersList = function() {
  this.setIdentifiersList([]);
};


/**
 * optional string not_before = 4;
 * @return {string}
 */
proto.powerssl.controller.v1.Order.prototype.getNotBefore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Order.prototype.setNotBefore = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string not_after = 5;
 * @return {string}
 */
proto.powerssl.controller.v1.Order.prototype.getNotAfter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Order.prototype.setNotAfter = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Problem error = 6;
 * @return {?proto.powerssl.controller.v1.Problem}
 */
proto.powerssl.controller.v1.Order.prototype.getError = function() {
  return /** @type{?proto.powerssl.controller.v1.Problem} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.Problem, 6));
};


/** @param {?proto.powerssl.controller.v1.Problem|undefined} value */
proto.powerssl.controller.v1.Order.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.powerssl.controller.v1.Order.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.Order.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string authorizations = 7;
 * @return {!Array<string>}
 */
proto.powerssl.controller.v1.Order.prototype.getAuthorizationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.powerssl.controller.v1.Order.prototype.setAuthorizationsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.powerssl.controller.v1.Order.prototype.addAuthorizations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.powerssl.controller.v1.Order.prototype.clearAuthorizationsList = function() {
  this.setAuthorizationsList([]);
};


/**
 * optional string finalize = 8;
 * @return {string}
 */
proto.powerssl.controller.v1.Order.prototype.getFinalize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Order.prototype.setFinalize = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string certificate = 9;
 * @return {string}
 */
proto.powerssl.controller.v1.Order.prototype.getCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Order.prototype.setCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Problem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.controller.v1.Problem.repeatedFields_, null);
};
goog.inherits(proto.powerssl.controller.v1.Problem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Problem.displayName = 'proto.powerssl.controller.v1.Problem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.controller.v1.Problem.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Problem.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Problem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Problem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Problem.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    detail: jspb.Message.getFieldWithDefault(msg, 4, ""),
    instance: jspb.Message.getFieldWithDefault(msg, 5, ""),
    subproblemsList: jspb.Message.toObjectList(msg.getSubproblemsList(),
    proto.powerssl.controller.v1.Problem.Subproblem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Problem}
 */
proto.powerssl.controller.v1.Problem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Problem;
  return proto.powerssl.controller.v1.Problem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Problem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Problem}
 */
proto.powerssl.controller.v1.Problem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstance(value);
      break;
    case 6:
      var value = new proto.powerssl.controller.v1.Problem.Subproblem;
      reader.readMessage(value,proto.powerssl.controller.v1.Problem.Subproblem.deserializeBinaryFromReader);
      msg.addSubproblems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Problem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Problem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Problem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Problem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInstance();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSubproblemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.powerssl.controller.v1.Problem.Subproblem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.controller.v1.Problem.Subproblem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.controller.v1.Problem.Subproblem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.controller.v1.Problem.Subproblem.displayName = 'proto.powerssl.controller.v1.Problem.Subproblem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.controller.v1.Problem.Subproblem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.controller.v1.Problem.Subproblem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Problem.Subproblem.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    detail: jspb.Message.getFieldWithDefault(msg, 2, ""),
    identifier: (f = msg.getIdentifier()) && proto.powerssl.controller.v1.Identifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.controller.v1.Problem.Subproblem}
 */
proto.powerssl.controller.v1.Problem.Subproblem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.controller.v1.Problem.Subproblem;
  return proto.powerssl.controller.v1.Problem.Subproblem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.controller.v1.Problem.Subproblem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.controller.v1.Problem.Subproblem}
 */
proto.powerssl.controller.v1.Problem.Subproblem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    case 3:
      var value = new proto.powerssl.controller.v1.Identifier;
      reader.readMessage(value,proto.powerssl.controller.v1.Identifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.controller.v1.Problem.Subproblem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.controller.v1.Problem.Subproblem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.controller.v1.Problem.Subproblem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.powerssl.controller.v1.Identifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string detail = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.setDetail = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Identifier identifier = 3;
 * @return {?proto.powerssl.controller.v1.Identifier}
 */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.getIdentifier = function() {
  return /** @type{?proto.powerssl.controller.v1.Identifier} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.controller.v1.Identifier, 3));
};


/** @param {?proto.powerssl.controller.v1.Identifier|undefined} value */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.setIdentifier = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.powerssl.controller.v1.Problem.Subproblem.prototype.clearIdentifier = function() {
  this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.controller.v1.Problem.Subproblem.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.powerssl.controller.v1.Problem.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Problem.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.powerssl.controller.v1.Problem.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Problem.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 status = 3;
 * @return {number}
 */
proto.powerssl.controller.v1.Problem.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.powerssl.controller.v1.Problem.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string detail = 4;
 * @return {string}
 */
proto.powerssl.controller.v1.Problem.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Problem.prototype.setDetail = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string instance = 5;
 * @return {string}
 */
proto.powerssl.controller.v1.Problem.prototype.getInstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.powerssl.controller.v1.Problem.prototype.setInstance = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Subproblem subproblems = 6;
 * @return {!Array<!proto.powerssl.controller.v1.Problem.Subproblem>}
 */
proto.powerssl.controller.v1.Problem.prototype.getSubproblemsList = function() {
  return /** @type{!Array<!proto.powerssl.controller.v1.Problem.Subproblem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.controller.v1.Problem.Subproblem, 6));
};


/** @param {!Array<!proto.powerssl.controller.v1.Problem.Subproblem>} value */
proto.powerssl.controller.v1.Problem.prototype.setSubproblemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.powerssl.controller.v1.Problem.Subproblem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.controller.v1.Problem.Subproblem}
 */
proto.powerssl.controller.v1.Problem.prototype.addSubproblems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.powerssl.controller.v1.Problem.Subproblem, opt_index);
};


proto.powerssl.controller.v1.Problem.prototype.clearSubproblemsList = function() {
  this.setSubproblemsList([]);
};


goog.object.extend(exports, proto.powerssl.controller.v1);
