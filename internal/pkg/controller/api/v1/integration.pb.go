// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: powerssl/controller/v1/integration.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type IntegrationKind int32

const (
	IntegrationKind_INTEGRATION_KIND_UNSPECIFIED IntegrationKind = 0
	IntegrationKind_ACME                         IntegrationKind = 1
	IntegrationKind_DNS                          IntegrationKind = 2
)

var IntegrationKind_name = map[int32]string{
	0: "INTEGRATION_KIND_UNSPECIFIED",
	1: "ACME",
	2: "DNS",
}

var IntegrationKind_value = map[string]int32{
	"INTEGRATION_KIND_UNSPECIFIED": 0,
	"ACME":                         1,
	"DNS":                          2,
}

func (x IntegrationKind) String() string {
	return proto.EnumName(IntegrationKind_name, int32(x))
}

func (IntegrationKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b46c58fa735310b3, []int{0}
}

type RegisterIntegrationRequest struct {
	Kind                 IntegrationKind `protobuf:"varint,1,opt,name=kind,proto3,enum=powerssl.controller.v1.IntegrationKind" json:"kind,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RegisterIntegrationRequest) Reset()         { *m = RegisterIntegrationRequest{} }
func (m *RegisterIntegrationRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterIntegrationRequest) ProtoMessage()    {}
func (*RegisterIntegrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b46c58fa735310b3, []int{0}
}
func (m *RegisterIntegrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterIntegrationRequest.Unmarshal(m, b)
}
func (m *RegisterIntegrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterIntegrationRequest.Marshal(b, m, deterministic)
}
func (m *RegisterIntegrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterIntegrationRequest.Merge(m, src)
}
func (m *RegisterIntegrationRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterIntegrationRequest.Size(m)
}
func (m *RegisterIntegrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterIntegrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterIntegrationRequest proto.InternalMessageInfo

func (m *RegisterIntegrationRequest) GetKind() IntegrationKind {
	if m != nil {
		return m.Kind
	}
	return IntegrationKind_INTEGRATION_KIND_UNSPECIFIED
}

func (m *RegisterIntegrationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("powerssl.controller.v1.IntegrationKind", IntegrationKind_name, IntegrationKind_value)
	proto.RegisterType((*RegisterIntegrationRequest)(nil), "powerssl.controller.v1.RegisterIntegrationRequest")
}

func init() {
	proto.RegisterFile("powerssl/controller/v1/integration.proto", fileDescriptor_b46c58fa735310b3)
}

var fileDescriptor_b46c58fa735310b3 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4f, 0x83, 0x30,
	0x00, 0x85, 0xc7, 0x24, 0x3a, 0x7b, 0x50, 0xd2, 0x83, 0x59, 0x88, 0x07, 0xdc, 0x45, 0xe2, 0x81,
	0x0a, 0x1e, 0x8c, 0xd9, 0x09, 0x07, 0x33, 0xcd, 0x22, 0x1a, 0x98, 0x17, 0x2f, 0x4b, 0x85, 0x86,
	0x34, 0x83, 0x16, 0x4b, 0xc5, 0xe8, 0xaf, 0x37, 0x62, 0xb6, 0x11, 0x33, 0x6e, 0x3d, 0x7c, 0xdf,
	0x6b, 0xdf, 0x2b, 0xb0, 0x2b, 0xf1, 0x49, 0x65, 0x5d, 0x17, 0x28, 0x15, 0x5c, 0x49, 0x51, 0x14,
	0x54, 0xa2, 0xc6, 0x45, 0x8c, 0x2b, 0x9a, 0x4b, 0xa2, 0x98, 0xe0, 0x4e, 0x25, 0x85, 0x12, 0xf0,
	0x6c, 0x43, 0x3a, 0x3b, 0xd2, 0x69, 0x5c, 0xf3, 0xa2, 0x27, 0xa1, 0xa4, 0x8a, 0xfc, 0xa9, 0x93,
	0x12, 0x98, 0x31, 0xcd, 0x59, 0xad, 0xa8, 0xc4, 0xbb, 0xdc, 0x98, 0xbe, 0x7f, 0xd0, 0x5a, 0xc1,
	0x29, 0xd0, 0xd7, 0x8c, 0x67, 0x63, 0xcd, 0xd2, 0xec, 0x13, 0xef, 0xd2, 0xd9, 0x7f, 0x8f, 0xd3,
	0x31, 0x17, 0x8c, 0x67, 0x71, 0x2b, 0x41, 0x08, 0x74, 0x4e, 0x4a, 0x3a, 0x1e, 0x5a, 0x9a, 0x7d,
	0x1c, 0xb7, 0xe7, 0xab, 0x39, 0x38, 0xfd, 0x07, 0x43, 0x0b, 0x9c, 0xe3, 0x68, 0x19, 0x3e, 0xc4,
	0xfe, 0x12, 0x3f, 0x45, 0xab, 0x05, 0x8e, 0x82, 0xd5, 0x4b, 0x94, 0x3c, 0x87, 0x33, 0x3c, 0xc7,
	0x61, 0x60, 0x0c, 0xe0, 0x08, 0xe8, 0xfe, 0xec, 0x31, 0x34, 0x34, 0x78, 0x04, 0x0e, 0x82, 0x28,
	0x31, 0x86, 0xde, 0x37, 0x80, 0x9d, 0x9c, 0x84, 0xca, 0x86, 0xa5, 0x14, 0x66, 0x60, 0xb4, 0x29,
	0x03, 0xbd, 0xbe, 0xc7, 0xf6, 0xd7, 0x35, 0xad, 0x3e, 0xc7, 0x4f, 0x15, 0x6b, 0x98, 0xfa, 0x9a,
	0x0c, 0xae, 0xb5, 0xfb, 0xbb, 0xd7, 0xdb, 0x2d, 0xc6, 0x04, 0xda, 0x6e, 0xfc, 0xfb, 0x2f, 0x92,
	0x93, 0x02, 0x55, 0xeb, 0xbc, 0x3b, 0x38, 0xa9, 0x18, 0x6a, 0xdc, 0x29, 0xa9, 0xd8, 0xdb, 0x61,
	0x3b, 0xfa, 0xcd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x50, 0x2d, 0x45, 0xdb, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	Register(ctx context.Context, in *RegisterIntegrationRequest, opts ...grpc.CallOption) (IntegrationService_RegisterClient, error)
}

type integrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewIntegrationServiceClient(cc *grpc.ClientConn) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) Register(ctx context.Context, in *RegisterIntegrationRequest, opts ...grpc.CallOption) (IntegrationService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IntegrationService_serviceDesc.Streams[0], "/powerssl.controller.v1.IntegrationService/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_RegisterClient interface {
	Recv() (*Activity, error)
	grpc.ClientStream
}

type integrationServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *integrationServiceRegisterClient) Recv() (*Activity, error) {
	m := new(Activity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
type IntegrationServiceServer interface {
	Register(*RegisterIntegrationRequest, IntegrationService_RegisterServer) error
}

func RegisterIntegrationServiceServer(s *grpc.Server, srv IntegrationServiceServer) {
	s.RegisterService(&_IntegrationService_serviceDesc, srv)
}

func _IntegrationService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterIntegrationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).Register(m, &integrationServiceRegisterServer{stream})
}

type IntegrationService_RegisterServer interface {
	Send(*Activity) error
	grpc.ServerStream
}

type integrationServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *integrationServiceRegisterServer) Send(m *Activity) error {
	return x.ServerStream.SendMsg(m)
}

var _IntegrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.controller.v1.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _IntegrationService_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "powerssl/controller/v1/integration.proto",
}
