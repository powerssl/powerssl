// Code generated by go-bindata.
// sources:
// ../../../web/auth/index.html
// DO NOT EDIT!

package auth

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x5d\x73\xe2\x36\x17\xbe\xcf\xaf\xd0\xab\xc9\xcc\x92\x49\xb0\x20\x10\x42\xde\xda\xe9\xd0\x6d\x92\x6e\xbe\x96\x8f\xb2\xb0\x7b\x27\xdb\xc7\xb6\x88\x2c\x39\xd2\xb1\x81\xc9\xe4\xbf\x77\x6c\x02\x26\xdb\x6d\xa7\x9d\x5e\xf9\x7c\xe9\x9c\x47\x8f\x9e\x03\xee\xff\x42\x1d\xe0\x3a\x03\x92\x60\x2a\x2f\x0f\xdc\xf2\x43\x24\x57\xb1\x47\x41\xd1\xcb\x03\x42\xdc\x04\x78\x58\x1a\x84\xb8\x29\x20\x27\x41\xc2\x8d\x05\xf4\x68\x8e\x51\xb3\x4f\xf7\x53\x8a\xa7\xe0\xd1\x42\xc0\x32\xd3\x06\x29\x09\xb4\x42\x50\xe8\xd1\xa5\x08\x31\xf1\x42\x28\x44\x00\xcd\xca\x39\x21\x42\x09\x14\x5c\x36\x6d\xc0\x25\x78\xed\x13\x62\x13\x23\xd4\x53\x13\x75\x33\x12\xe8\x29\xbd\x6d\x2d\x85\x7a\x22\x06\xa4\x47\x2d\xae\x25\xd8\x04\x00\x29\x49\x0c\x44\x1e\x4d\x10\x33\xfb\x7f\xc6\x52\xbe\x0a\x42\xe5\xf8\x5a\xa3\x45\xc3\xb3\xd2\x09\x74\xca\x76\x01\xd6\x75\x5a\x4e\x8b\x05\xd6\xd6\x31\x27\x15\xca\x09\xac\xa5\x44\x28\x84\xd8\x08\x5c\x7b\xd4\x26\xbc\xd3\xef\x36\x6f\xd4\x59\xa7\xdf\x5d\x3d\x8f\xda\x5c\xcf\xe6\x83\xe3\xd6\x59\x7f\x3c\x1f\xae\x86\x71\x2f\x5a\x77\x3f\xcd\x8a\xdf\x1f\x93\xd6\xd5\x69\xaf\x33\x4f\xaf\x83\x5b\x39\x19\x2c\xc5\x4d\x7c\x3d\x98\xb1\x70\x20\x26\xbd\xdb\x79\x4a\x49\x60\xb4\xb5\xda\x88\x58\x28\x8f\x72\xa5\xd5\x3a\xd5\xb9\xdd\x5e\x0a\x05\x4a\xb8\x1c\xea\x25\x98\xc9\xe4\x9e\x0c\x72\x4c\x5c\xb6\x09\x96\xa4\xb3\x2d\xeb\xae\xaf\xc3\xf5\x96\x63\x2e\x14\x31\x5a\x82\x47\x4b\x93\x92\x40\x72\x6b\x3d\x5a\xd2\xcc\x85\x02\xf3\xd6\xbc\x7c\xb4\xf6\x36\x99\x62\xf3\x8c\x7e\x3f\x28\x69\xef\x2a\x23\x6d\xd2\xad\x43\x88\x1b\x8a\x62\x7b\xb2\xcc\x34\x63\xa3\xf3\x8c\xd6\x05\xe5\x7b\x70\x1f\x24\x89\xb4\xf1\x68\x6e\xc1\x94\x8f\x4e\x2f\xa7\x6f\x96\xcb\xaa\xf4\xbb\x03\x42\x65\x39\x92\x52\x66\x1e\x45\x58\x21\x7d\x37\xa1\x44\x6f\xb4\xa4\x44\x84\x7b\x0d\x49\x26\x79\x00\x89\x96\x21\x18\x8f\x5e\x29\x04\x43\xea\x69\x35\x5e\x16\x8a\x62\xcf\xf5\x73\x44\xad\xde\x66\xd9\xdc\x4f\x45\x3d\xcd\x47\x45\x7c\x54\xcd\xcc\x88\x94\x9b\x35\xbd\x9c\x54\x79\x97\x6d\x0e\xed\x18\x61\x35\x25\x2e\x2b\x89\x7e\xb3\x6d\x60\x44\x86\xc4\x9a\xa0\xd6\x5d\xa0\x43\x70\x16\xcf\x39\x98\x75\xa5\xb7\x8d\xd9\xec\x38\x1d\xa7\x5d\xc9\x6b\xf1\x27\x75\x9d\x9e\xf5\x9a\xd7\x71\xf6\xd1\x67\x77\xb7\x23\x79\xff\x18\x7d\xce\x2f\xda\xc8\x3b\xa7\x9a\x3d\x3e\x7c\x5b\x49\x5c\x8e\x75\x7f\x84\xe9\xd3\xc3\x38\x1c\xe4\x7d\xef\xaf\x95\xe4\xb2\x0d\xa4\xbf\xc3\x17\xaa\x85\x75\x02\xa9\xf3\x30\x92\xdc\x40\x05\x92\x2f\xf8\x8a\x49\xe1\x5b\x96\xe9\x2c\x03\xe3\x2c\x2c\x6b\x3b\xed\x53\xe7\x82\xe5\x69\xb8\x0d\xfe\x18\x7d\xb9\x1b\x83\xec\xd1\x8f\x93\x8b\x5f\x8e\xbf\xb6\x47\x77\x58\x74\xc6\xea\x7c\xd6\x49\xe3\xe1\x2a\x99\x5e\xdc\xb1\x49\x30\xb2\x83\xe1\x79\x32\x15\xfe\xbc\x73\xb1\x38\x8f\xf8\xd3\xf5\xd0\x3e\x15\xf3\xdc\x16\x11\x6f\xf9\xdd\xd1\x7f\xba\xd1\x3f\xdd\xf4\xc5\xf7\x8b\xfe\xe3\xbb\xdc\x7e\x1b\xf7\x26\x19\x2c\x92\xee\xb4\x75\x1a\xf6\x17\x9f\xb1\x57\xdc\x5f\xfd\x16\x01\xbb\x1d\xdd\x88\xf1\x78\x32\x1a\xad\x26\xd1\xf5\x2c\x13\xed\x87\xe7\xfc\x4b\x38\x58\x2f\xa6\xdc\x9c\x1d\x9f\xf7\x86\x5f\x3e\xa6\x5f\xe5\xbf\xbc\xcb\x56\x64\x87\x8d\x50\x07\x79\x0a\x0a\x8f\x1c\x03\x3c\x5c\x37\xa2\x5c\x05\x28\xb4\x6a\x1c\x91\x97\x9d\x9e\x0f\x1b\xd5\x8e\xd0\x23\x67\xa3\xe5\xba\x0a\x8a\xf2\xec\x5e\x29\x21\x55\xc8\xc9\x4c\xf5\xfd\x15\x22\x9e\x4b\x6c\x1c\xfd\x74\xb0\x57\x52\xf0\x7a\x8b\x88\x57\xb6\xaf\x76\x93\x1e\x39\x05\x97\x65\x6d\x5d\x5a\x8f\x46\x23\xe2\x18\x4c\x83\x1a\xb0\x80\xf4\x7d\xc7\x43\x27\x06\x6c\x50\xb6\x58\xe2\xcf\x36\xf7\x3d\x4a\x8e\x77\x13\x4e\xc8\x0e\x6e\xc8\x91\xbf\x47\x4b\xc8\x52\xa8\x50\x2f\x9d\x8c\x9b\x0a\xb7\xb6\xf8\x00\xd6\xf2\x18\xaa\xea\x13\xf2\xe1\xe5\x85\x38\x33\xf0\x07\x59\x36\x1d\x7f\x22\xaf\xaf\x1f\xde\x01\x7c\xdd\xf3\x6a\x7b\x6b\xed\xb3\xef\xb2\xcd\x8f\xa8\xcb\x36\xff\x72\x7f\x04\x00\x00\xff\xff\xf3\xed\xea\x2e\xf6\x06\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1782, mode: os.FileMode(420), modTime: time.Unix(1551202530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

