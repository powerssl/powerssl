// Code generated by protoc-gen-gotemplate. DO NOT EDIT.

package transport // import "powerssl.io/pkg/resource/generated/certificateauthority/transport"

import (
	"context"
	"errors"

	"github.com/gogo/protobuf/types"

	"powerssl.io/pkg/apiserver/api"
	apiv1 "powerssl.io/pkg/apiserver/api/v1"
	"powerssl.io/pkg/resource/generated/certificateauthority/endpoint"
)

// Avoid import errors
var _ = types.Timestamp{}

var UnknownError = errors.New("Unknown Error")

func decodeGRPCCertificateAuthority(certificateAuthority *apiv1.CertificateAuthority) (*api.CertificateAuthority, error) {
	return &api.CertificateAuthority{}, nil
}

func encodeGRPCCertificateAuthority(certificateAuthority *api.CertificateAuthority) (*apiv1.CertificateAuthority, error) {
	if certificateAuthority == nil {
		return nil, UnknownError
	}
	return &apiv1.CertificateAuthority{}, nil
}

func decodeGRPCCertificateAuthorities(grpcCertificateAuthorities []*apiv1.CertificateAuthority) ([]*api.CertificateAuthority, error) {
	certificateAuthorities := make([]*api.CertificateAuthority, len(grpcCertificateAuthorities))
	for i, grpcCertificateAuthority := range grpcCertificateAuthorities {
		certificateAuthority, err := decodeGRPCCertificateAuthority(grpcCertificateAuthority)
		if err != nil {
			return nil, err
		}
		certificateAuthorities[i] = certificateAuthority
	}
	return certificateAuthorities, nil
}

func encodeGRPCCertificateAuthorities(certificateAuthorities []*api.CertificateAuthority) ([]*apiv1.CertificateAuthority, error) {
	grpcCertificateAuthorities := make([]*apiv1.CertificateAuthority, len(certificateAuthorities))
	for i, certificateAuthority := range certificateAuthorities {
		grpcCertificateAuthority, err := encodeGRPCCertificateAuthority(certificateAuthority)
		if err != nil {
			return nil, err
		}
		grpcCertificateAuthorities[i] = grpcCertificateAuthority
	}
	return grpcCertificateAuthorities, nil
}

func decodeGRPCCreateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.CreateCertificateAuthorityRequest)
	certificateAuthority, err := decodeGRPCCertificateAuthority(req.GetCertificateAuthority())
	if err != nil {
		return nil, err
	}
	return endpoint.CreateRequest{
		CertificateAuthority: certificateAuthority,
	}, nil
}

func decodeGRPCCreateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.CertificateAuthority)
	certificateAuthority, err := decodeGRPCCertificateAuthority(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.CreateResponse{
		CertificateAuthority: certificateAuthority,
	}, nil
}

func encodeGRPCCreateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.CreateResponse)
	return encodeGRPCCertificateAuthority(resp.CertificateAuthority)
}

func encodeGRPCCreateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.CreateRequest)
	certificateAuthority, err := encodeGRPCCertificateAuthority(req.CertificateAuthority)
	if err != nil {
		return nil, err
	}
	return &apiv1.CreateCertificateAuthorityRequest{
		CertificateAuthority: certificateAuthority,
	}, nil
}

func decodeGRPCDeleteRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.DeleteCertificateAuthorityRequest)
	return endpoint.DeleteRequest{
		Name: req.GetName(),
	}, nil
}

func decodeGRPCDeleteResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	return endpoint.DeleteResponse{}, nil
}

func encodeGRPCDeleteResponse(_ context.Context, response interface{}) (interface{}, error) {
	return &types.Empty{}, nil
}

func encodeGRPCDeleteRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.DeleteRequest)
	return &apiv1.DeleteCertificateAuthorityRequest{
		Name: req.Name,
	}, nil
}

func decodeGRPCGetRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.GetCertificateAuthorityRequest)
	return endpoint.GetRequest{
		Name: req.GetName(),
	}, nil
}

func decodeGRPCGetResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.CertificateAuthority)
	certificateAuthority, err := decodeGRPCCertificateAuthority(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.GetResponse{
		CertificateAuthority: certificateAuthority,
	}, nil
}

func encodeGRPCGetResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.GetResponse)
	return encodeGRPCCertificateAuthority(resp.CertificateAuthority)
}

func encodeGRPCGetRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.GetRequest)
	return &apiv1.GetCertificateAuthorityRequest{
		Name: req.Name,
	}, nil
}

func decodeGRPCListRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.ListCertificateAuthoritiesRequest)
	return endpoint.ListRequest{
		PageSize:  int(req.GetPageSize()),
		PageToken: req.GetPageToken(),
	}, nil
}

func decodeGRPCListResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.ListCertificateAuthoritiesResponse)
	certificateAuthorities, err := decodeGRPCCertificateAuthorities(reply.GetCertificateAuthorities())
	if err != nil {
		return nil, err
	}
	return endpoint.ListResponse{
		CertificateAuthorities: certificateAuthorities,
		NextPageToken:          reply.GetNextPageToken(),
	}, nil
}

func encodeGRPCListResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.ListResponse)
	certificateAuthorities, err := encodeGRPCCertificateAuthorities(resp.CertificateAuthorities)
	if err != nil {
		return nil, err
	}
	return &apiv1.ListCertificateAuthoritiesResponse{
		CertificateAuthorities: certificateAuthorities,
		NextPageToken:          resp.NextPageToken,
	}, nil
}

func encodeGRPCListRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.ListRequest)
	return &apiv1.ListCertificateAuthoritiesRequest{
		PageSize:  int32(req.PageSize),
		PageToken: req.PageToken,
	}, nil
}

func decodeGRPCUpdateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.UpdateCertificateAuthorityRequest)
	certificateAuthority, err := decodeGRPCCertificateAuthority(req.GetCertificateAuthority())
	if err != nil {
		return nil, err
	}
	return endpoint.UpdateRequest{
		Name:                 req.GetName(),
		CertificateAuthority: certificateAuthority,
	}, nil
}

func decodeGRPCUpdateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.CertificateAuthority)
	certificateAuthority, err := decodeGRPCCertificateAuthority(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.UpdateResponse{
		CertificateAuthority: certificateAuthority,
	}, nil
}

func encodeGRPCUpdateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.UpdateResponse)
	return encodeGRPCCertificateAuthority(resp.CertificateAuthority)
}

func encodeGRPCUpdateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.UpdateRequest)
	certificateAuthority, err := encodeGRPCCertificateAuthority(req.CertificateAuthority)
	if err != nil {
		return nil, err
	}
	return &apiv1.UpdateCertificateAuthorityRequest{
		Name:                 req.Name,
		CertificateAuthority: certificateAuthority,
	}, nil
}
