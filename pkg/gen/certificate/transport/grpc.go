// Code generated by protoc-gen-gotemplate. DO NOT EDIT.

package transport

import (
	"context"

	"powerssl.io/pkg/api"
	apiv1 "powerssl.io/pkg/api/v1"
	"powerssl.io/pkg/gen/certificate/endpoint"
	"powerssl.io/pkg/resources/transport"
)

func decodeGRPCCertificates(certificates []*apiv1.Certificate) []*api.Certificate {
	items := make([]*api.Certificate, len(certificates))
	for i, certificate := range certificates {
		items[i] = decodeGRPCCertificate(certificate)
	}
	return items
}

func decodeGRPCCertificate(certificate *apiv1.Certificate) *api.Certificate {
	return &api.Certificate{
		TypeMeta:   transport.DecodeGRPCTypeMeta(certificate.GetTypeMeta()),
		ObjectMeta: transport.DecodeGRPCObjectMeta(certificate.GetObjectMeta()),
		// TODO
	}
}

func encodeGRPCCertificates(certificates []*api.Certificate) []*apiv1.Certificate {
	items := make([]*apiv1.Certificate, len(certificates))
	for i, certificate := range certificates {
		items[i] = encodeGRPCCertificate(certificate)
	}
	return items
}

func encodeGRPCCertificate(certificate *api.Certificate) *apiv1.Certificate {
	return &apiv1.Certificate{
		TypeMeta:   transport.EncodeGRPCTypeMeta(certificate.TypeMeta),
		ObjectMeta: transport.EncodeGRPCObjectMeta(certificate.ObjectMeta),
		// TODO
	}
}

func decodeGRPCCreateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.CreateCertificateRequest)
	return endpoint.CreateRequest{
		Certificate: decodeGRPCCertificate(req.GetCertificate()),
	}, nil
}

func decodeGRPCCreateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.Certificate)
	return endpoint.CreateResponse{
		Certificate: decodeGRPCCertificate(reply),
	}, nil
}

func encodeGRPCCreateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.CreateResponse)
	return encodeGRPCCertificate(resp.Certificate), nil
}

func encodeGRPCCreateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.CreateRequest)

	return &apiv1.CreateCertificateRequest{
		Certificate: encodeGRPCCertificate(req.Certificate),
	}, nil
}

func decodeGRPCDeleteRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.DeleteCertificateRequest)
	return endpoint.DeleteRequest{
		Name: req.GetName(),
	}, nil
}

func decodeGRPCDeleteResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	return endpoint.DeleteResponse{}, nil
}

func encodeGRPCDeleteResponse(_ context.Context, response interface{}) (interface{}, error) {
	return nil, nil
}

func encodeGRPCDeleteRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.DeleteRequest)

	return &apiv1.DeleteCertificateRequest{
		Name: req.Name,
	}, nil
}

func decodeGRPCGetRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.GetCertificateRequest)
	return endpoint.GetRequest{
		Name: req.GetName(),
	}, nil
}

func decodeGRPCGetResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.Certificate)
	return endpoint.GetResponse{
		Certificate: decodeGRPCCertificate(reply),
	}, nil
}

func encodeGRPCGetResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.GetResponse)
	return encodeGRPCCertificate(resp.Certificate), nil
}

func encodeGRPCGetRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.GetRequest)

	return &apiv1.GetCertificateRequest{
		Name: req.Name,
	}, nil
}

func decodeGRPCListRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	// req := grpcReq.(*apiv1.ListCertificatesRequest)
	return endpoint.ListRequest{}, nil
}

func decodeGRPCListResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.ListCertificatesResponse)
	return endpoint.ListResponse{
		Certificates: decodeGRPCCertificates(reply.GetItems()),
	}, nil
}

func encodeGRPCListResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.ListResponse)
	return encodeGRPCCertificates(resp.Certificates), nil
}

func encodeGRPCListRequest(_ context.Context, request interface{}) (interface{}, error) {
	return &apiv1.ListCertificatesRequest{}, nil
}

func decodeGRPCUpdateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*apiv1.UpdateCertificateRequest)
	return endpoint.UpdateRequest{
		Certificate: decodeGRPCCertificate(req.GetCertificate()),
	}, nil
}

func decodeGRPCUpdateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*apiv1.Certificate)
	return endpoint.UpdateResponse{
		Certificate: decodeGRPCCertificate(reply),
	}, nil
}

func encodeGRPCUpdateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(endpoint.UpdateResponse)
	return encodeGRPCCertificate(resp.Certificate), nil
}

func encodeGRPCUpdateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(endpoint.UpdateRequest)

	return &apiv1.UpdateCertificateRequest{
		Certificate: encodeGRPCCertificate(req.Certificate),
	}, nil
}
