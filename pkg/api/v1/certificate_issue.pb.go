// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/certificate_issue.proto

package api // import "powerssl.io/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateCertificateIssueRequest struct {
	CertificateAuthority *CertificateIssue `protobuf:"bytes,1,opt,name=certificate_authority,json=certificateAuthority" json:"certificate_authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateCertificateIssueRequest) Reset()         { *m = CreateCertificateIssueRequest{} }
func (m *CreateCertificateIssueRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCertificateIssueRequest) ProtoMessage()    {}
func (*CreateCertificateIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{0}
}
func (m *CreateCertificateIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCertificateIssueRequest.Unmarshal(m, b)
}
func (m *CreateCertificateIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCertificateIssueRequest.Marshal(b, m, deterministic)
}
func (dst *CreateCertificateIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCertificateIssueRequest.Merge(dst, src)
}
func (m *CreateCertificateIssueRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCertificateIssueRequest.Size(m)
}
func (m *CreateCertificateIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCertificateIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCertificateIssueRequest proto.InternalMessageInfo

func (m *CreateCertificateIssueRequest) GetCertificateAuthority() *CertificateIssue {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

type DeleteCertificatIssueRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCertificatIssueRequest) Reset()         { *m = DeleteCertificatIssueRequest{} }
func (m *DeleteCertificatIssueRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCertificatIssueRequest) ProtoMessage()    {}
func (*DeleteCertificatIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{1}
}
func (m *DeleteCertificatIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCertificatIssueRequest.Unmarshal(m, b)
}
func (m *DeleteCertificatIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCertificatIssueRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteCertificatIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCertificatIssueRequest.Merge(dst, src)
}
func (m *DeleteCertificatIssueRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCertificatIssueRequest.Size(m)
}
func (m *DeleteCertificatIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCertificatIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCertificatIssueRequest proto.InternalMessageInfo

func (m *DeleteCertificatIssueRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetCertificateIssueRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateIssueRequest) Reset()         { *m = GetCertificateIssueRequest{} }
func (m *GetCertificateIssueRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificateIssueRequest) ProtoMessage()    {}
func (*GetCertificateIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{2}
}
func (m *GetCertificateIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateIssueRequest.Unmarshal(m, b)
}
func (m *GetCertificateIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateIssueRequest.Marshal(b, m, deterministic)
}
func (dst *GetCertificateIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateIssueRequest.Merge(dst, src)
}
func (m *GetCertificateIssueRequest) XXX_Size() int {
	return xxx_messageInfo_GetCertificateIssueRequest.Size(m)
}
func (m *GetCertificateIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateIssueRequest proto.InternalMessageInfo

func (m *GetCertificateIssueRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListCertificateIssuesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificateIssuesRequest) Reset()         { *m = ListCertificateIssuesRequest{} }
func (m *ListCertificateIssuesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCertificateIssuesRequest) ProtoMessage()    {}
func (*ListCertificateIssuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{3}
}
func (m *ListCertificateIssuesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateIssuesRequest.Unmarshal(m, b)
}
func (m *ListCertificateIssuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateIssuesRequest.Marshal(b, m, deterministic)
}
func (dst *ListCertificateIssuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateIssuesRequest.Merge(dst, src)
}
func (m *ListCertificateIssuesRequest) XXX_Size() int {
	return xxx_messageInfo_ListCertificateIssuesRequest.Size(m)
}
func (m *ListCertificateIssuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateIssuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateIssuesRequest proto.InternalMessageInfo

type ListCertificateIssuesResponse struct {
	TypeMeta             *TypeMeta           `protobuf:"bytes,1,opt,name=type_meta,json=typeMeta" json:"type_meta,omitempty"`
	ListMeta             *ListMeta           `protobuf:"bytes,2,opt,name=list_meta,json=listMeta" json:"list_meta,omitempty"`
	Items                []*CertificateIssue `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListCertificateIssuesResponse) Reset()         { *m = ListCertificateIssuesResponse{} }
func (m *ListCertificateIssuesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCertificateIssuesResponse) ProtoMessage()    {}
func (*ListCertificateIssuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{4}
}
func (m *ListCertificateIssuesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateIssuesResponse.Unmarshal(m, b)
}
func (m *ListCertificateIssuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateIssuesResponse.Marshal(b, m, deterministic)
}
func (dst *ListCertificateIssuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateIssuesResponse.Merge(dst, src)
}
func (m *ListCertificateIssuesResponse) XXX_Size() int {
	return xxx_messageInfo_ListCertificateIssuesResponse.Size(m)
}
func (m *ListCertificateIssuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateIssuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateIssuesResponse proto.InternalMessageInfo

func (m *ListCertificateIssuesResponse) GetTypeMeta() *TypeMeta {
	if m != nil {
		return m.TypeMeta
	}
	return nil
}

func (m *ListCertificateIssuesResponse) GetListMeta() *ListMeta {
	if m != nil {
		return m.ListMeta
	}
	return nil
}

func (m *ListCertificateIssuesResponse) GetItems() []*CertificateIssue {
	if m != nil {
		return m.Items
	}
	return nil
}

type UpdateCertificateIssueRequest struct {
	CertificateAuthority *CertificateIssue `protobuf:"bytes,1,opt,name=certificate_authority,json=certificateAuthority" json:"certificate_authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateCertificateIssueRequest) Reset()         { *m = UpdateCertificateIssueRequest{} }
func (m *UpdateCertificateIssueRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCertificateIssueRequest) ProtoMessage()    {}
func (*UpdateCertificateIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{5}
}
func (m *UpdateCertificateIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCertificateIssueRequest.Unmarshal(m, b)
}
func (m *UpdateCertificateIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCertificateIssueRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateCertificateIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCertificateIssueRequest.Merge(dst, src)
}
func (m *UpdateCertificateIssueRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCertificateIssueRequest.Size(m)
}
func (m *UpdateCertificateIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCertificateIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCertificateIssueRequest proto.InternalMessageInfo

func (m *UpdateCertificateIssueRequest) GetCertificateAuthority() *CertificateIssue {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

type CertificateIssue struct {
	TypeMeta             *TypeMeta               `protobuf:"bytes,1,opt,name=type_meta,json=typeMeta" json:"type_meta,omitempty"`
	ObjectMeta           *ObjectMeta             `protobuf:"bytes,2,opt,name=object_meta,json=objectMeta" json:"object_meta,omitempty"`
	Spec                 *CertificateIssueSpec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status               *CertificateIssueStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CertificateIssue) Reset()         { *m = CertificateIssue{} }
func (m *CertificateIssue) String() string { return proto.CompactTextString(m) }
func (*CertificateIssue) ProtoMessage()    {}
func (*CertificateIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{6}
}
func (m *CertificateIssue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateIssue.Unmarshal(m, b)
}
func (m *CertificateIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateIssue.Marshal(b, m, deterministic)
}
func (dst *CertificateIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateIssue.Merge(dst, src)
}
func (m *CertificateIssue) XXX_Size() int {
	return xxx_messageInfo_CertificateIssue.Size(m)
}
func (m *CertificateIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateIssue.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateIssue proto.InternalMessageInfo

func (m *CertificateIssue) GetTypeMeta() *TypeMeta {
	if m != nil {
		return m.TypeMeta
	}
	return nil
}

func (m *CertificateIssue) GetObjectMeta() *ObjectMeta {
	if m != nil {
		return m.ObjectMeta
	}
	return nil
}

func (m *CertificateIssue) GetSpec() *CertificateIssueSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CertificateIssue) GetStatus() *CertificateIssueStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CertificateIssueSpec struct {
	CommonName           string   `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	EncryptionAlgorithm  string   `protobuf:"bytes,2,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3" json:"encryption_algorithm,omitempty"`
	KeySize              int32    `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	SignatureAlgorithm   string   `protobuf:"bytes,4,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signature_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateIssueSpec) Reset()         { *m = CertificateIssueSpec{} }
func (m *CertificateIssueSpec) String() string { return proto.CompactTextString(m) }
func (*CertificateIssueSpec) ProtoMessage()    {}
func (*CertificateIssueSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{7}
}
func (m *CertificateIssueSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateIssueSpec.Unmarshal(m, b)
}
func (m *CertificateIssueSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateIssueSpec.Marshal(b, m, deterministic)
}
func (dst *CertificateIssueSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateIssueSpec.Merge(dst, src)
}
func (m *CertificateIssueSpec) XXX_Size() int {
	return xxx_messageInfo_CertificateIssueSpec.Size(m)
}
func (m *CertificateIssueSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateIssueSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateIssueSpec proto.InternalMessageInfo

func (m *CertificateIssueSpec) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateIssueSpec) GetEncryptionAlgorithm() string {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return ""
}

func (m *CertificateIssueSpec) GetKeySize() int32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CertificateIssueSpec) GetSignatureAlgorithm() string {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return ""
}

type CertificateIssueStatus struct {
	Phase                string   `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateIssueStatus) Reset()         { *m = CertificateIssueStatus{} }
func (m *CertificateIssueStatus) String() string { return proto.CompactTextString(m) }
func (*CertificateIssueStatus) ProtoMessage()    {}
func (*CertificateIssueStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_issue_55f113332306edc8, []int{8}
}
func (m *CertificateIssueStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateIssueStatus.Unmarshal(m, b)
}
func (m *CertificateIssueStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateIssueStatus.Marshal(b, m, deterministic)
}
func (dst *CertificateIssueStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateIssueStatus.Merge(dst, src)
}
func (m *CertificateIssueStatus) XXX_Size() int {
	return xxx_messageInfo_CertificateIssueStatus.Size(m)
}
func (m *CertificateIssueStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateIssueStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateIssueStatus proto.InternalMessageInfo

func (m *CertificateIssueStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateCertificateIssueRequest)(nil), "powerssl.api.v1.CreateCertificateIssueRequest")
	proto.RegisterType((*DeleteCertificatIssueRequest)(nil), "powerssl.api.v1.DeleteCertificatIssueRequest")
	proto.RegisterType((*GetCertificateIssueRequest)(nil), "powerssl.api.v1.GetCertificateIssueRequest")
	proto.RegisterType((*ListCertificateIssuesRequest)(nil), "powerssl.api.v1.ListCertificateIssuesRequest")
	proto.RegisterType((*ListCertificateIssuesResponse)(nil), "powerssl.api.v1.ListCertificateIssuesResponse")
	proto.RegisterType((*UpdateCertificateIssueRequest)(nil), "powerssl.api.v1.UpdateCertificateIssueRequest")
	proto.RegisterType((*CertificateIssue)(nil), "powerssl.api.v1.CertificateIssue")
	proto.RegisterType((*CertificateIssueSpec)(nil), "powerssl.api.v1.CertificateIssueSpec")
	proto.RegisterType((*CertificateIssueStatus)(nil), "powerssl.api.v1.CertificateIssueStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CertificateIssueService service

type CertificateIssueServiceClient interface {
	CreateCertificateIssue(ctx context.Context, in *CreateCertificateIssueRequest, opts ...grpc.CallOption) (*CertificateIssue, error)
	DeleteCertificatIssue(ctx context.Context, in *DeleteCertificatIssueRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetCertificateIssue(ctx context.Context, in *GetCertificateIssueRequest, opts ...grpc.CallOption) (*CertificateIssue, error)
	ListCertificateIssues(ctx context.Context, in *ListCertificateIssuesRequest, opts ...grpc.CallOption) (*ListCertificateIssuesResponse, error)
	UpdateCertificateIssue(ctx context.Context, in *UpdateCertificateIssueRequest, opts ...grpc.CallOption) (*CertificateIssue, error)
}

type certificateIssueServiceClient struct {
	cc *grpc.ClientConn
}

func NewCertificateIssueServiceClient(cc *grpc.ClientConn) CertificateIssueServiceClient {
	return &certificateIssueServiceClient{cc}
}

func (c *certificateIssueServiceClient) CreateCertificateIssue(ctx context.Context, in *CreateCertificateIssueRequest, opts ...grpc.CallOption) (*CertificateIssue, error) {
	out := new(CertificateIssue)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateIssueService/CreateCertificateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateIssueServiceClient) DeleteCertificatIssue(ctx context.Context, in *DeleteCertificatIssueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateIssueService/DeleteCertificatIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateIssueServiceClient) GetCertificateIssue(ctx context.Context, in *GetCertificateIssueRequest, opts ...grpc.CallOption) (*CertificateIssue, error) {
	out := new(CertificateIssue)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateIssueService/GetCertificateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateIssueServiceClient) ListCertificateIssues(ctx context.Context, in *ListCertificateIssuesRequest, opts ...grpc.CallOption) (*ListCertificateIssuesResponse, error) {
	out := new(ListCertificateIssuesResponse)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateIssueService/ListCertificateIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateIssueServiceClient) UpdateCertificateIssue(ctx context.Context, in *UpdateCertificateIssueRequest, opts ...grpc.CallOption) (*CertificateIssue, error) {
	out := new(CertificateIssue)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateIssueService/UpdateCertificateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertificateIssueService service

type CertificateIssueServiceServer interface {
	CreateCertificateIssue(context.Context, *CreateCertificateIssueRequest) (*CertificateIssue, error)
	DeleteCertificatIssue(context.Context, *DeleteCertificatIssueRequest) (*types.Empty, error)
	GetCertificateIssue(context.Context, *GetCertificateIssueRequest) (*CertificateIssue, error)
	ListCertificateIssues(context.Context, *ListCertificateIssuesRequest) (*ListCertificateIssuesResponse, error)
	UpdateCertificateIssue(context.Context, *UpdateCertificateIssueRequest) (*CertificateIssue, error)
}

func RegisterCertificateIssueServiceServer(s *grpc.Server, srv CertificateIssueServiceServer) {
	s.RegisterService(&_CertificateIssueService_serviceDesc, srv)
}

func _CertificateIssueService_CreateCertificateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssueServiceServer).CreateCertificateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateIssueService/CreateCertificateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssueServiceServer).CreateCertificateIssue(ctx, req.(*CreateCertificateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateIssueService_DeleteCertificatIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertificatIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssueServiceServer).DeleteCertificatIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateIssueService/DeleteCertificatIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssueServiceServer).DeleteCertificatIssue(ctx, req.(*DeleteCertificatIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateIssueService_GetCertificateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssueServiceServer).GetCertificateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateIssueService/GetCertificateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssueServiceServer).GetCertificateIssue(ctx, req.(*GetCertificateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateIssueService_ListCertificateIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificateIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssueServiceServer).ListCertificateIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateIssueService/ListCertificateIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssueServiceServer).ListCertificateIssues(ctx, req.(*ListCertificateIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateIssueService_UpdateCertificateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateIssueServiceServer).UpdateCertificateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateIssueService/UpdateCertificateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateIssueServiceServer).UpdateCertificateIssue(ctx, req.(*UpdateCertificateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateIssueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.api.v1.CertificateIssueService",
	HandlerType: (*CertificateIssueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCertificateIssue",
			Handler:    _CertificateIssueService_CreateCertificateIssue_Handler,
		},
		{
			MethodName: "DeleteCertificatIssue",
			Handler:    _CertificateIssueService_DeleteCertificatIssue_Handler,
		},
		{
			MethodName: "GetCertificateIssue",
			Handler:    _CertificateIssueService_GetCertificateIssue_Handler,
		},
		{
			MethodName: "ListCertificateIssues",
			Handler:    _CertificateIssueService_ListCertificateIssues_Handler,
		},
		{
			MethodName: "UpdateCertificateIssue",
			Handler:    _CertificateIssueService_UpdateCertificateIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/certificate_issue.proto",
}

func init() {
	proto.RegisterFile("api/v1/certificate_issue.proto", fileDescriptor_certificate_issue_55f113332306edc8)
}

var fileDescriptor_certificate_issue_55f113332306edc8 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0x9b, 0x36, 0xed, 0xd3, 0x4e, 0x0f, 0x0f, 0x6c, 0x5e, 0x48, 0xdd, 0xb4, 0x14, 0x4b,
	0x08, 0x24, 0x84, 0x4d, 0x82, 0x04, 0x42, 0x20, 0xa1, 0x52, 0x10, 0x42, 0xe2, 0x45, 0x72, 0x81,
	0x03, 0x97, 0xb0, 0x31, 0x53, 0x67, 0x89, 0xed, 0x5d, 0xbc, 0xeb, 0x14, 0xf7, 0xcc, 0x67, 0xe2,
	0xc4, 0x07, 0xe0, 0x63, 0x21, 0xaf, 0x9d, 0x34, 0xad, 0x9d, 0x17, 0x71, 0xe1, 0xb6, 0xf1, 0xcc,
	0x6f, 0x66, 0xff, 0x33, 0xab, 0x7f, 0x60, 0x9f, 0x0a, 0x66, 0x8f, 0x3a, 0xb6, 0x8b, 0x91, 0x62,
	0x27, 0xcc, 0xa5, 0x0a, 0x7b, 0x4c, 0xca, 0x18, 0x2d, 0x11, 0x71, 0xc5, 0xc9, 0xff, 0x82, 0x9f,
	0x62, 0x24, 0xa5, 0x6f, 0x51, 0xc1, 0xac, 0x51, 0xc7, 0xd8, 0xf5, 0x38, 0xf7, 0x7c, 0xb4, 0x75,
	0xb8, 0x1f, 0x9f, 0xd8, 0x18, 0x08, 0x95, 0x64, 0xd9, 0xc6, 0xd5, 0xbc, 0x5a, 0x80, 0x8a, 0x66,
	0x9f, 0xcc, 0x53, 0xd8, 0x3b, 0x8a, 0x90, 0x2a, 0x3c, 0x3a, 0xef, 0xf0, 0x2a, 0x6d, 0xe0, 0xe0,
	0xb7, 0x18, 0xa5, 0x22, 0x1f, 0xa1, 0x31, 0xdd, 0x9c, 0xc6, 0x6a, 0xc0, 0x23, 0xa6, 0x92, 0x56,
	0xe5, 0xa0, 0x72, 0x7b, 0xbb, 0x7b, 0xc3, 0xba, 0x74, 0x03, 0xab, 0x50, 0xa8, 0x3e, 0xc5, 0x1f,
	0x8e, 0x71, 0xb3, 0x0b, 0xed, 0xe7, 0xe8, 0xe3, 0x74, 0xe3, 0x0b, 0x7d, 0x09, 0x54, 0x43, 0x1a,
	0xa0, 0x6e, 0xb3, 0xe5, 0xe8, 0xb3, 0x79, 0x0f, 0x8c, 0x97, 0xa8, 0x66, 0xdd, 0xb4, 0x8c, 0xd8,
	0x87, 0xf6, 0x6b, 0x26, 0x0b, 0x88, 0xcc, 0x19, 0xf3, 0x77, 0x05, 0xf6, 0x66, 0x24, 0x48, 0xc1,
	0x43, 0x89, 0xe4, 0x01, 0x6c, 0xa9, 0x44, 0x60, 0x2f, 0x9d, 0x59, 0xae, 0x79, 0xa7, 0xa0, 0xf9,
	0x7d, 0x22, 0xf0, 0x0d, 0x2a, 0xea, 0x6c, 0xaa, 0xfc, 0x94, 0x72, 0x3e, 0x93, 0x2a, 0xe3, 0x56,
	0x67, 0x70, 0x69, 0xeb, 0x8c, 0xf3, 0xf3, 0x13, 0x79, 0x08, 0xeb, 0x4c, 0x61, 0x20, 0x5b, 0x6b,
	0x07, 0x6b, 0xcb, 0xcd, 0x37, 0xcb, 0x4f, 0x37, 0xf9, 0x41, 0x7c, 0xf9, 0x07, 0x9b, 0xfc, 0xb1,
	0x0a, 0x57, 0x2e, 0xa7, 0xfe, 0xf5, 0xd8, 0x9e, 0xc0, 0x36, 0xef, 0x7f, 0x45, 0xf7, 0xc2, 0xe0,
	0x76, 0x0b, 0xe4, 0x3b, 0x9d, 0xa3, 0x59, 0xe0, 0x93, 0x33, 0x79, 0x04, 0x55, 0x29, 0xd0, 0x6d,
	0xad, 0x69, 0xec, 0xe6, 0x42, 0x45, 0xc7, 0x02, 0x5d, 0x47, 0x23, 0xe4, 0x29, 0x6c, 0x48, 0x45,
	0x55, 0x2c, 0x5b, 0x55, 0x0d, 0xdf, 0x5a, 0x0c, 0xeb, 0x74, 0x27, 0xc7, 0xcc, 0x9f, 0x15, 0xa8,
	0x97, 0xd5, 0x27, 0xd7, 0x61, 0xdb, 0xe5, 0x41, 0xc0, 0xc3, 0xde, 0xd4, 0xf3, 0x84, 0xec, 0xd3,
	0x5b, 0x1a, 0x20, 0xe9, 0x40, 0x1d, 0x43, 0x37, 0x4a, 0x84, 0x62, 0x3c, 0xec, 0x51, 0xdf, 0x4b,
	0xe7, 0x3a, 0x08, 0xb4, 0xf8, 0x2d, 0xa7, 0x76, 0x1e, 0x3b, 0x1c, 0x87, 0xc8, 0x0e, 0x6c, 0x0e,
	0x31, 0xe9, 0x49, 0x76, 0x86, 0x5a, 0xec, 0xba, 0xf3, 0xdf, 0x10, 0x93, 0x63, 0x76, 0x86, 0xc4,
	0x86, 0x9a, 0x64, 0x5e, 0x48, 0x55, 0x1c, 0xe1, 0x54, 0xb1, 0xaa, 0x2e, 0x46, 0x26, 0xa1, 0x49,
	0x2d, 0xd3, 0x82, 0x66, 0xb9, 0x34, 0x52, 0x87, 0x75, 0x31, 0xa0, 0x72, 0x7c, 0xe7, 0xec, 0x47,
	0xf7, 0x57, 0x15, 0xae, 0x15, 0x00, 0x8c, 0x46, 0xcc, 0x45, 0x12, 0x40, 0xb3, 0xdc, 0x4e, 0x88,
	0x55, 0x9c, 0xe7, 0x3c, 0xdf, 0x31, 0x16, 0x3f, 0x47, 0x73, 0x85, 0x7c, 0x86, 0x46, 0xa9, 0x89,
	0x90, 0xbb, 0x05, 0x7a, 0x9e, 0xd9, 0x18, 0x4d, 0x2b, 0xb3, 0x4d, 0x6b, 0x6c, 0x9b, 0xd6, 0x8b,
	0xd4, 0x36, 0xcd, 0x15, 0xe2, 0x41, 0xad, 0xc4, 0x72, 0xc8, 0x9d, 0x42, 0xfd, 0xd9, 0xc6, 0xb4,
	0x9c, 0x94, 0xef, 0xd0, 0x28, 0x35, 0xa2, 0x12, 0x29, 0xf3, 0x1c, 0xcd, 0xb0, 0x96, 0x4d, 0xcf,
	0xfc, 0xcd, 0x5c, 0x49, 0x77, 0x56, 0x6e, 0x1c, 0x25, 0x3b, 0x9b, 0xeb, 0x30, 0x4b, 0x09, 0x7d,
	0xd6, 0xfe, 0x64, 0x4c, 0xb2, 0x18, 0xb7, 0xc5, 0xd0, 0xb3, 0xb3, 0xbf, 0xa5, 0xc7, 0x54, 0xb0,
	0xfe, 0x86, 0xde, 0xc0, 0xfd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0xdb, 0x6c, 0x2d, 0xf9,
	0x06, 0x00, 0x00,
}
