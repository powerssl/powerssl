// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/certificate.proto

package api // import "powerssl.io/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateCertificateRequest struct {
	CertificateAuthority *Certificate `protobuf:"bytes,1,opt,name=certificate_authority,json=certificateAuthority" json:"certificate_authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateCertificateRequest) Reset()         { *m = CreateCertificateRequest{} }
func (m *CreateCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCertificateRequest) ProtoMessage()    {}
func (*CreateCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{0}
}
func (m *CreateCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCertificateRequest.Unmarshal(m, b)
}
func (m *CreateCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCertificateRequest.Marshal(b, m, deterministic)
}
func (dst *CreateCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCertificateRequest.Merge(dst, src)
}
func (m *CreateCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCertificateRequest.Size(m)
}
func (m *CreateCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCertificateRequest proto.InternalMessageInfo

func (m *CreateCertificateRequest) GetCertificateAuthority() *Certificate {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

type DeleteCertificatRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCertificatRequest) Reset()         { *m = DeleteCertificatRequest{} }
func (m *DeleteCertificatRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCertificatRequest) ProtoMessage()    {}
func (*DeleteCertificatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{1}
}
func (m *DeleteCertificatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCertificatRequest.Unmarshal(m, b)
}
func (m *DeleteCertificatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCertificatRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteCertificatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCertificatRequest.Merge(dst, src)
}
func (m *DeleteCertificatRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCertificatRequest.Size(m)
}
func (m *DeleteCertificatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCertificatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCertificatRequest proto.InternalMessageInfo

func (m *DeleteCertificatRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetCertificateRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateRequest) Reset()         { *m = GetCertificateRequest{} }
func (m *GetCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificateRequest) ProtoMessage()    {}
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{2}
}
func (m *GetCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateRequest.Unmarshal(m, b)
}
func (m *GetCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateRequest.Marshal(b, m, deterministic)
}
func (dst *GetCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateRequest.Merge(dst, src)
}
func (m *GetCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_GetCertificateRequest.Size(m)
}
func (m *GetCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateRequest proto.InternalMessageInfo

func (m *GetCertificateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListCertificateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificateRequest) Reset()         { *m = ListCertificateRequest{} }
func (m *ListCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*ListCertificateRequest) ProtoMessage()    {}
func (*ListCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{3}
}
func (m *ListCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateRequest.Unmarshal(m, b)
}
func (m *ListCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateRequest.Marshal(b, m, deterministic)
}
func (dst *ListCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateRequest.Merge(dst, src)
}
func (m *ListCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_ListCertificateRequest.Size(m)
}
func (m *ListCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateRequest proto.InternalMessageInfo

type ListCertificateResponse struct {
	TypeMeta             *TypeMeta      `protobuf:"bytes,1,opt,name=type_meta,json=typeMeta" json:"type_meta,omitempty"`
	ListMeta             *ListMeta      `protobuf:"bytes,2,opt,name=list_meta,json=listMeta" json:"list_meta,omitempty"`
	Items                []*Certificate `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListCertificateResponse) Reset()         { *m = ListCertificateResponse{} }
func (m *ListCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*ListCertificateResponse) ProtoMessage()    {}
func (*ListCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{4}
}
func (m *ListCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateResponse.Unmarshal(m, b)
}
func (m *ListCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateResponse.Marshal(b, m, deterministic)
}
func (dst *ListCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateResponse.Merge(dst, src)
}
func (m *ListCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_ListCertificateResponse.Size(m)
}
func (m *ListCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateResponse proto.InternalMessageInfo

func (m *ListCertificateResponse) GetTypeMeta() *TypeMeta {
	if m != nil {
		return m.TypeMeta
	}
	return nil
}

func (m *ListCertificateResponse) GetListMeta() *ListMeta {
	if m != nil {
		return m.ListMeta
	}
	return nil
}

func (m *ListCertificateResponse) GetItems() []*Certificate {
	if m != nil {
		return m.Items
	}
	return nil
}

type UpdateCertificateRequest struct {
	CertificateAuthority *Certificate `protobuf:"bytes,1,opt,name=certificate_authority,json=certificateAuthority" json:"certificate_authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateCertificateRequest) Reset()         { *m = UpdateCertificateRequest{} }
func (m *UpdateCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCertificateRequest) ProtoMessage()    {}
func (*UpdateCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{5}
}
func (m *UpdateCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCertificateRequest.Unmarshal(m, b)
}
func (m *UpdateCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCertificateRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCertificateRequest.Merge(dst, src)
}
func (m *UpdateCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCertificateRequest.Size(m)
}
func (m *UpdateCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCertificateRequest proto.InternalMessageInfo

func (m *UpdateCertificateRequest) GetCertificateAuthority() *Certificate {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

type Certificate struct {
	TypeMeta             *TypeMeta          `protobuf:"bytes,1,opt,name=type_meta,json=typeMeta" json:"type_meta,omitempty"`
	ObjectMeta           *ObjectMeta        `protobuf:"bytes,2,opt,name=object_meta,json=objectMeta" json:"object_meta,omitempty"`
	Spec                 *CertificateSpec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status               *CertificateStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{6}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (dst *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(dst, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetTypeMeta() *TypeMeta {
	if m != nil {
		return m.TypeMeta
	}
	return nil
}

func (m *Certificate) GetObjectMeta() *ObjectMeta {
	if m != nil {
		return m.ObjectMeta
	}
	return nil
}

func (m *Certificate) GetSpec() *CertificateSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Certificate) GetStatus() *CertificateStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CertificateSpec struct {
	CommonName           string   `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	EncryptionAlgorithm  string   `protobuf:"bytes,2,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3" json:"encryption_algorithm,omitempty"`
	KeySize              int32    `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	SignatureAlgorithm   string   `protobuf:"bytes,4,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signature_algorithm,omitempty"`
	AutoRenew            bool     `protobuf:"varint,5,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateSpec) Reset()         { *m = CertificateSpec{} }
func (m *CertificateSpec) String() string { return proto.CompactTextString(m) }
func (*CertificateSpec) ProtoMessage()    {}
func (*CertificateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{7}
}
func (m *CertificateSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateSpec.Unmarshal(m, b)
}
func (m *CertificateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateSpec.Marshal(b, m, deterministic)
}
func (dst *CertificateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateSpec.Merge(dst, src)
}
func (m *CertificateSpec) XXX_Size() int {
	return xxx_messageInfo_CertificateSpec.Size(m)
}
func (m *CertificateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateSpec proto.InternalMessageInfo

func (m *CertificateSpec) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateSpec) GetEncryptionAlgorithm() string {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return ""
}

func (m *CertificateSpec) GetKeySize() int32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CertificateSpec) GetSignatureAlgorithm() string {
	if m != nil {
		return m.SignatureAlgorithm
	}
	return ""
}

func (m *CertificateSpec) GetAutoRenew() bool {
	if m != nil {
		return m.AutoRenew
	}
	return false
}

type CertificateStatus struct {
	Phase                string   `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateStatus) Reset()         { *m = CertificateStatus{} }
func (m *CertificateStatus) String() string { return proto.CompactTextString(m) }
func (*CertificateStatus) ProtoMessage()    {}
func (*CertificateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_certificate_a8ce0ad9e5ef4c6b, []int{8}
}
func (m *CertificateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateStatus.Unmarshal(m, b)
}
func (m *CertificateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateStatus.Marshal(b, m, deterministic)
}
func (dst *CertificateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateStatus.Merge(dst, src)
}
func (m *CertificateStatus) XXX_Size() int {
	return xxx_messageInfo_CertificateStatus.Size(m)
}
func (m *CertificateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateStatus proto.InternalMessageInfo

func (m *CertificateStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateCertificateRequest)(nil), "powerssl.api.v1.CreateCertificateRequest")
	proto.RegisterType((*DeleteCertificatRequest)(nil), "powerssl.api.v1.DeleteCertificatRequest")
	proto.RegisterType((*GetCertificateRequest)(nil), "powerssl.api.v1.GetCertificateRequest")
	proto.RegisterType((*ListCertificateRequest)(nil), "powerssl.api.v1.ListCertificateRequest")
	proto.RegisterType((*ListCertificateResponse)(nil), "powerssl.api.v1.ListCertificateResponse")
	proto.RegisterType((*UpdateCertificateRequest)(nil), "powerssl.api.v1.UpdateCertificateRequest")
	proto.RegisterType((*Certificate)(nil), "powerssl.api.v1.Certificate")
	proto.RegisterType((*CertificateSpec)(nil), "powerssl.api.v1.CertificateSpec")
	proto.RegisterType((*CertificateStatus)(nil), "powerssl.api.v1.CertificateStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CertificateService service

type CertificateServiceClient interface {
	CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
	DeleteCertificat(ctx context.Context, in *DeleteCertificatRequest, opts ...grpc.CallOption) (*types.Empty, error)
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
	ListCertificate(ctx context.Context, in *ListCertificateRequest, opts ...grpc.CallOption) (*ListCertificateResponse, error)
	UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
}

type certificateServiceClient struct {
	cc *grpc.ClientConn
}

func NewCertificateServiceClient(cc *grpc.ClientConn) CertificateServiceClient {
	return &certificateServiceClient{cc}
}

func (c *certificateServiceClient) CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateService/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) DeleteCertificat(ctx context.Context, in *DeleteCertificatRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateService/DeleteCertificat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateService/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) ListCertificate(ctx context.Context, in *ListCertificateRequest, opts ...grpc.CallOption) (*ListCertificateResponse, error) {
	out := new(ListCertificateResponse)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateService/ListCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateServiceClient) UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/powerssl.api.v1.CertificateService/UpdateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertificateService service

type CertificateServiceServer interface {
	CreateCertificate(context.Context, *CreateCertificateRequest) (*Certificate, error)
	DeleteCertificat(context.Context, *DeleteCertificatRequest) (*types.Empty, error)
	GetCertificate(context.Context, *GetCertificateRequest) (*Certificate, error)
	ListCertificate(context.Context, *ListCertificateRequest) (*ListCertificateResponse, error)
	UpdateCertificate(context.Context, *UpdateCertificateRequest) (*Certificate, error)
}

func RegisterCertificateServiceServer(s *grpc.Server, srv CertificateServiceServer) {
	s.RegisterService(&_CertificateService_serviceDesc, srv)
}

func _CertificateService_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateService/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).CreateCertificate(ctx, req.(*CreateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_DeleteCertificat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertificatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).DeleteCertificat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateService/DeleteCertificat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).DeleteCertificat(ctx, req.(*DeleteCertificatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateService/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_ListCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).ListCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateService/ListCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).ListCertificate(ctx, req.(*ListCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateService_UpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateServiceServer).UpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.api.v1.CertificateService/UpdateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateServiceServer).UpdateCertificate(ctx, req.(*UpdateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.api.v1.CertificateService",
	HandlerType: (*CertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCertificate",
			Handler:    _CertificateService_CreateCertificate_Handler,
		},
		{
			MethodName: "DeleteCertificat",
			Handler:    _CertificateService_DeleteCertificat_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _CertificateService_GetCertificate_Handler,
		},
		{
			MethodName: "ListCertificate",
			Handler:    _CertificateService_ListCertificate_Handler,
		},
		{
			MethodName: "UpdateCertificate",
			Handler:    _CertificateService_UpdateCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/certificate.proto",
}

func init() {
	proto.RegisterFile("api/v1/certificate.proto", fileDescriptor_certificate_a8ce0ad9e5ef4c6b)
}

var fileDescriptor_certificate_a8ce0ad9e5ef4c6b = []byte{
	// 603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xbf, 0x24, 0xfd, 0x9a, 0x1b, 0x89, 0xd2, 0xe9, 0x9f, 0x9b, 0x16, 0x11, 0x79, 0x01,
	0xa9, 0x10, 0xb6, 0x5a, 0x10, 0x0b, 0x60, 0x53, 0x0a, 0x62, 0xc3, 0x8f, 0x70, 0x01, 0x21, 0x16,
	0x58, 0x53, 0x73, 0x9b, 0x0c, 0xb1, 0x3d, 0x83, 0x67, 0x9c, 0xca, 0x7d, 0x37, 0xde, 0x81, 0x27,
	0x61, 0xc7, 0x1e, 0x79, 0x9c, 0x1f, 0x37, 0x76, 0x12, 0x89, 0x05, 0xbb, 0xc9, 0xbd, 0xe7, 0x9c,
	0xeb, 0x7b, 0xec, 0x39, 0x01, 0x93, 0x0a, 0xe6, 0x0c, 0x8f, 0x1c, 0x1f, 0x63, 0xc5, 0x2e, 0x98,
	0x4f, 0x15, 0xda, 0x22, 0xe6, 0x8a, 0x93, 0x75, 0xc1, 0x2f, 0x31, 0x96, 0x32, 0xb0, 0xa9, 0x60,
	0xf6, 0xf0, 0xa8, 0xbd, 0xdf, 0xe3, 0xbc, 0x17, 0xa0, 0xa3, 0xdb, 0xe7, 0xc9, 0x85, 0x83, 0xa1,
	0x50, 0x69, 0x8e, 0x6e, 0x6f, 0x8c, 0x74, 0x42, 0x54, 0x34, 0x2f, 0x59, 0x21, 0x98, 0xa7, 0x31,
	0x52, 0x85, 0xa7, 0x53, 0x6d, 0x17, 0xbf, 0x27, 0x28, 0x15, 0x79, 0x07, 0xdb, 0x85, 0x89, 0x1e,
	0x4d, 0x54, 0x9f, 0xc7, 0x4c, 0xa5, 0xa6, 0xd1, 0x31, 0xba, 0xad, 0xe3, 0x03, 0x7b, 0x66, 0xb8,
	0x5d, 0xd4, 0xd8, 0x2a, 0x50, 0x4f, 0xc6, 0x4c, 0xeb, 0x3e, 0xec, 0x3e, 0xc7, 0x00, 0x8b, 0xe3,
	0xc6, 0xd3, 0x08, 0xd4, 0x23, 0x1a, 0xa2, 0x16, 0x6f, 0xba, 0xfa, 0x6c, 0xdd, 0x83, 0xed, 0x97,
	0xa8, 0x2a, 0x1e, 0xad, 0x0a, 0x6c, 0xc2, 0xce, 0x2b, 0x26, 0x2b, 0xd0, 0xd6, 0x0f, 0x03, 0x76,
	0x4b, 0x2d, 0x29, 0x78, 0x24, 0x91, 0x3c, 0x82, 0xa6, 0x4a, 0x05, 0x7a, 0x99, 0x27, 0xa3, 0xc5,
	0xf6, 0x4a, 0x8b, 0xbd, 0x4f, 0x05, 0xbe, 0x46, 0x45, 0xdd, 0x35, 0x35, 0x3a, 0x65, 0xbc, 0x80,
	0x49, 0x95, 0xf3, 0xfe, 0x9b, 0xc3, 0xcb, 0x86, 0xe6, 0xbc, 0x60, 0x74, 0x22, 0xc7, 0xd0, 0x60,
	0x0a, 0x43, 0x69, 0xd6, 0x3a, 0xb5, 0xa5, 0x26, 0xe6, 0xd0, 0xec, 0x25, 0x7d, 0x10, 0x5f, 0xff,
	0xd9, 0x4b, 0xfa, 0x6d, 0x40, 0xab, 0x80, 0xfa, 0x6b, 0x8b, 0x9e, 0x42, 0x8b, 0x9f, 0x7f, 0x43,
	0xff, 0x9a, 0x49, 0xfb, 0x25, 0xe6, 0x5b, 0x8d, 0xd1, 0x5c, 0xe0, 0x93, 0x33, 0x79, 0x08, 0x75,
	0x29, 0xd0, 0x37, 0x6b, 0x9a, 0xd6, 0x59, 0xb4, 0xc7, 0x99, 0x40, 0xdf, 0xd5, 0x68, 0xf2, 0x18,
	0x56, 0xa5, 0xa2, 0x2a, 0x91, 0x66, 0x5d, 0xf3, 0xac, 0x85, 0x3c, 0x8d, 0x74, 0x47, 0x0c, 0xeb,
	0xa7, 0x01, 0xeb, 0x33, 0xaa, 0xe4, 0x36, 0xb4, 0x7c, 0x1e, 0x86, 0x3c, 0xf2, 0x0a, 0xdf, 0x1b,
	0xe4, 0xa5, 0x37, 0x34, 0x44, 0x72, 0x04, 0x5b, 0x18, 0xf9, 0x71, 0x2a, 0x14, 0xe3, 0x91, 0x47,
	0x83, 0x5e, 0xe6, 0x61, 0x3f, 0xd4, 0xdb, 0x36, 0xdd, 0xcd, 0x69, 0xef, 0x64, 0xdc, 0x22, 0x7b,
	0xb0, 0x36, 0xc0, 0xd4, 0x93, 0xec, 0x0a, 0xf5, 0x76, 0x0d, 0xf7, 0xff, 0x01, 0xa6, 0x67, 0xec,
	0x0a, 0x89, 0x03, 0x9b, 0x92, 0xf5, 0x22, 0xaa, 0x92, 0x18, 0x0b, 0x62, 0x75, 0x2d, 0x46, 0x26,
	0xad, 0xa9, 0xd6, 0x2d, 0x00, 0x9a, 0x28, 0xee, 0xc5, 0x18, 0xe1, 0xa5, 0xd9, 0xe8, 0x18, 0xdd,
	0x35, 0xb7, 0x99, 0x55, 0xdc, 0xac, 0x60, 0x1d, 0xc2, 0x46, 0x69, 0x5f, 0xb2, 0x05, 0x0d, 0xd1,
	0xa7, 0x72, 0xbc, 0x4d, 0xfe, 0xe3, 0xf8, 0x57, 0x0d, 0x48, 0x11, 0x8b, 0xf1, 0x90, 0xf9, 0x48,
	0xbe, 0xc0, 0x46, 0x29, 0x20, 0xc8, 0x61, 0xd9, 0xd5, 0x39, 0x21, 0xd2, 0x5e, 0xf8, 0x01, 0x5a,
	0x2b, 0xe4, 0x23, 0xdc, 0x9c, 0x4d, 0x04, 0xd2, 0x2d, 0x71, 0xe6, 0x84, 0x46, 0x7b, 0xc7, 0xce,
	0xf3, 0xce, 0x1e, 0xe7, 0x9d, 0xfd, 0x22, 0xcb, 0x3b, 0x6b, 0x85, 0x7c, 0x82, 0x1b, 0xd7, 0xa3,
	0x83, 0xdc, 0x29, 0xa9, 0x56, 0x66, 0xcb, 0xd2, 0x27, 0xbe, 0x80, 0xf5, 0x99, 0x30, 0x21, 0x77,
	0x2b, 0x6f, 0x7e, 0x85, 0x76, 0x77, 0x39, 0x30, 0xcf, 0x25, 0x6b, 0x25, 0x73, 0xbe, 0x74, 0xeb,
	0x2b, 0x9c, 0x9f, 0x97, 0x0c, 0xcb, 0xf6, 0x78, 0x76, 0xf0, 0xb9, 0x3d, 0x01, 0x30, 0xee, 0x88,
	0x41, 0xcf, 0xc9, 0xff, 0x1f, 0x9e, 0x50, 0xc1, 0xce, 0x57, 0xb5, 0xa3, 0x0f, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x63, 0x6c, 0xa0, 0xb6, 0x7c, 0x06, 0x00, 0x00,
}
