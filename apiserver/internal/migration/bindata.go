// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package migration generated by go-bindata.// sources:
// ../../db/migrations/20210130204142_create_acme_servers_table.down.sql
// ../../db/migrations/20210130204142_create_acme_servers_table.up.sql
// ../../db/migrations/20210202110208_create_acme_accounts_table.down.sql
// ../../db/migrations/20210202110208_create_acme_accounts_table.up.sql
package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var __20210130204142_create_acme_servers_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x48\xad\x28\x49\xcd\x2b\xce\xcc\xcf\x53\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x50\x2a\x2d\xcd\x4c\xd1\xcd\x2f\x2e\x2e\x50\xb2\xe6\xe2\x02\x2b\x2b\x49\x4c\xca\x49\x55\x48\x4c\xce\x4d\x8d\x2f\x4e\x2d\x2a\x4b\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x39\x29\xe6\xda\x40\x00\x00\x00")

func _20210130204142_create_acme_servers_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20210130204142_create_acme_servers_tableDownSql,
		"20210130204142_create_acme_servers_table.down.sql",
	)
}

func _20210130204142_create_acme_servers_tableDownSql() (*asset, error) {
	bytes, err := _20210130204142_create_acme_servers_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20210130204142_create_acme_servers_table.down.sql", size: 64, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20210130204142_create_acme_servers_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xbb\x4e\xc3\x40\x10\x45\xfb\xfd\x8a\x51\x2a\x5b\x82\x8e\x2e\x1f\xb3\x1a\xbc\x37\x61\xc4\xbe\x34\x33\x6b\xe2\xbf\x47\x18\x92\xc6\x02\x89\xf6\xea\x9c\xab\xb3\x28\xd8\x41\xb8\x39\xaa\x49\xab\x24\x17\xaa\xcd\x09\x37\x31\x37\x3a\x8d\x21\xe9\xb9\x99\xf5\xd3\x39\x84\x1f\xd8\xf9\x35\x83\x78\x29\x88\x06\x5d\xa1\x46\x53\x20\x22\x92\x44\x5f\xfc\x7e\x50\x47\xce\x94\x70\xe1\x91\x7d\x5f\xe3\x15\x15\xca\x8e\xb8\xbe\x4c\xf3\xd3\x2e\x24\xb1\x9e\x79\x8b\x95\x0b\x68\x65\x5d\xde\x58\x1f\xf6\x1d\x51\x2c\xde\x74\x8b\x43\xf3\x2f\x8c\x54\xc7\x55\xd9\xa5\xd5\xbf\xae\xbe\xf3\x53\x64\x27\x97\x02\x73\x2e\xfd\xd8\x5a\xdb\xc7\x3d\x6f\xf4\xf4\x3f\x21\x21\xe3\x28\x3c\x02\xba\x4a\x61\xdd\xe8\x1d\x1b\x4d\x92\xe6\x30\x9f\xc3\x67\x00\x00\x00\xff\xff\x4e\x67\x07\xe2\x81\x01\x00\x00")

func _20210130204142_create_acme_servers_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20210130204142_create_acme_servers_tableUpSql,
		"20210130204142_create_acme_servers_table.up.sql",
	)
}

func _20210130204142_create_acme_servers_tableUpSql() (*asset, error) {
	bytes, err := _20210130204142_create_acme_servers_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20210130204142_create_acme_servers_table.up.sql", size: 385, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20210202110208_create_acme_accounts_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x48\x4c\xce\x4d\x8d\x4f\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xe6\x3a\xd1\xce\x1a\x00\x00\x00")

func _20210202110208_create_acme_accounts_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20210202110208_create_acme_accounts_tableDownSql,
		"20210202110208_create_acme_accounts_table.down.sql",
	)
}

func _20210202110208_create_acme_accounts_tableDownSql() (*asset, error) {
	bytes, err := _20210202110208_create_acme_accounts_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20210202110208_create_acme_accounts_table.down.sql", size: 26, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20210202110208_create_acme_accounts_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x6a\xc4\x30\x0c\x44\xef\xf9\x0a\x1d\x13\xe8\xb1\xb7\x7e\x8c\xd1\xda\x93\xad\xa8\x2d\x07\x59\x4e\xc9\xdf\x17\xd2\x52\x0a\x81\x66\x03\xeb\xa3\xd1\xbc\xd1\xa0\x89\x06\x76\x90\xf3\x2d\x83\x38\x16\x04\x8e\xb1\x76\xf5\x46\xe3\x40\xff\x3e\x49\xd4\xbb\x24\xd2\xea\xa4\x3d\x67\x4a\x98\xb9\x67\xdf\x7f\xc3\x1d\x0a\x63\x47\x58\x5f\xc7\xe9\xe5\x04\xb5\x1b\x37\xd8\x0a\x0b\x07\xac\x61\x86\x41\x23\xda\xdf\xb9\x76\xc6\x4c\xd2\x96\xcc\x5b\x50\x2e\xa0\x95\x2d\xbe\xb3\xfd\x42\xcf\xc4\x2e\x9e\xaf\xab\x12\x5a\x34\x59\x5c\xaa\x5e\x77\x84\x95\x16\xea\xbc\xc7\x93\x88\xc0\x77\x03\x12\xdd\x6a\xcd\x60\x7d\x98\x13\xab\x3a\x47\x6f\x97\x17\xf8\xb9\x7b\xe8\x96\x2f\x6b\xbf\x5b\x94\x02\x3b\xb9\x14\x34\xe7\xb2\x1c\x7b\xa1\xf5\xf3\xbc\x0a\x7d\x49\xcf\x42\x25\x64\x1c\x51\x0f\xc4\x59\x4c\x0a\xdb\x46\x1f\xd8\x68\x94\x34\x0d\xd3\xdb\xf0\x15\x00\x00\xff\xff\xb3\x5a\xfd\x6f\x29\x03\x00\x00")

func _20210202110208_create_acme_accounts_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20210202110208_create_acme_accounts_tableUpSql,
		"20210202110208_create_acme_accounts_table.up.sql",
	)
}

func _20210202110208_create_acme_accounts_tableUpSql() (*asset, error) {
	bytes, err := _20210202110208_create_acme_accounts_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20210202110208_create_acme_accounts_table.up.sql", size: 809, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20210130204142_create_acme_servers_table.down.sql":  _20210130204142_create_acme_servers_tableDownSql,
	"20210130204142_create_acme_servers_table.up.sql":    _20210130204142_create_acme_servers_tableUpSql,
	"20210202110208_create_acme_accounts_table.down.sql": _20210202110208_create_acme_accounts_tableDownSql,
	"20210202110208_create_acme_accounts_table.up.sql":   _20210202110208_create_acme_accounts_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20210130204142_create_acme_servers_table.down.sql":  &bintree{_20210130204142_create_acme_servers_tableDownSql, map[string]*bintree{}},
	"20210130204142_create_acme_servers_table.up.sql":    &bintree{_20210130204142_create_acme_servers_tableUpSql, map[string]*bintree{}},
	"20210202110208_create_acme_accounts_table.down.sql": &bintree{_20210202110208_create_acme_accounts_tableDownSql, map[string]*bintree{}},
	"20210202110208_create_acme_accounts_table.up.sql":   &bintree{_20210202110208_create_acme_accounts_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
