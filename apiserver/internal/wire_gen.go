// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"powerssl.dev/apiserver/internal/repository"
	"powerssl.dev/apiserver/internal/service"
	"powerssl.dev/apiserver/internal/service/acmeaccount"
	"powerssl.dev/apiserver/internal/service/acmeserver"
	"powerssl.dev/apiserver/internal/service/certificate"
	"powerssl.dev/apiserver/internal/service/user"
	"powerssl.dev/backend/temporal/client"
	"powerssl.dev/backend/grpcserver"
	"powerssl.dev/common/interrupthandler"
	"powerssl.dev/common/log"
	"powerssl.dev/common/metrics"
	"powerssl.dev/common/tracer"
)

// Injectors from wire.go:

func Initialize(ctx context.Context, cfg *Config) ([]func() error, func(), error) {
	config := cfg.Log
	sugaredLogger, cleanup, err := log.Provide(config)
	if err != nil {
		return nil, nil, err
	}
	f := interrupthandler.Provide(ctx, sugaredLogger)
	metricsConfig := cfg.Metrics
	metricsF := metrics.Provide(ctx, metricsConfig, sugaredLogger)
	serverConfig := cfg.Server
	clientConfig := cfg.TemporalClient
	tracerConfig := cfg.Tracer
	opentracingTracer, cleanup2, err := tracer.Provide(tracerConfig, sugaredLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	clientClient, cleanup3, err := client.Provide(clientConfig, sugaredLogger, opentracingTracer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	repositoryConfig := cfg.DB
	dbtx, cleanup4, err := repository.Provide(ctx, repositoryConfig, sugaredLogger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	queries := repository.New(dbtx)
	acmeaccountService := acmeaccount.New(sugaredLogger, clientClient, queries)
	acmeserverService := acmeserver.New(sugaredLogger, queries)
	certificateService := certificate.New()
	userService := user.New()
	register := service.Provide(acmeaccountService, acmeserverService, certificateService, userService)
	transportF, err := grpcserver.Provide(ctx, serverConfig, sugaredLogger, register)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v := Provide(f, metricsF, transportF)
	return v, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
