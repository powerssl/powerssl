// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"powerssl.dev/apiserver/internal/repository"
	"powerssl.dev/apiserver/internal/service"
	"powerssl.dev/apiserver/internal/service/acmeaccount"
	"powerssl.dev/apiserver/internal/service/acmeserver"
	"powerssl.dev/apiserver/internal/service/certificate"
	"powerssl.dev/apiserver/internal/service/user"
	"powerssl.dev/backend/temporal/client"
	"powerssl.dev/backend/transport"
	"powerssl.dev/common/interrupthandler"
	"powerssl.dev/common/log"
	"powerssl.dev/common/metrics"
	"powerssl.dev/common/tracing"
)

// Injectors from wire.go:

func Initialize(ctx context.Context, cfg *Config) ([]func() error, func(), error) {
	sugaredLogger, cleanup, err := log.ProvideLogger()
	if err != nil {
		return nil, nil, err
	}
	f := interrupthandler.Provide(ctx, sugaredLogger)
	config := &cfg.Metrics
	metricsF := metrics.Provide(ctx, config, sugaredLogger)
	serverConfig := cfg.ServerConfig
	clientConfig := cfg.TemporalClientConfig
	tracerImplementation := cfg.Tracer
	tracerComponent := provideTracingComponent()
	tracer, cleanup2, err := tracing.ProvideTracer(tracerImplementation, tracerComponent, sugaredLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	temporalClientComponent := provideTemporalClientComponent()
	clientClient, cleanup3, err := client.ProvideTemporalClient(clientConfig, sugaredLogger, tracer, temporalClientComponent)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	configDB := cfg.DB
	connString := configDB.Connection
	dbtx, cleanup4, err := repository.ProvideDBTX(ctx, connString, sugaredLogger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	queries := repository.New(dbtx)
	acmeaccountService := acmeaccount.New(sugaredLogger, clientClient, queries)
	acmeserverService := acmeserver.New(sugaredLogger, queries)
	certificateService := certificate.New()
	userService := user.New()
	registerF := service.ProvideRegisterF(acmeaccountService, acmeserverService, certificateService, userService)
	serverF, err := transport.ProvideServer(ctx, serverConfig, sugaredLogger, registerF)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v := provideRunnerF(f, metricsF, serverF)
	return v, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
