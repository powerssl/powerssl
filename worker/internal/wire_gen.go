// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"powerssl.dev/backend/temporal/client"
	"powerssl.dev/backend/vault"
	"powerssl.dev/common/interrupthandler"
	"powerssl.dev/common/log"
	"powerssl.dev/common/metrics"
	"powerssl.dev/common/tracing"
	"powerssl.dev/sdk/apiserver"
	"powerssl.dev/worker/internal/worker"
)

// Injectors from wire.go:

func Initialize(ctx context.Context, cfg *Config) ([]func() error, func(), error) {
	sugaredLogger, cleanup, err := log.ProvideLogger()
	if err != nil {
		return nil, nil, err
	}
	f := interrupthandler.Provide(ctx, sugaredLogger)
	config := &cfg.Metrics
	metricsF := metrics.Provide(ctx, config, sugaredLogger)
	clientConfig := &cfg.APIServerClientConfig
	authToken := cfg.AuthToken
	tracerImplementation := cfg.Tracer
	tracerComponent := provideTracingComponent()
	tracer, cleanup2, err := tracing.ProvideTracer(tracerImplementation, tracerComponent, sugaredLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	apiserverClient, err := apiserver.Provide(ctx, clientConfig, authToken, sugaredLogger, tracer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	vaultClientConfig := &cfg.VaultClientConfig
	vaultClient, err := vault.New(vaultClientConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	config2 := cfg.TemporalClientConfig
	temporalClientComponent := provideTemporalClientComponent()
	clientClient, cleanup3, err := client.ProvideTemporalClient(config2, sugaredLogger, tracer, temporalClientComponent)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	workerF := worker.Provide(ctx, apiserverClient, vaultClient, clientClient)
	v := provideRunnerF(f, metricsF, workerF)
	return v, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
