// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ACMEServerServiceClient is the client API for ACMEServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACMEServerServiceClient interface {
	Create(ctx context.Context, in *CreateACMEServerRequest, opts ...grpc.CallOption) (*ACMEServer, error)
	Delete(ctx context.Context, in *DeleteACMEServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetACMEServerRequest, opts ...grpc.CallOption) (*ACMEServer, error)
	List(ctx context.Context, in *ListACMEServersRequest, opts ...grpc.CallOption) (*ListACMEServersResponse, error)
	Update(ctx context.Context, in *UpdateACMEServerRequest, opts ...grpc.CallOption) (*ACMEServer, error)
}

type aCMEServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewACMEServerServiceClient(cc grpc.ClientConnInterface) ACMEServerServiceClient {
	return &aCMEServerServiceClient{cc}
}

func (c *aCMEServerServiceClient) Create(ctx context.Context, in *CreateACMEServerRequest, opts ...grpc.CallOption) (*ACMEServer, error) {
	out := new(ACMEServer)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEServerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServerServiceClient) Delete(ctx context.Context, in *DeleteACMEServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEServerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServerServiceClient) Get(ctx context.Context, in *GetACMEServerRequest, opts ...grpc.CallOption) (*ACMEServer, error) {
	out := new(ACMEServer)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEServerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServerServiceClient) List(ctx context.Context, in *ListACMEServersRequest, opts ...grpc.CallOption) (*ListACMEServersResponse, error) {
	out := new(ListACMEServersResponse)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEServerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServerServiceClient) Update(ctx context.Context, in *UpdateACMEServerRequest, opts ...grpc.CallOption) (*ACMEServer, error) {
	out := new(ACMEServer)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEServerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMEServerServiceServer is the server API for ACMEServerService service.
// All implementations must embed UnimplementedACMEServerServiceServer
// for forward compatibility
type ACMEServerServiceServer interface {
	Create(context.Context, *CreateACMEServerRequest) (*ACMEServer, error)
	Delete(context.Context, *DeleteACMEServerRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetACMEServerRequest) (*ACMEServer, error)
	List(context.Context, *ListACMEServersRequest) (*ListACMEServersResponse, error)
	Update(context.Context, *UpdateACMEServerRequest) (*ACMEServer, error)
	mustEmbedUnimplementedACMEServerServiceServer()
}

// UnimplementedACMEServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedACMEServerServiceServer struct {
}

func (UnimplementedACMEServerServiceServer) Create(context.Context, *CreateACMEServerRequest) (*ACMEServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedACMEServerServiceServer) Delete(context.Context, *DeleteACMEServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedACMEServerServiceServer) Get(context.Context, *GetACMEServerRequest) (*ACMEServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedACMEServerServiceServer) List(context.Context, *ListACMEServersRequest) (*ListACMEServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedACMEServerServiceServer) Update(context.Context, *UpdateACMEServerRequest) (*ACMEServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedACMEServerServiceServer) mustEmbedUnimplementedACMEServerServiceServer() {}

// UnsafeACMEServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACMEServerServiceServer will
// result in compilation errors.
type UnsafeACMEServerServiceServer interface {
	mustEmbedUnimplementedACMEServerServiceServer()
}

func RegisterACMEServerServiceServer(s grpc.ServiceRegistrar, srv ACMEServerServiceServer) {
	s.RegisterService(&ACMEServerService_ServiceDesc, srv)
}

func _ACMEServerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateACMEServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEServerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServerServiceServer).Create(ctx, req.(*CreateACMEServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEServerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACMEServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEServerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServerServiceServer).Delete(ctx, req.(*DeleteACMEServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEServerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACMEServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEServerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServerServiceServer).Get(ctx, req.(*GetACMEServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEServerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListACMEServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEServerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServerServiceServer).List(ctx, req.(*ListACMEServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEServerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateACMEServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEServerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServerServiceServer).Update(ctx, req.(*UpdateACMEServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ACMEServerService_ServiceDesc is the grpc.ServiceDesc for ACMEServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACMEServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.apiserver.v1.ACMEServerService",
	HandlerType: (*ACMEServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ACMEServerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ACMEServerService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ACMEServerService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ACMEServerService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ACMEServerService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerssl/apiserver/v1/acme_server.proto",
}
