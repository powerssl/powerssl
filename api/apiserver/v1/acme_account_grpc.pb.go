// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ACMEAccountServiceClient is the client API for ACMEAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACMEAccountServiceClient interface {
	Create(ctx context.Context, in *CreateACMEAccountRequest, opts ...grpc.CallOption) (*ACMEAccount, error)
	Delete(ctx context.Context, in *DeleteACMEAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetACMEAccountRequest, opts ...grpc.CallOption) (*ACMEAccount, error)
	List(ctx context.Context, in *ListACMEAccountsRequest, opts ...grpc.CallOption) (*ListACMEAccountsResponse, error)
	Update(ctx context.Context, in *UpdateACMEAccountRequest, opts ...grpc.CallOption) (*ACMEAccount, error)
}

type aCMEAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewACMEAccountServiceClient(cc grpc.ClientConnInterface) ACMEAccountServiceClient {
	return &aCMEAccountServiceClient{cc}
}

func (c *aCMEAccountServiceClient) Create(ctx context.Context, in *CreateACMEAccountRequest, opts ...grpc.CallOption) (*ACMEAccount, error) {
	out := new(ACMEAccount)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEAccountService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEAccountServiceClient) Delete(ctx context.Context, in *DeleteACMEAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEAccountService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEAccountServiceClient) Get(ctx context.Context, in *GetACMEAccountRequest, opts ...grpc.CallOption) (*ACMEAccount, error) {
	out := new(ACMEAccount)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEAccountService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEAccountServiceClient) List(ctx context.Context, in *ListACMEAccountsRequest, opts ...grpc.CallOption) (*ListACMEAccountsResponse, error) {
	out := new(ListACMEAccountsResponse)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEAccountService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEAccountServiceClient) Update(ctx context.Context, in *UpdateACMEAccountRequest, opts ...grpc.CallOption) (*ACMEAccount, error) {
	out := new(ACMEAccount)
	err := c.cc.Invoke(ctx, "/powerssl.apiserver.v1.ACMEAccountService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMEAccountServiceServer is the server API for ACMEAccountService service.
// All implementations must embed UnimplementedACMEAccountServiceServer
// for forward compatibility
type ACMEAccountServiceServer interface {
	Create(context.Context, *CreateACMEAccountRequest) (*ACMEAccount, error)
	Delete(context.Context, *DeleteACMEAccountRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetACMEAccountRequest) (*ACMEAccount, error)
	List(context.Context, *ListACMEAccountsRequest) (*ListACMEAccountsResponse, error)
	Update(context.Context, *UpdateACMEAccountRequest) (*ACMEAccount, error)
	mustEmbedUnimplementedACMEAccountServiceServer()
}

// UnimplementedACMEAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedACMEAccountServiceServer struct {
}

func (UnimplementedACMEAccountServiceServer) Create(context.Context, *CreateACMEAccountRequest) (*ACMEAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedACMEAccountServiceServer) Delete(context.Context, *DeleteACMEAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedACMEAccountServiceServer) Get(context.Context, *GetACMEAccountRequest) (*ACMEAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedACMEAccountServiceServer) List(context.Context, *ListACMEAccountsRequest) (*ListACMEAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedACMEAccountServiceServer) Update(context.Context, *UpdateACMEAccountRequest) (*ACMEAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedACMEAccountServiceServer) mustEmbedUnimplementedACMEAccountServiceServer() {}

// UnsafeACMEAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACMEAccountServiceServer will
// result in compilation errors.
type UnsafeACMEAccountServiceServer interface {
	mustEmbedUnimplementedACMEAccountServiceServer()
}

func RegisterACMEAccountServiceServer(s grpc.ServiceRegistrar, srv ACMEAccountServiceServer) {
	s.RegisterService(&ACMEAccountService_ServiceDesc, srv)
}

func _ACMEAccountService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateACMEAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEAccountServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEAccountService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEAccountServiceServer).Create(ctx, req.(*CreateACMEAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEAccountService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACMEAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEAccountServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEAccountService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEAccountServiceServer).Delete(ctx, req.(*DeleteACMEAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEAccountService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACMEAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEAccountServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEAccountService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEAccountServiceServer).Get(ctx, req.(*GetACMEAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEAccountService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListACMEAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEAccountServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEAccountService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEAccountServiceServer).List(ctx, req.(*ListACMEAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEAccountService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateACMEAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEAccountServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.apiserver.v1.ACMEAccountService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEAccountServiceServer).Update(ctx, req.(*UpdateACMEAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ACMEAccountService_ServiceDesc is the grpc.ServiceDesc for ACMEAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACMEAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.apiserver.v1.ACMEAccountService",
	HandlerType: (*ACMEAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ACMEAccountService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ACMEAccountService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ACMEAccountService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ACMEAccountService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ACMEAccountService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerssl/apiserver/v1/acme_account.proto",
}
