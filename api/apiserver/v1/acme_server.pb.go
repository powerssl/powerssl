// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: powerssl/apiserver/v1/acme_server.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACMEServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreateTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	DisplayName     string                 `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Title           string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Labels          map[string]string      `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DirectoryUrl    string                 `protobuf:"bytes,8,opt,name=directory_url,json=directoryUrl,proto3" json:"directory_url,omitempty"`
	IntegrationName string                 `protobuf:"bytes,9,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
}

func (x *ACMEServer) Reset() {
	*x = ACMEServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACMEServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACMEServer) ProtoMessage() {}

func (x *ACMEServer) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACMEServer.ProtoReflect.Descriptor instead.
func (*ACMEServer) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{0}
}

func (x *ACMEServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ACMEServer) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ACMEServer) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ACMEServer) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ACMEServer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ACMEServer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ACMEServer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ACMEServer) GetDirectoryUrl() string {
	if x != nil {
		return x.DirectoryUrl
	}
	return ""
}

func (x *ACMEServer) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

type CreateACMEServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeServer *ACMEServer `protobuf:"bytes,1,opt,name=acme_server,json=acmeServer,proto3" json:"acme_server,omitempty"`
}

func (x *CreateACMEServerRequest) Reset() {
	*x = CreateACMEServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACMEServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACMEServerRequest) ProtoMessage() {}

func (x *CreateACMEServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACMEServerRequest.ProtoReflect.Descriptor instead.
func (*CreateACMEServerRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{1}
}

func (x *CreateACMEServerRequest) GetAcmeServer() *ACMEServer {
	if x != nil {
		return x.AcmeServer
	}
	return nil
}

type DeleteACMEServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteACMEServerRequest) Reset() {
	*x = DeleteACMEServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACMEServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACMEServerRequest) ProtoMessage() {}

func (x *DeleteACMEServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACMEServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteACMEServerRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteACMEServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetACMEServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetACMEServerRequest) Reset() {
	*x = GetACMEServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetACMEServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetACMEServerRequest) ProtoMessage() {}

func (x *GetACMEServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetACMEServerRequest.ProtoReflect.Descriptor instead.
func (*GetACMEServerRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{3}
}

func (x *GetACMEServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListACMEServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListACMEServersRequest) Reset() {
	*x = ListACMEServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACMEServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACMEServersRequest) ProtoMessage() {}

func (x *ListACMEServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACMEServersRequest.ProtoReflect.Descriptor instead.
func (*ListACMEServersRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{4}
}

func (x *ListACMEServersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListACMEServersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListACMEServersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListACMEServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcmeServers   []*ACMEServer `protobuf:"bytes,1,rep,name=acme_servers,json=acmeServers,proto3" json:"acme_servers,omitempty"`
	NextPageToken string        `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListACMEServersResponse) Reset() {
	*x = ListACMEServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACMEServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACMEServersResponse) ProtoMessage() {}

func (x *ListACMEServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACMEServersResponse.ProtoReflect.Descriptor instead.
func (*ListACMEServersResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{5}
}

func (x *ListACMEServersResponse) GetAcmeServers() []*ACMEServer {
	if x != nil {
		return x.AcmeServers
	}
	return nil
}

func (x *ListACMEServersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateACMEServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	AcmeServer *ACMEServer            `protobuf:"bytes,3,opt,name=acme_server,json=acmeServer,proto3" json:"acme_server,omitempty"`
}

func (x *UpdateACMEServerRequest) Reset() {
	*x = UpdateACMEServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateACMEServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateACMEServerRequest) ProtoMessage() {}

func (x *UpdateACMEServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_apiserver_v1_acme_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateACMEServerRequest.ProtoReflect.Descriptor instead.
func (*UpdateACMEServerRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateACMEServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateACMEServerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateACMEServerRequest) GetAcmeServer() *ACMEServer {
	if x != nil {
		return x.AcmeServer
	}
	return nil
}

var File_powerssl_apiserver_v1_acme_server_proto protoreflect.FileDescriptor

var file_powerssl_apiserver_v1_acme_server_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7,
	0x03, 0x0a, 0x0a, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x63, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4d,
	0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x63,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x63, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x61,
	0x63, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0xfc, 0x04, 0x0a, 0x11, 0x41, 0x43,
	0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x77, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x77, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x7e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x1a, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x42, 0x23, 0x5a, 0x21, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x73, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_powerssl_apiserver_v1_acme_server_proto_rawDescOnce sync.Once
	file_powerssl_apiserver_v1_acme_server_proto_rawDescData = file_powerssl_apiserver_v1_acme_server_proto_rawDesc
)

func file_powerssl_apiserver_v1_acme_server_proto_rawDescGZIP() []byte {
	file_powerssl_apiserver_v1_acme_server_proto_rawDescOnce.Do(func() {
		file_powerssl_apiserver_v1_acme_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_powerssl_apiserver_v1_acme_server_proto_rawDescData)
	})
	return file_powerssl_apiserver_v1_acme_server_proto_rawDescData
}

var file_powerssl_apiserver_v1_acme_server_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_powerssl_apiserver_v1_acme_server_proto_goTypes = []interface{}{
	(*ACMEServer)(nil),              // 0: powerssl.apiserver.v1.ACMEServer
	(*CreateACMEServerRequest)(nil), // 1: powerssl.apiserver.v1.CreateACMEServerRequest
	(*DeleteACMEServerRequest)(nil), // 2: powerssl.apiserver.v1.DeleteACMEServerRequest
	(*GetACMEServerRequest)(nil),    // 3: powerssl.apiserver.v1.GetACMEServerRequest
	(*ListACMEServersRequest)(nil),  // 4: powerssl.apiserver.v1.ListACMEServersRequest
	(*ListACMEServersResponse)(nil), // 5: powerssl.apiserver.v1.ListACMEServersResponse
	(*UpdateACMEServerRequest)(nil), // 6: powerssl.apiserver.v1.UpdateACMEServerRequest
	nil,                             // 7: powerssl.apiserver.v1.ACMEServer.LabelsEntry
	(*timestamppb.Timestamp)(nil),   // 8: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),   // 9: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),           // 10: google.protobuf.Empty
}
var file_powerssl_apiserver_v1_acme_server_proto_depIdxs = []int32{
	8,  // 0: powerssl.apiserver.v1.ACMEServer.create_time:type_name -> google.protobuf.Timestamp
	8,  // 1: powerssl.apiserver.v1.ACMEServer.update_time:type_name -> google.protobuf.Timestamp
	7,  // 2: powerssl.apiserver.v1.ACMEServer.labels:type_name -> powerssl.apiserver.v1.ACMEServer.LabelsEntry
	0,  // 3: powerssl.apiserver.v1.CreateACMEServerRequest.acme_server:type_name -> powerssl.apiserver.v1.ACMEServer
	0,  // 4: powerssl.apiserver.v1.ListACMEServersResponse.acme_servers:type_name -> powerssl.apiserver.v1.ACMEServer
	9,  // 5: powerssl.apiserver.v1.UpdateACMEServerRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 6: powerssl.apiserver.v1.UpdateACMEServerRequest.acme_server:type_name -> powerssl.apiserver.v1.ACMEServer
	1,  // 7: powerssl.apiserver.v1.ACMEServerService.Create:input_type -> powerssl.apiserver.v1.CreateACMEServerRequest
	2,  // 8: powerssl.apiserver.v1.ACMEServerService.Delete:input_type -> powerssl.apiserver.v1.DeleteACMEServerRequest
	3,  // 9: powerssl.apiserver.v1.ACMEServerService.Get:input_type -> powerssl.apiserver.v1.GetACMEServerRequest
	4,  // 10: powerssl.apiserver.v1.ACMEServerService.List:input_type -> powerssl.apiserver.v1.ListACMEServersRequest
	6,  // 11: powerssl.apiserver.v1.ACMEServerService.Update:input_type -> powerssl.apiserver.v1.UpdateACMEServerRequest
	0,  // 12: powerssl.apiserver.v1.ACMEServerService.Create:output_type -> powerssl.apiserver.v1.ACMEServer
	10, // 13: powerssl.apiserver.v1.ACMEServerService.Delete:output_type -> google.protobuf.Empty
	0,  // 14: powerssl.apiserver.v1.ACMEServerService.Get:output_type -> powerssl.apiserver.v1.ACMEServer
	5,  // 15: powerssl.apiserver.v1.ACMEServerService.List:output_type -> powerssl.apiserver.v1.ListACMEServersResponse
	0,  // 16: powerssl.apiserver.v1.ACMEServerService.Update:output_type -> powerssl.apiserver.v1.ACMEServer
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_powerssl_apiserver_v1_acme_server_proto_init() }
func file_powerssl_apiserver_v1_acme_server_proto_init() {
	if File_powerssl_apiserver_v1_acme_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACMEServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACMEServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACMEServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetACMEServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACMEServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListACMEServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_apiserver_v1_acme_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateACMEServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_powerssl_apiserver_v1_acme_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_powerssl_apiserver_v1_acme_server_proto_goTypes,
		DependencyIndexes: file_powerssl_apiserver_v1_acme_server_proto_depIdxs,
		MessageInfos:      file_powerssl_apiserver_v1_acme_server_proto_msgTypes,
	}.Build()
	File_powerssl_apiserver_v1_acme_server_proto = out.File
	file_powerssl_apiserver_v1_acme_server_proto_rawDesc = nil
	file_powerssl_apiserver_v1_acme_server_proto_goTypes = nil
	file_powerssl_apiserver_v1_acme_server_proto_depIdxs = nil
}
