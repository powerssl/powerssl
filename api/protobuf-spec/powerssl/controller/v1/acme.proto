syntax = "proto3";

package powerssl.controller.v1;

import "google/protobuf/empty.proto";
import "powerssl/controller/v1/meta.proto";

option go_package = "powerssl.io/powerssl/internal/pkg/controller/api/v1;api";

service ACMEService {
  rpc GetCreateAccountRequest(Activity)
      returns (GetCreateAccountRequestResponse);
  rpc SetCreateAccountResponse(SetCreateAccountResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetDeactivateAccountRequest(Activity)
      returns (GetDeactivateAccountRequestResponse);
  rpc SetDeactivateAccountResponse(SetDeactivateAccountResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetRekeyAccountRequest(Activity) returns (GetRekeyAccountRequestResponse);
  rpc SetRekeyAccountResponse(SetRekeyAccountResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetUpdateAccountRequest(Activity)
      returns (GetUpdateAccountRequestResponse);
  rpc SetUpdateAccountResponse(SetUpdateAccountResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetCreateOrderRequest(Activity) returns (GetCreateOrderRequestResponse);
  rpc SetCreateOrderResponse(SetCreateOrderResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetFinalizeOrderRequest(Activity)
      returns (GetFinalizeOrderRequestResponse);
  rpc SetFinalizeOrderResponse(SetFinalizeOrderResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetGetOrderRequest(Activity) returns (GetGetOrderRequestResponse);
  rpc SetGetOrderResponse(SetGetOrderResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetCreateAuthorizationRequest(Activity)
      returns (GetCreateAuthorizationRequestResponse);
  rpc SetCreateAuthorizationResponse(SetCreateAuthorizationResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetDeactivateAuthorizationRequest(Activity)
      returns (GetDeactivateAuthorizationRequestResponse);
  rpc SetDeactivateAuthorizationResponse(
      SetDeactivateAuthorizationResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetGetAuthorizationRequest(Activity)
      returns (GetGetAuthorizationRequestResponse);
  rpc SetGetAuthorizationResponse(SetGetAuthorizationResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetGetChallengeRequest(Activity) returns (GetGetChallengeRequestResponse);
  rpc SetGetChallengeResponse(SetGetChallengeResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetValidateChallengeRequest(Activity)
      returns (GetValidateChallengeRequestResponse);
  rpc SetValidateChallengeResponse(SetValidateChallengeResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetGetCertificateRequest(Activity)
      returns (GetGetCertificateRequestResponse);
  rpc SetGetCertificateResponse(SetGetCertificateResponseRequest)
      returns (google.protobuf.Empty);

  rpc GetRevokeCertificateRequest(Activity)
      returns (GetRevokeCertificateRequestResponse);
  rpc SetRevokeCertificateResponse(SetRevokeCertificateResponseRequest)
      returns (google.protobuf.Empty);
}

message GetCreateAccountRequestResponse {
  Activity activity = 1;
  string directory_url = 2;
  bool terms_of_service_agreed = 3;
  repeated string contacts = 4;
}

message SetCreateAccountResponseRequest {
  Activity activity = 1;
  Account account = 2;
  Error error = 3;
}

message GetDeactivateAccountRequestResponse {
  Activity activity = 1;
}

message SetDeactivateAccountResponseRequest {
  Activity activity = 1;
}

message GetRekeyAccountRequestResponse {
  Activity activity = 1;
}

message SetRekeyAccountResponseRequest {
  Activity activity = 1;
}

message GetUpdateAccountRequestResponse {
  Activity activity = 1;
}

message SetUpdateAccountResponseRequest {
  Activity activity = 1;
}

message GetCreateOrderRequestResponse {
  Activity activity = 1;
}

message SetCreateOrderResponseRequest {
  Activity activity = 1;
}

message GetFinalizeOrderRequestResponse {
  Activity activity = 1;
}

message SetFinalizeOrderResponseRequest {
  Activity activity = 1;
}

message GetGetOrderRequestResponse {
  Activity activity = 1;
}

message SetGetOrderResponseRequest {
  Activity activity = 1;
}

message GetCreateAuthorizationRequestResponse {
  Activity activity = 1;
}

message SetCreateAuthorizationResponseRequest {
  Activity activity = 1;
}

message GetDeactivateAuthorizationRequestResponse {
  Activity activity = 1;
}

message SetDeactivateAuthorizationResponseRequest {
  Activity activity = 1;
}

message GetGetAuthorizationRequestResponse {
  Activity activity = 1;
}

message SetGetAuthorizationResponseRequest {
  Activity activity = 1;
}

message GetGetChallengeRequestResponse {
  Activity activity = 1;
}

message SetGetChallengeResponseRequest {
  Activity activity = 1;
}

message GetValidateChallengeRequestResponse {
  Activity activity = 1;
}

message SetValidateChallengeResponseRequest {
  Activity activity = 1;
}

message GetGetCertificateRequestResponse {
  Activity activity = 1;
}

message SetGetCertificateResponseRequest {
  Activity activity = 1;
}

message GetRevokeCertificateRequestResponse {
  Activity activity = 1;
}

message SetRevokeCertificateResponseRequest {
  Activity activity = 1;
}

/*
message GetNewOrderRequestResponse {
  repeated Identifier identifiers = 1;
  string not_before = 2;
  string not_after = 3;
}

message SetNewOrderResponseRequest {
  Order order = 1;
}

message GetRevokeCertificateRequestResponse {
  enum Reason {
    UNSPECIFIED = 0;
    KEY_COMPROMISE = 1;
    CA_COMPROMISE = 2;
    AFFILIATION_CHANGED = 3;
    SUPERSEDED = 4;
    CESSATION_OF_OPERATION = 5;
    CERTIFICATE_HOLD = 6;
    // Value 7 is not used
    REMOVE_FROM_CRL = 8;
    PRIVILEGE_WITHDRAWN = 9;
    AA_COMPROMISE = 10;
  }

  bytes certificate = 1;
  Reason reason = 2;
}

message SetRevokeCertificateResponseRequest {
  Problem error = 1;
}
*/

/* ********* */

message Account {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    VALID = 1;
    DEACTIVATED = 2;
    REVOKED = 3;
  }

  Status status = 1;
  repeated string contacts = 2;
  bool terms_of_service_agreed = 3;
  string orders = 4;

  string url = 5;  // TODO
}

message Authorization {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    PENDING = 1;
    VALID = 2;
    INVALID = 3;
    DEACTIVATED = 4;
    EXPIRED = 5;
    REVOKED = 6;
  }

  Identifier identifier = 1;
  Status status = 2;
  string expires = 3;
  repeated Challenge challenges = 4;
  bool wildcard = 5;
}

message Challenge {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    HTTP_01 = 1;
    DNS_01 = 2;
  }

  enum Status {
    STATUS_UNSPECIFIED = 0;
    PENDING = 1;
    PROCESSING = 2;
    VALID = 3;
    INVALID = 4;
  }

  Type type = 1;
  string url = 2;
  Status status = 3;
  string validated = 4;
  Problem error = 5;
}

message Identifier {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    DNS = 1;
  }

  Type type = 1;
  string value = 2;
}

message Order {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    PENDING = 1;
    READY = 2;
    PROCESSING = 3;
    VALID = 4;
    INVALID = 5;
  }

  Status status = 1;
  string expires = 2;
  repeated Identifier identifiers = 3;
  string not_before = 4;
  string not_after = 5;
  Problem error = 6;
  repeated string authorizations = 7;
  string finalize = 8;
  string certificate = 9;
}

message Problem {
  message Subproblem {
    string type = 1;
    string detail = 2;
    Identifier identifier = 3;
  }

  string type = 1;
  string title = 2;
  uint32 status = 3;
  string detail = 4;
  string instance = 5;
  repeated Subproblem subproblems = 6;
}
