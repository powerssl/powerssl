syntax = "proto3";

package powerssl.apiserver.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "powerssl.io/internal/pkg/apiserver/api/v1;api";

// The CertificateIssueService ...
service CertificateIssueService {
  // Creates a certificate, and returns the new CertificateIssue.
  rpc Create(CreateCertificateIssueRequest) returns (CertificateIssue) {
    option (google.api.http) = {
      post: "/v1/{parent=certificates/*}/issues"
      body: "issue"
    };
  }

  // Deletes a certificate. Returns NOT_FOUND if the certificate does not exist.
  rpc Delete(DeleteCertificateIssueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=certificates/*/issues/*}"
    };
  }

  // Gets a certificate. Returns NOT_FOUND if the certificate does not exist.
  rpc Get(GetCertificateIssueRequest) returns (CertificateIssue) {
    option (google.api.http) = {
      get: "/v1/{name=certificates/*/issues/*}"
    };
  }

  // Lists certificates. The order is unspecified but deterministic. Newly
  // created certificates will not necessarily be added to the end of this list.
  rpc List(ListCertificateIssuesRequest)
      returns (ListCertificateIssuesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=certificates/*}/issues"
    };
  }

  // Updates a certificate. Returns INVALID_ARGUMENT if the name of the
  // certificate is non-empty and does equal the previous name.
  rpc Update(UpdateCertificateIssueRequest) returns (CertificateIssue) {
    option (google.api.http) = {
      put: "/v1/{name=certificates/*/issues/*}"
      body: "issue"
    };
  }
}

// A CertificateIssue ...
message CertificateIssue {
  // The resource name of the certificate issue.
  // CertificateIssue names have the form
  // `certificates/{certificate_id}/issues/{issue_id}`. The name is ignored when
  // creating a certificate issue.
  string name = 1;

  google.protobuf.Timestamp create_time = 2;
  google.protobuf.Timestamp update_time = 3;
  string display_name = 4;
  string title = 5;
  string description = 6;
  map<string, string> labels = 7;

  repeated string dnsnames = 8;
  string key_algorithm = 9;
  int32 key_size = 10;
  string digest_algorithm = 11;
  bool auto_renew = 12;
}

message CreateCertificateIssueRequest {
  string parent = 1;
  CertificateIssue certificate_issue = 2;
}

message DeleteCertificateIssueRequest {
  string name = 1;
}

message GetCertificateIssueRequest {
  string name = 1;
}

message ListCertificateIssuesRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListCertificateIssuesResponse {
  repeated CertificateIssue certificate_issues = 1;
  string next_page_token = 2;
}

message UpdateCertificateIssueRequest {
  string name = 1;
  google.protobuf.FieldMask update_mask = 2;
  CertificateIssue certificate_issue = 3;
}
