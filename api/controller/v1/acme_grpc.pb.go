// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ACMEServiceClient is the client API for ACMEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACMEServiceClient interface {
	GetCreateAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetCreateAccountRequestResponse, error)
	SetCreateAccountResponse(ctx context.Context, in *SetCreateAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeactivateAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetDeactivateAccountRequestResponse, error)
	SetDeactivateAccountResponse(ctx context.Context, in *SetDeactivateAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRekeyAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetRekeyAccountRequestResponse, error)
	SetRekeyAccountResponse(ctx context.Context, in *SetRekeyAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUpdateAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetUpdateAccountRequestResponse, error)
	SetUpdateAccountResponse(ctx context.Context, in *SetUpdateAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCreateOrderRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetCreateOrderRequestResponse, error)
	SetCreateOrderResponse(ctx context.Context, in *SetCreateOrderResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFinalizeOrderRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetFinalizeOrderRequestResponse, error)
	SetFinalizeOrderResponse(ctx context.Context, in *SetFinalizeOrderResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGetOrderRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetOrderRequestResponse, error)
	SetGetOrderResponse(ctx context.Context, in *SetGetOrderResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCreateAuthorizationRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetCreateAuthorizationRequestResponse, error)
	SetCreateAuthorizationResponse(ctx context.Context, in *SetCreateAuthorizationResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeactivateAuthorizationRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetDeactivateAuthorizationRequestResponse, error)
	SetDeactivateAuthorizationResponse(ctx context.Context, in *SetDeactivateAuthorizationResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGetAuthorizationRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetAuthorizationRequestResponse, error)
	SetGetAuthorizationResponse(ctx context.Context, in *SetGetAuthorizationResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGetChallengeRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetChallengeRequestResponse, error)
	SetGetChallengeResponse(ctx context.Context, in *SetGetChallengeResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetValidateChallengeRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetValidateChallengeRequestResponse, error)
	SetValidateChallengeResponse(ctx context.Context, in *SetValidateChallengeResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGetCertificateRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetCertificateRequestResponse, error)
	SetGetCertificateResponse(ctx context.Context, in *SetGetCertificateResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRevokeCertificateRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetRevokeCertificateRequestResponse, error)
	SetRevokeCertificateResponse(ctx context.Context, in *SetRevokeCertificateResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aCMEServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewACMEServiceClient(cc grpc.ClientConnInterface) ACMEServiceClient {
	return &aCMEServiceClient{cc}
}

func (c *aCMEServiceClient) GetCreateAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetCreateAccountRequestResponse, error) {
	out := new(GetCreateAccountRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetCreateAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetCreateAccountResponse(ctx context.Context, in *SetCreateAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetCreateAccountResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetDeactivateAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetDeactivateAccountRequestResponse, error) {
	out := new(GetDeactivateAccountRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetDeactivateAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetDeactivateAccountResponse(ctx context.Context, in *SetDeactivateAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetDeactivateAccountResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetRekeyAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetRekeyAccountRequestResponse, error) {
	out := new(GetRekeyAccountRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetRekeyAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetRekeyAccountResponse(ctx context.Context, in *SetRekeyAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetRekeyAccountResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetUpdateAccountRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetUpdateAccountRequestResponse, error) {
	out := new(GetUpdateAccountRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetUpdateAccountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetUpdateAccountResponse(ctx context.Context, in *SetUpdateAccountResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetUpdateAccountResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetCreateOrderRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetCreateOrderRequestResponse, error) {
	out := new(GetCreateOrderRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetCreateOrderRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetCreateOrderResponse(ctx context.Context, in *SetCreateOrderResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetCreateOrderResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetFinalizeOrderRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetFinalizeOrderRequestResponse, error) {
	out := new(GetFinalizeOrderRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetFinalizeOrderRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetFinalizeOrderResponse(ctx context.Context, in *SetFinalizeOrderResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetFinalizeOrderResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetGetOrderRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetOrderRequestResponse, error) {
	out := new(GetGetOrderRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetGetOrderRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetGetOrderResponse(ctx context.Context, in *SetGetOrderResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetGetOrderResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetCreateAuthorizationRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetCreateAuthorizationRequestResponse, error) {
	out := new(GetCreateAuthorizationRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetCreateAuthorizationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetCreateAuthorizationResponse(ctx context.Context, in *SetCreateAuthorizationResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetCreateAuthorizationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetDeactivateAuthorizationRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetDeactivateAuthorizationRequestResponse, error) {
	out := new(GetDeactivateAuthorizationRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetDeactivateAuthorizationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetDeactivateAuthorizationResponse(ctx context.Context, in *SetDeactivateAuthorizationResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetDeactivateAuthorizationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetGetAuthorizationRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetAuthorizationRequestResponse, error) {
	out := new(GetGetAuthorizationRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetGetAuthorizationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetGetAuthorizationResponse(ctx context.Context, in *SetGetAuthorizationResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetGetAuthorizationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetGetChallengeRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetChallengeRequestResponse, error) {
	out := new(GetGetChallengeRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetGetChallengeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetGetChallengeResponse(ctx context.Context, in *SetGetChallengeResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetGetChallengeResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetValidateChallengeRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetValidateChallengeRequestResponse, error) {
	out := new(GetValidateChallengeRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetValidateChallengeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetValidateChallengeResponse(ctx context.Context, in *SetValidateChallengeResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetValidateChallengeResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetGetCertificateRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetGetCertificateRequestResponse, error) {
	out := new(GetGetCertificateRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetGetCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetGetCertificateResponse(ctx context.Context, in *SetGetCertificateResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetGetCertificateResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) GetRevokeCertificateRequest(ctx context.Context, in *Activity, opts ...grpc.CallOption) (*GetRevokeCertificateRequestResponse, error) {
	out := new(GetRevokeCertificateRequestResponse)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/GetRevokeCertificateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEServiceClient) SetRevokeCertificateResponse(ctx context.Context, in *SetRevokeCertificateResponseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/powerssl.controller.v1.ACMEService/SetRevokeCertificateResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMEServiceServer is the server API for ACMEService service.
// All implementations must embed UnimplementedACMEServiceServer
// for forward compatibility
type ACMEServiceServer interface {
	GetCreateAccountRequest(context.Context, *Activity) (*GetCreateAccountRequestResponse, error)
	SetCreateAccountResponse(context.Context, *SetCreateAccountResponseRequest) (*emptypb.Empty, error)
	GetDeactivateAccountRequest(context.Context, *Activity) (*GetDeactivateAccountRequestResponse, error)
	SetDeactivateAccountResponse(context.Context, *SetDeactivateAccountResponseRequest) (*emptypb.Empty, error)
	GetRekeyAccountRequest(context.Context, *Activity) (*GetRekeyAccountRequestResponse, error)
	SetRekeyAccountResponse(context.Context, *SetRekeyAccountResponseRequest) (*emptypb.Empty, error)
	GetUpdateAccountRequest(context.Context, *Activity) (*GetUpdateAccountRequestResponse, error)
	SetUpdateAccountResponse(context.Context, *SetUpdateAccountResponseRequest) (*emptypb.Empty, error)
	GetCreateOrderRequest(context.Context, *Activity) (*GetCreateOrderRequestResponse, error)
	SetCreateOrderResponse(context.Context, *SetCreateOrderResponseRequest) (*emptypb.Empty, error)
	GetFinalizeOrderRequest(context.Context, *Activity) (*GetFinalizeOrderRequestResponse, error)
	SetFinalizeOrderResponse(context.Context, *SetFinalizeOrderResponseRequest) (*emptypb.Empty, error)
	GetGetOrderRequest(context.Context, *Activity) (*GetGetOrderRequestResponse, error)
	SetGetOrderResponse(context.Context, *SetGetOrderResponseRequest) (*emptypb.Empty, error)
	GetCreateAuthorizationRequest(context.Context, *Activity) (*GetCreateAuthorizationRequestResponse, error)
	SetCreateAuthorizationResponse(context.Context, *SetCreateAuthorizationResponseRequest) (*emptypb.Empty, error)
	GetDeactivateAuthorizationRequest(context.Context, *Activity) (*GetDeactivateAuthorizationRequestResponse, error)
	SetDeactivateAuthorizationResponse(context.Context, *SetDeactivateAuthorizationResponseRequest) (*emptypb.Empty, error)
	GetGetAuthorizationRequest(context.Context, *Activity) (*GetGetAuthorizationRequestResponse, error)
	SetGetAuthorizationResponse(context.Context, *SetGetAuthorizationResponseRequest) (*emptypb.Empty, error)
	GetGetChallengeRequest(context.Context, *Activity) (*GetGetChallengeRequestResponse, error)
	SetGetChallengeResponse(context.Context, *SetGetChallengeResponseRequest) (*emptypb.Empty, error)
	GetValidateChallengeRequest(context.Context, *Activity) (*GetValidateChallengeRequestResponse, error)
	SetValidateChallengeResponse(context.Context, *SetValidateChallengeResponseRequest) (*emptypb.Empty, error)
	GetGetCertificateRequest(context.Context, *Activity) (*GetGetCertificateRequestResponse, error)
	SetGetCertificateResponse(context.Context, *SetGetCertificateResponseRequest) (*emptypb.Empty, error)
	GetRevokeCertificateRequest(context.Context, *Activity) (*GetRevokeCertificateRequestResponse, error)
	SetRevokeCertificateResponse(context.Context, *SetRevokeCertificateResponseRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedACMEServiceServer()
}

// UnimplementedACMEServiceServer must be embedded to have forward compatible implementations.
type UnimplementedACMEServiceServer struct {
}

func (UnimplementedACMEServiceServer) GetCreateAccountRequest(context.Context, *Activity) (*GetCreateAccountRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreateAccountRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetCreateAccountResponse(context.Context, *SetCreateAccountResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreateAccountResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetDeactivateAccountRequest(context.Context, *Activity) (*GetDeactivateAccountRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeactivateAccountRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetDeactivateAccountResponse(context.Context, *SetDeactivateAccountResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeactivateAccountResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetRekeyAccountRequest(context.Context, *Activity) (*GetRekeyAccountRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRekeyAccountRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetRekeyAccountResponse(context.Context, *SetRekeyAccountResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRekeyAccountResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetUpdateAccountRequest(context.Context, *Activity) (*GetUpdateAccountRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateAccountRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetUpdateAccountResponse(context.Context, *SetUpdateAccountResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpdateAccountResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetCreateOrderRequest(context.Context, *Activity) (*GetCreateOrderRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreateOrderRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetCreateOrderResponse(context.Context, *SetCreateOrderResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreateOrderResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetFinalizeOrderRequest(context.Context, *Activity) (*GetFinalizeOrderRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalizeOrderRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetFinalizeOrderResponse(context.Context, *SetFinalizeOrderResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFinalizeOrderResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetGetOrderRequest(context.Context, *Activity) (*GetGetOrderRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGetOrderRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetGetOrderResponse(context.Context, *SetGetOrderResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGetOrderResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetCreateAuthorizationRequest(context.Context, *Activity) (*GetCreateAuthorizationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreateAuthorizationRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetCreateAuthorizationResponse(context.Context, *SetCreateAuthorizationResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreateAuthorizationResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetDeactivateAuthorizationRequest(context.Context, *Activity) (*GetDeactivateAuthorizationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeactivateAuthorizationRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetDeactivateAuthorizationResponse(context.Context, *SetDeactivateAuthorizationResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeactivateAuthorizationResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetGetAuthorizationRequest(context.Context, *Activity) (*GetGetAuthorizationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGetAuthorizationRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetGetAuthorizationResponse(context.Context, *SetGetAuthorizationResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGetAuthorizationResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetGetChallengeRequest(context.Context, *Activity) (*GetGetChallengeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGetChallengeRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetGetChallengeResponse(context.Context, *SetGetChallengeResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGetChallengeResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetValidateChallengeRequest(context.Context, *Activity) (*GetValidateChallengeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidateChallengeRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetValidateChallengeResponse(context.Context, *SetValidateChallengeResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValidateChallengeResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetGetCertificateRequest(context.Context, *Activity) (*GetGetCertificateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGetCertificateRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetGetCertificateResponse(context.Context, *SetGetCertificateResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGetCertificateResponse not implemented")
}
func (UnimplementedACMEServiceServer) GetRevokeCertificateRequest(context.Context, *Activity) (*GetRevokeCertificateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevokeCertificateRequest not implemented")
}
func (UnimplementedACMEServiceServer) SetRevokeCertificateResponse(context.Context, *SetRevokeCertificateResponseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRevokeCertificateResponse not implemented")
}
func (UnimplementedACMEServiceServer) mustEmbedUnimplementedACMEServiceServer() {}

// UnsafeACMEServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACMEServiceServer will
// result in compilation errors.
type UnsafeACMEServiceServer interface {
	mustEmbedUnimplementedACMEServiceServer()
}

func RegisterACMEServiceServer(s grpc.ServiceRegistrar, srv ACMEServiceServer) {
	s.RegisterService(&ACMEService_ServiceDesc, srv)
}

func _ACMEService_GetCreateAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetCreateAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetCreateAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetCreateAccountRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetCreateAccountResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCreateAccountResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetCreateAccountResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetCreateAccountResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetCreateAccountResponse(ctx, req.(*SetCreateAccountResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetDeactivateAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetDeactivateAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetDeactivateAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetDeactivateAccountRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetDeactivateAccountResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeactivateAccountResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetDeactivateAccountResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetDeactivateAccountResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetDeactivateAccountResponse(ctx, req.(*SetDeactivateAccountResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetRekeyAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetRekeyAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetRekeyAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetRekeyAccountRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetRekeyAccountResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRekeyAccountResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetRekeyAccountResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetRekeyAccountResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetRekeyAccountResponse(ctx, req.(*SetRekeyAccountResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetUpdateAccountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetUpdateAccountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetUpdateAccountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetUpdateAccountRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetUpdateAccountResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpdateAccountResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetUpdateAccountResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetUpdateAccountResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetUpdateAccountResponse(ctx, req.(*SetUpdateAccountResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetCreateOrderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetCreateOrderRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetCreateOrderRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetCreateOrderRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetCreateOrderResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCreateOrderResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetCreateOrderResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetCreateOrderResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetCreateOrderResponse(ctx, req.(*SetCreateOrderResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetFinalizeOrderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetFinalizeOrderRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetFinalizeOrderRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetFinalizeOrderRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetFinalizeOrderResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFinalizeOrderResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetFinalizeOrderResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetFinalizeOrderResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetFinalizeOrderResponse(ctx, req.(*SetFinalizeOrderResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetGetOrderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetGetOrderRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetGetOrderRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetGetOrderRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetGetOrderResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGetOrderResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetGetOrderResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetGetOrderResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetGetOrderResponse(ctx, req.(*SetGetOrderResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetCreateAuthorizationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetCreateAuthorizationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetCreateAuthorizationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetCreateAuthorizationRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetCreateAuthorizationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCreateAuthorizationResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetCreateAuthorizationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetCreateAuthorizationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetCreateAuthorizationResponse(ctx, req.(*SetCreateAuthorizationResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetDeactivateAuthorizationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetDeactivateAuthorizationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetDeactivateAuthorizationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetDeactivateAuthorizationRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetDeactivateAuthorizationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeactivateAuthorizationResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetDeactivateAuthorizationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetDeactivateAuthorizationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetDeactivateAuthorizationResponse(ctx, req.(*SetDeactivateAuthorizationResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetGetAuthorizationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetGetAuthorizationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetGetAuthorizationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetGetAuthorizationRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetGetAuthorizationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGetAuthorizationResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetGetAuthorizationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetGetAuthorizationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetGetAuthorizationResponse(ctx, req.(*SetGetAuthorizationResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetGetChallengeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetGetChallengeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetGetChallengeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetGetChallengeRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetGetChallengeResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGetChallengeResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetGetChallengeResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetGetChallengeResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetGetChallengeResponse(ctx, req.(*SetGetChallengeResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetValidateChallengeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetValidateChallengeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetValidateChallengeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetValidateChallengeRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetValidateChallengeResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValidateChallengeResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetValidateChallengeResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetValidateChallengeResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetValidateChallengeResponse(ctx, req.(*SetValidateChallengeResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetGetCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetGetCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetGetCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetGetCertificateRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetGetCertificateResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGetCertificateResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetGetCertificateResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetGetCertificateResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetGetCertificateResponse(ctx, req.(*SetGetCertificateResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_GetRevokeCertificateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Activity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).GetRevokeCertificateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/GetRevokeCertificateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).GetRevokeCertificateRequest(ctx, req.(*Activity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACMEService_SetRevokeCertificateResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRevokeCertificateResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServiceServer).SetRevokeCertificateResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerssl.controller.v1.ACMEService/SetRevokeCertificateResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServiceServer).SetRevokeCertificateResponse(ctx, req.(*SetRevokeCertificateResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ACMEService_ServiceDesc is the grpc.ServiceDesc for ACMEService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACMEService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.controller.v1.ACMEService",
	HandlerType: (*ACMEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCreateAccountRequest",
			Handler:    _ACMEService_GetCreateAccountRequest_Handler,
		},
		{
			MethodName: "SetCreateAccountResponse",
			Handler:    _ACMEService_SetCreateAccountResponse_Handler,
		},
		{
			MethodName: "GetDeactivateAccountRequest",
			Handler:    _ACMEService_GetDeactivateAccountRequest_Handler,
		},
		{
			MethodName: "SetDeactivateAccountResponse",
			Handler:    _ACMEService_SetDeactivateAccountResponse_Handler,
		},
		{
			MethodName: "GetRekeyAccountRequest",
			Handler:    _ACMEService_GetRekeyAccountRequest_Handler,
		},
		{
			MethodName: "SetRekeyAccountResponse",
			Handler:    _ACMEService_SetRekeyAccountResponse_Handler,
		},
		{
			MethodName: "GetUpdateAccountRequest",
			Handler:    _ACMEService_GetUpdateAccountRequest_Handler,
		},
		{
			MethodName: "SetUpdateAccountResponse",
			Handler:    _ACMEService_SetUpdateAccountResponse_Handler,
		},
		{
			MethodName: "GetCreateOrderRequest",
			Handler:    _ACMEService_GetCreateOrderRequest_Handler,
		},
		{
			MethodName: "SetCreateOrderResponse",
			Handler:    _ACMEService_SetCreateOrderResponse_Handler,
		},
		{
			MethodName: "GetFinalizeOrderRequest",
			Handler:    _ACMEService_GetFinalizeOrderRequest_Handler,
		},
		{
			MethodName: "SetFinalizeOrderResponse",
			Handler:    _ACMEService_SetFinalizeOrderResponse_Handler,
		},
		{
			MethodName: "GetGetOrderRequest",
			Handler:    _ACMEService_GetGetOrderRequest_Handler,
		},
		{
			MethodName: "SetGetOrderResponse",
			Handler:    _ACMEService_SetGetOrderResponse_Handler,
		},
		{
			MethodName: "GetCreateAuthorizationRequest",
			Handler:    _ACMEService_GetCreateAuthorizationRequest_Handler,
		},
		{
			MethodName: "SetCreateAuthorizationResponse",
			Handler:    _ACMEService_SetCreateAuthorizationResponse_Handler,
		},
		{
			MethodName: "GetDeactivateAuthorizationRequest",
			Handler:    _ACMEService_GetDeactivateAuthorizationRequest_Handler,
		},
		{
			MethodName: "SetDeactivateAuthorizationResponse",
			Handler:    _ACMEService_SetDeactivateAuthorizationResponse_Handler,
		},
		{
			MethodName: "GetGetAuthorizationRequest",
			Handler:    _ACMEService_GetGetAuthorizationRequest_Handler,
		},
		{
			MethodName: "SetGetAuthorizationResponse",
			Handler:    _ACMEService_SetGetAuthorizationResponse_Handler,
		},
		{
			MethodName: "GetGetChallengeRequest",
			Handler:    _ACMEService_GetGetChallengeRequest_Handler,
		},
		{
			MethodName: "SetGetChallengeResponse",
			Handler:    _ACMEService_SetGetChallengeResponse_Handler,
		},
		{
			MethodName: "GetValidateChallengeRequest",
			Handler:    _ACMEService_GetValidateChallengeRequest_Handler,
		},
		{
			MethodName: "SetValidateChallengeResponse",
			Handler:    _ACMEService_SetValidateChallengeResponse_Handler,
		},
		{
			MethodName: "GetGetCertificateRequest",
			Handler:    _ACMEService_GetGetCertificateRequest_Handler,
		},
		{
			MethodName: "SetGetCertificateResponse",
			Handler:    _ACMEService_SetGetCertificateResponse_Handler,
		},
		{
			MethodName: "GetRevokeCertificateRequest",
			Handler:    _ACMEService_GetRevokeCertificateRequest_Handler,
		},
		{
			MethodName: "SetRevokeCertificateResponse",
			Handler:    _ACMEService_SetRevokeCertificateResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerssl/controller/v1/acme.proto",
}
