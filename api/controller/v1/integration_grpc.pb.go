// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	Register(ctx context.Context, in *RegisterIntegrationRequest, opts ...grpc.CallOption) (IntegrationService_RegisterClient, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) Register(ctx context.Context, in *RegisterIntegrationRequest, opts ...grpc.CallOption) (IntegrationService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IntegrationService_serviceDesc.Streams[0], "/powerssl.controller.v1.IntegrationService/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationServiceRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationService_RegisterClient interface {
	Recv() (*Activity, error)
	grpc.ClientStream
}

type integrationServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *integrationServiceRegisterClient) Recv() (*Activity, error) {
	m := new(Activity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility
type IntegrationServiceServer interface {
	Register(*RegisterIntegrationRequest, IntegrationService_RegisterServer) error
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServiceServer struct {
}

func (UnimplementedIntegrationServiceServer) Register(*RegisterIntegrationRequest, IntegrationService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s *grpc.Server, srv IntegrationServiceServer) {
	s.RegisterService(&_IntegrationService_serviceDesc, srv)
}

func _IntegrationService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterIntegrationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationServiceServer).Register(m, &integrationServiceRegisterServer{stream})
}

type IntegrationService_RegisterServer interface {
	Send(*Activity) error
	grpc.ServerStream
}

type integrationServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *integrationServiceRegisterServer) Send(m *Activity) error {
	return x.ServerStream.SendMsg(m)
}

var _IntegrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powerssl.controller.v1.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _IntegrationService_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "powerssl/controller/v1/integration.proto",
}
