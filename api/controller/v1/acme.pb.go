// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: powerssl/controller/v1/acme.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Account_Status int32

const (
	Account_STATUS_UNSPECIFIED Account_Status = 0
	Account_VALID              Account_Status = 1
	Account_DEACTIVATED        Account_Status = 2
	Account_REVOKED            Account_Status = 3
)

// Enum value maps for Account_Status.
var (
	Account_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "VALID",
		2: "DEACTIVATED",
		3: "REVOKED",
	}
	Account_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"VALID":              1,
		"DEACTIVATED":        2,
		"REVOKED":            3,
	}
)

func (x Account_Status) Enum() *Account_Status {
	p := new(Account_Status)
	*p = x
	return p
}

func (x Account_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_powerssl_controller_v1_acme_proto_enumTypes[0].Descriptor()
}

func (Account_Status) Type() protoreflect.EnumType {
	return &file_powerssl_controller_v1_acme_proto_enumTypes[0]
}

func (x Account_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Account_Status.Descriptor instead.
func (Account_Status) EnumDescriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{28, 0}
}

type Authorization_Status int32

const (
	Authorization_STATUS_UNSPECIFIED Authorization_Status = 0
	Authorization_PENDING            Authorization_Status = 1
	Authorization_VALID              Authorization_Status = 2
	Authorization_INVALID            Authorization_Status = 3
	Authorization_DEACTIVATED        Authorization_Status = 4
	Authorization_EXPIRED            Authorization_Status = 5
	Authorization_REVOKED            Authorization_Status = 6
)

// Enum value maps for Authorization_Status.
var (
	Authorization_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "VALID",
		3: "INVALID",
		4: "DEACTIVATED",
		5: "EXPIRED",
		6: "REVOKED",
	}
	Authorization_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"VALID":              2,
		"INVALID":            3,
		"DEACTIVATED":        4,
		"EXPIRED":            5,
		"REVOKED":            6,
	}
)

func (x Authorization_Status) Enum() *Authorization_Status {
	p := new(Authorization_Status)
	*p = x
	return p
}

func (x Authorization_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authorization_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_powerssl_controller_v1_acme_proto_enumTypes[1].Descriptor()
}

func (Authorization_Status) Type() protoreflect.EnumType {
	return &file_powerssl_controller_v1_acme_proto_enumTypes[1]
}

func (x Authorization_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authorization_Status.Descriptor instead.
func (Authorization_Status) EnumDescriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{29, 0}
}

type Challenge_Type int32

const (
	Challenge_TYPE_UNSPECIFIED Challenge_Type = 0
	Challenge_HTTP_01          Challenge_Type = 1
	Challenge_DNS_01           Challenge_Type = 2
)

// Enum value maps for Challenge_Type.
var (
	Challenge_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "HTTP_01",
		2: "DNS_01",
	}
	Challenge_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"HTTP_01":          1,
		"DNS_01":           2,
	}
)

func (x Challenge_Type) Enum() *Challenge_Type {
	p := new(Challenge_Type)
	*p = x
	return p
}

func (x Challenge_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Challenge_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_powerssl_controller_v1_acme_proto_enumTypes[2].Descriptor()
}

func (Challenge_Type) Type() protoreflect.EnumType {
	return &file_powerssl_controller_v1_acme_proto_enumTypes[2]
}

func (x Challenge_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Challenge_Type.Descriptor instead.
func (Challenge_Type) EnumDescriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{30, 0}
}

type Challenge_Status int32

const (
	Challenge_STATUS_UNSPECIFIED Challenge_Status = 0
	Challenge_PENDING            Challenge_Status = 1
	Challenge_PROCESSING         Challenge_Status = 2
	Challenge_VALID              Challenge_Status = 3
	Challenge_INVALID            Challenge_Status = 4
)

// Enum value maps for Challenge_Status.
var (
	Challenge_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "PROCESSING",
		3: "VALID",
		4: "INVALID",
	}
	Challenge_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"PROCESSING":         2,
		"VALID":              3,
		"INVALID":            4,
	}
)

func (x Challenge_Status) Enum() *Challenge_Status {
	p := new(Challenge_Status)
	*p = x
	return p
}

func (x Challenge_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Challenge_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_powerssl_controller_v1_acme_proto_enumTypes[3].Descriptor()
}

func (Challenge_Status) Type() protoreflect.EnumType {
	return &file_powerssl_controller_v1_acme_proto_enumTypes[3]
}

func (x Challenge_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Challenge_Status.Descriptor instead.
func (Challenge_Status) EnumDescriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{30, 1}
}

type Identifier_Type int32

const (
	Identifier_TYPE_UNSPECIFIED Identifier_Type = 0
	Identifier_DNS              Identifier_Type = 1
)

// Enum value maps for Identifier_Type.
var (
	Identifier_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DNS",
	}
	Identifier_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"DNS":              1,
	}
)

func (x Identifier_Type) Enum() *Identifier_Type {
	p := new(Identifier_Type)
	*p = x
	return p
}

func (x Identifier_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identifier_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_powerssl_controller_v1_acme_proto_enumTypes[4].Descriptor()
}

func (Identifier_Type) Type() protoreflect.EnumType {
	return &file_powerssl_controller_v1_acme_proto_enumTypes[4]
}

func (x Identifier_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identifier_Type.Descriptor instead.
func (Identifier_Type) EnumDescriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{31, 0}
}

type Order_Status int32

const (
	Order_STATUS_UNSPECIFIED Order_Status = 0
	Order_PENDING            Order_Status = 1
	Order_READY              Order_Status = 2
	Order_PROCESSING         Order_Status = 3
	Order_VALID              Order_Status = 4
	Order_INVALID            Order_Status = 5
)

// Enum value maps for Order_Status.
var (
	Order_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "READY",
		3: "PROCESSING",
		4: "VALID",
		5: "INVALID",
	}
	Order_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"READY":              2,
		"PROCESSING":         3,
		"VALID":              4,
		"INVALID":            5,
	}
)

func (x Order_Status) Enum() *Order_Status {
	p := new(Order_Status)
	*p = x
	return p
}

func (x Order_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_powerssl_controller_v1_acme_proto_enumTypes[5].Descriptor()
}

func (Order_Status) Type() protoreflect.EnumType {
	return &file_powerssl_controller_v1_acme_proto_enumTypes[5]
}

func (x Order_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Status.Descriptor instead.
func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{32, 0}
}

type GetCreateAccountRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity             *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
	KeyToken             string    `protobuf:"bytes,2,opt,name=key_token,json=keyToken,proto3" json:"key_token,omitempty"`
	DirectoryUrl         string    `protobuf:"bytes,3,opt,name=directory_url,json=directoryUrl,proto3" json:"directory_url,omitempty"`
	TermsOfServiceAgreed bool      `protobuf:"varint,4,opt,name=terms_of_service_agreed,json=termsOfServiceAgreed,proto3" json:"terms_of_service_agreed,omitempty"`
	Contacts             []string  `protobuf:"bytes,5,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *GetCreateAccountRequestResponse) Reset() {
	*x = GetCreateAccountRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreateAccountRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreateAccountRequestResponse) ProtoMessage() {}

func (x *GetCreateAccountRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreateAccountRequestResponse.ProtoReflect.Descriptor instead.
func (*GetCreateAccountRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{0}
}

func (x *GetCreateAccountRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *GetCreateAccountRequestResponse) GetKeyToken() string {
	if x != nil {
		return x.KeyToken
	}
	return ""
}

func (x *GetCreateAccountRequestResponse) GetDirectoryUrl() string {
	if x != nil {
		return x.DirectoryUrl
	}
	return ""
}

func (x *GetCreateAccountRequestResponse) GetTermsOfServiceAgreed() bool {
	if x != nil {
		return x.TermsOfServiceAgreed
	}
	return false
}

func (x *GetCreateAccountRequestResponse) GetContacts() []string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type SetCreateAccountResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
	Account  *Account  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Error    *Error    `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetCreateAccountResponseRequest) Reset() {
	*x = SetCreateAccountResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCreateAccountResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCreateAccountResponseRequest) ProtoMessage() {}

func (x *SetCreateAccountResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCreateAccountResponseRequest.ProtoReflect.Descriptor instead.
func (*SetCreateAccountResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{1}
}

func (x *SetCreateAccountResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *SetCreateAccountResponseRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *SetCreateAccountResponseRequest) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetDeactivateAccountRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetDeactivateAccountRequestResponse) Reset() {
	*x = GetDeactivateAccountRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeactivateAccountRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeactivateAccountRequestResponse) ProtoMessage() {}

func (x *GetDeactivateAccountRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeactivateAccountRequestResponse.ProtoReflect.Descriptor instead.
func (*GetDeactivateAccountRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{2}
}

func (x *GetDeactivateAccountRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetDeactivateAccountResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetDeactivateAccountResponseRequest) Reset() {
	*x = SetDeactivateAccountResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeactivateAccountResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeactivateAccountResponseRequest) ProtoMessage() {}

func (x *SetDeactivateAccountResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeactivateAccountResponseRequest.ProtoReflect.Descriptor instead.
func (*SetDeactivateAccountResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{3}
}

func (x *SetDeactivateAccountResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetRekeyAccountRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetRekeyAccountRequestResponse) Reset() {
	*x = GetRekeyAccountRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRekeyAccountRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRekeyAccountRequestResponse) ProtoMessage() {}

func (x *GetRekeyAccountRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRekeyAccountRequestResponse.ProtoReflect.Descriptor instead.
func (*GetRekeyAccountRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{4}
}

func (x *GetRekeyAccountRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetRekeyAccountResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetRekeyAccountResponseRequest) Reset() {
	*x = SetRekeyAccountResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRekeyAccountResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRekeyAccountResponseRequest) ProtoMessage() {}

func (x *SetRekeyAccountResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRekeyAccountResponseRequest.ProtoReflect.Descriptor instead.
func (*SetRekeyAccountResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{5}
}

func (x *SetRekeyAccountResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetUpdateAccountRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetUpdateAccountRequestResponse) Reset() {
	*x = GetUpdateAccountRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateAccountRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateAccountRequestResponse) ProtoMessage() {}

func (x *GetUpdateAccountRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateAccountRequestResponse.ProtoReflect.Descriptor instead.
func (*GetUpdateAccountRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{6}
}

func (x *GetUpdateAccountRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetUpdateAccountResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetUpdateAccountResponseRequest) Reset() {
	*x = SetUpdateAccountResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpdateAccountResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpdateAccountResponseRequest) ProtoMessage() {}

func (x *SetUpdateAccountResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpdateAccountResponseRequest.ProtoReflect.Descriptor instead.
func (*SetUpdateAccountResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{7}
}

func (x *SetUpdateAccountResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetCreateOrderRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetCreateOrderRequestResponse) Reset() {
	*x = GetCreateOrderRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreateOrderRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreateOrderRequestResponse) ProtoMessage() {}

func (x *GetCreateOrderRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreateOrderRequestResponse.ProtoReflect.Descriptor instead.
func (*GetCreateOrderRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{8}
}

func (x *GetCreateOrderRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetCreateOrderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetCreateOrderResponseRequest) Reset() {
	*x = SetCreateOrderResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCreateOrderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCreateOrderResponseRequest) ProtoMessage() {}

func (x *SetCreateOrderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCreateOrderResponseRequest.ProtoReflect.Descriptor instead.
func (*SetCreateOrderResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{9}
}

func (x *SetCreateOrderResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetFinalizeOrderRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetFinalizeOrderRequestResponse) Reset() {
	*x = GetFinalizeOrderRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinalizeOrderRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinalizeOrderRequestResponse) ProtoMessage() {}

func (x *GetFinalizeOrderRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinalizeOrderRequestResponse.ProtoReflect.Descriptor instead.
func (*GetFinalizeOrderRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{10}
}

func (x *GetFinalizeOrderRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetFinalizeOrderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetFinalizeOrderResponseRequest) Reset() {
	*x = SetFinalizeOrderResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFinalizeOrderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFinalizeOrderResponseRequest) ProtoMessage() {}

func (x *SetFinalizeOrderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFinalizeOrderResponseRequest.ProtoReflect.Descriptor instead.
func (*SetFinalizeOrderResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{11}
}

func (x *SetFinalizeOrderResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetGetOrderRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetGetOrderRequestResponse) Reset() {
	*x = GetGetOrderRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGetOrderRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGetOrderRequestResponse) ProtoMessage() {}

func (x *GetGetOrderRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGetOrderRequestResponse.ProtoReflect.Descriptor instead.
func (*GetGetOrderRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{12}
}

func (x *GetGetOrderRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetGetOrderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetGetOrderResponseRequest) Reset() {
	*x = SetGetOrderResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGetOrderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGetOrderResponseRequest) ProtoMessage() {}

func (x *SetGetOrderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGetOrderResponseRequest.ProtoReflect.Descriptor instead.
func (*SetGetOrderResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{13}
}

func (x *SetGetOrderResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetCreateAuthorizationRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetCreateAuthorizationRequestResponse) Reset() {
	*x = GetCreateAuthorizationRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreateAuthorizationRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreateAuthorizationRequestResponse) ProtoMessage() {}

func (x *GetCreateAuthorizationRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreateAuthorizationRequestResponse.ProtoReflect.Descriptor instead.
func (*GetCreateAuthorizationRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{14}
}

func (x *GetCreateAuthorizationRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetCreateAuthorizationResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetCreateAuthorizationResponseRequest) Reset() {
	*x = SetCreateAuthorizationResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCreateAuthorizationResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCreateAuthorizationResponseRequest) ProtoMessage() {}

func (x *SetCreateAuthorizationResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCreateAuthorizationResponseRequest.ProtoReflect.Descriptor instead.
func (*SetCreateAuthorizationResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{15}
}

func (x *SetCreateAuthorizationResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetDeactivateAuthorizationRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetDeactivateAuthorizationRequestResponse) Reset() {
	*x = GetDeactivateAuthorizationRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeactivateAuthorizationRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeactivateAuthorizationRequestResponse) ProtoMessage() {}

func (x *GetDeactivateAuthorizationRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeactivateAuthorizationRequestResponse.ProtoReflect.Descriptor instead.
func (*GetDeactivateAuthorizationRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{16}
}

func (x *GetDeactivateAuthorizationRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetDeactivateAuthorizationResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetDeactivateAuthorizationResponseRequest) Reset() {
	*x = SetDeactivateAuthorizationResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeactivateAuthorizationResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeactivateAuthorizationResponseRequest) ProtoMessage() {}

func (x *SetDeactivateAuthorizationResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeactivateAuthorizationResponseRequest.ProtoReflect.Descriptor instead.
func (*SetDeactivateAuthorizationResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{17}
}

func (x *SetDeactivateAuthorizationResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetGetAuthorizationRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetGetAuthorizationRequestResponse) Reset() {
	*x = GetGetAuthorizationRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGetAuthorizationRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGetAuthorizationRequestResponse) ProtoMessage() {}

func (x *GetGetAuthorizationRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGetAuthorizationRequestResponse.ProtoReflect.Descriptor instead.
func (*GetGetAuthorizationRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{18}
}

func (x *GetGetAuthorizationRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetGetAuthorizationResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetGetAuthorizationResponseRequest) Reset() {
	*x = SetGetAuthorizationResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGetAuthorizationResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGetAuthorizationResponseRequest) ProtoMessage() {}

func (x *SetGetAuthorizationResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGetAuthorizationResponseRequest.ProtoReflect.Descriptor instead.
func (*SetGetAuthorizationResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{19}
}

func (x *SetGetAuthorizationResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetGetChallengeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetGetChallengeRequestResponse) Reset() {
	*x = GetGetChallengeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGetChallengeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGetChallengeRequestResponse) ProtoMessage() {}

func (x *GetGetChallengeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGetChallengeRequestResponse.ProtoReflect.Descriptor instead.
func (*GetGetChallengeRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{20}
}

func (x *GetGetChallengeRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetGetChallengeResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetGetChallengeResponseRequest) Reset() {
	*x = SetGetChallengeResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGetChallengeResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGetChallengeResponseRequest) ProtoMessage() {}

func (x *SetGetChallengeResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGetChallengeResponseRequest.ProtoReflect.Descriptor instead.
func (*SetGetChallengeResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{21}
}

func (x *SetGetChallengeResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetValidateChallengeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetValidateChallengeRequestResponse) Reset() {
	*x = GetValidateChallengeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidateChallengeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidateChallengeRequestResponse) ProtoMessage() {}

func (x *GetValidateChallengeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidateChallengeRequestResponse.ProtoReflect.Descriptor instead.
func (*GetValidateChallengeRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{22}
}

func (x *GetValidateChallengeRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetValidateChallengeResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetValidateChallengeResponseRequest) Reset() {
	*x = SetValidateChallengeResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetValidateChallengeResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetValidateChallengeResponseRequest) ProtoMessage() {}

func (x *SetValidateChallengeResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetValidateChallengeResponseRequest.ProtoReflect.Descriptor instead.
func (*SetValidateChallengeResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{23}
}

func (x *SetValidateChallengeResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetGetCertificateRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetGetCertificateRequestResponse) Reset() {
	*x = GetGetCertificateRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGetCertificateRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGetCertificateRequestResponse) ProtoMessage() {}

func (x *GetGetCertificateRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGetCertificateRequestResponse.ProtoReflect.Descriptor instead.
func (*GetGetCertificateRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{24}
}

func (x *GetGetCertificateRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetGetCertificateResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetGetCertificateResponseRequest) Reset() {
	*x = SetGetCertificateResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGetCertificateResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGetCertificateResponseRequest) ProtoMessage() {}

func (x *SetGetCertificateResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGetCertificateResponseRequest.ProtoReflect.Descriptor instead.
func (*SetGetCertificateResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{25}
}

func (x *SetGetCertificateResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type GetRevokeCertificateRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *GetRevokeCertificateRequestResponse) Reset() {
	*x = GetRevokeCertificateRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevokeCertificateRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevokeCertificateRequestResponse) ProtoMessage() {}

func (x *GetRevokeCertificateRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevokeCertificateRequestResponse.ProtoReflect.Descriptor instead.
func (*GetRevokeCertificateRequestResponse) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{26}
}

func (x *GetRevokeCertificateRequestResponse) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type SetRevokeCertificateResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Activity `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *SetRevokeCertificateResponseRequest) Reset() {
	*x = SetRevokeCertificateResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRevokeCertificateResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRevokeCertificateResponseRequest) ProtoMessage() {}

func (x *SetRevokeCertificateResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRevokeCertificateResponseRequest.ProtoReflect.Descriptor instead.
func (*SetRevokeCertificateResponseRequest) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{27}
}

func (x *SetRevokeCertificateResponseRequest) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               Account_Status `protobuf:"varint,1,opt,name=status,proto3,enum=powerssl.controller.v1.Account_Status" json:"status,omitempty"`
	Contacts             []string       `protobuf:"bytes,2,rep,name=contacts,proto3" json:"contacts,omitempty"`
	TermsOfServiceAgreed bool           `protobuf:"varint,3,opt,name=terms_of_service_agreed,json=termsOfServiceAgreed,proto3" json:"terms_of_service_agreed,omitempty"`
	Orders               string         `protobuf:"bytes,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Url                  string         `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"` // TODO
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{28}
}

func (x *Account) GetStatus() Account_Status {
	if x != nil {
		return x.Status
	}
	return Account_STATUS_UNSPECIFIED
}

func (x *Account) GetContacts() []string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Account) GetTermsOfServiceAgreed() bool {
	if x != nil {
		return x.TermsOfServiceAgreed
	}
	return false
}

func (x *Account) GetOrders() string {
	if x != nil {
		return x.Orders
	}
	return ""
}

func (x *Account) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *Identifier          `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Status     Authorization_Status `protobuf:"varint,2,opt,name=status,proto3,enum=powerssl.controller.v1.Authorization_Status" json:"status,omitempty"`
	Expires    string               `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	Challenges []*Challenge         `protobuf:"bytes,4,rep,name=challenges,proto3" json:"challenges,omitempty"`
	Wildcard   bool                 `protobuf:"varint,5,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{29}
}

func (x *Authorization) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Authorization) GetStatus() Authorization_Status {
	if x != nil {
		return x.Status
	}
	return Authorization_STATUS_UNSPECIFIED
}

func (x *Authorization) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *Authorization) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *Authorization) GetWildcard() bool {
	if x != nil {
		return x.Wildcard
	}
	return false
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Challenge_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=powerssl.controller.v1.Challenge_Type" json:"type,omitempty"`
	Url       string           `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Status    Challenge_Status `protobuf:"varint,3,opt,name=status,proto3,enum=powerssl.controller.v1.Challenge_Status" json:"status,omitempty"`
	Validated string           `protobuf:"bytes,4,opt,name=validated,proto3" json:"validated,omitempty"`
	Error     *Problem         `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{30}
}

func (x *Challenge) GetType() Challenge_Type {
	if x != nil {
		return x.Type
	}
	return Challenge_TYPE_UNSPECIFIED
}

func (x *Challenge) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Challenge) GetStatus() Challenge_Status {
	if x != nil {
		return x.Status
	}
	return Challenge_STATUS_UNSPECIFIED
}

func (x *Challenge) GetValidated() string {
	if x != nil {
		return x.Validated
	}
	return ""
}

func (x *Challenge) GetError() *Problem {
	if x != nil {
		return x.Error
	}
	return nil
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Identifier_Type `protobuf:"varint,1,opt,name=type,proto3,enum=powerssl.controller.v1.Identifier_Type" json:"type,omitempty"`
	Value string          `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{31}
}

func (x *Identifier) GetType() Identifier_Type {
	if x != nil {
		return x.Type
	}
	return Identifier_TYPE_UNSPECIFIED
}

func (x *Identifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         Order_Status  `protobuf:"varint,1,opt,name=status,proto3,enum=powerssl.controller.v1.Order_Status" json:"status,omitempty"`
	Expires        string        `protobuf:"bytes,2,opt,name=expires,proto3" json:"expires,omitempty"`
	Identifiers    []*Identifier `protobuf:"bytes,3,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
	NotBefore      string        `protobuf:"bytes,4,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter       string        `protobuf:"bytes,5,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	Error          *Problem      `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	Authorizations []string      `protobuf:"bytes,7,rep,name=authorizations,proto3" json:"authorizations,omitempty"`
	Finalize       string        `protobuf:"bytes,8,opt,name=finalize,proto3" json:"finalize,omitempty"`
	Certificate    string        `protobuf:"bytes,9,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{32}
}

func (x *Order) GetStatus() Order_Status {
	if x != nil {
		return x.Status
	}
	return Order_STATUS_UNSPECIFIED
}

func (x *Order) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *Order) GetIdentifiers() []*Identifier {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Order) GetNotBefore() string {
	if x != nil {
		return x.NotBefore
	}
	return ""
}

func (x *Order) GetNotAfter() string {
	if x != nil {
		return x.NotAfter
	}
	return ""
}

func (x *Order) GetError() *Problem {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Order) GetAuthorizations() []string {
	if x != nil {
		return x.Authorizations
	}
	return nil
}

func (x *Order) GetFinalize() string {
	if x != nil {
		return x.Finalize
	}
	return ""
}

func (x *Order) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Title       string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Status      uint32                `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Detail      string                `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Instance    string                `protobuf:"bytes,5,opt,name=instance,proto3" json:"instance,omitempty"`
	Subproblems []*Problem_Subproblem `protobuf:"bytes,6,rep,name=subproblems,proto3" json:"subproblems,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{33}
}

func (x *Problem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Problem) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Problem) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Problem) GetSubproblems() []*Problem_Subproblem {
	if x != nil {
		return x.Subproblems
	}
	return nil
}

type Problem_Subproblem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Detail     string      `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	Identifier *Identifier `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *Problem_Subproblem) Reset() {
	*x = Problem_Subproblem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_powerssl_controller_v1_acme_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem_Subproblem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem_Subproblem) ProtoMessage() {}

func (x *Problem_Subproblem) ProtoReflect() protoreflect.Message {
	mi := &file_powerssl_controller_v1_acme_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem_Subproblem.ProtoReflect.Descriptor instead.
func (*Problem_Subproblem) Descriptor() ([]byte, []int) {
	return file_powerssl_controller_v1_acme_proto_rawDescGZIP(), []int{33, 0}
}

func (x *Problem_Subproblem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Problem_Subproblem) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Problem_Subproblem) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

var File_powerssl_controller_v1_acme_proto protoreflect.FileDescriptor

var file_powerssl_controller_v1_acme_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x73, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x23, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5e,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5e,
	0x0a, 0x1e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5f,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22,
	0x5f, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22,
	0x5d, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5f,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22,
	0x5f, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x5a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x65, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22,
	0x65, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x69, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x22, 0x69, 0x0a, 0x29, 0x53, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x62, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x62, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x23, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x60,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x60, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x22, 0x63, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x91, 0x02, 0x0a,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03,
	0x22, 0x84, 0x03, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x70, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x22, 0xfe, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x30, 0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4e, 0x53, 0x5f, 0x30, 0x31, 0x10,
	0x02, 0x22, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10,
	0x01, 0x22, 0xe0, 0x03, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x60, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x05, 0x22, 0xcb, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x1a, 0x7c, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x42,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x32, 0xd5, 0x19, 0x0a, 0x0b, 0x41, 0x43, 0x4d, 0x45, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a,
	0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x3b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x1a, 0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x35, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x1a, 0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x3d, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1e, 0x53, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x41, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x22, 0x53, 0x65, 0x74, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x7a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a,
	0x3a, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1b, 0x53,
	0x65, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x72,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7c, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x3b,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x76, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x38,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x47,
	0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x3b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x73, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x24, 0x5a, 0x22, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x73, 0x6c, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_powerssl_controller_v1_acme_proto_rawDescOnce sync.Once
	file_powerssl_controller_v1_acme_proto_rawDescData = file_powerssl_controller_v1_acme_proto_rawDesc
)

func file_powerssl_controller_v1_acme_proto_rawDescGZIP() []byte {
	file_powerssl_controller_v1_acme_proto_rawDescOnce.Do(func() {
		file_powerssl_controller_v1_acme_proto_rawDescData = protoimpl.X.CompressGZIP(file_powerssl_controller_v1_acme_proto_rawDescData)
	})
	return file_powerssl_controller_v1_acme_proto_rawDescData
}

var file_powerssl_controller_v1_acme_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_powerssl_controller_v1_acme_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_powerssl_controller_v1_acme_proto_goTypes = []interface{}{
	(Account_Status)(0),                               // 0: powerssl.controller.v1.Account.Status
	(Authorization_Status)(0),                         // 1: powerssl.controller.v1.Authorization.Status
	(Challenge_Type)(0),                               // 2: powerssl.controller.v1.Challenge.Type
	(Challenge_Status)(0),                             // 3: powerssl.controller.v1.Challenge.Status
	(Identifier_Type)(0),                              // 4: powerssl.controller.v1.Identifier.Type
	(Order_Status)(0),                                 // 5: powerssl.controller.v1.Order.Status
	(*GetCreateAccountRequestResponse)(nil),           // 6: powerssl.controller.v1.GetCreateAccountRequestResponse
	(*SetCreateAccountResponseRequest)(nil),           // 7: powerssl.controller.v1.SetCreateAccountResponseRequest
	(*GetDeactivateAccountRequestResponse)(nil),       // 8: powerssl.controller.v1.GetDeactivateAccountRequestResponse
	(*SetDeactivateAccountResponseRequest)(nil),       // 9: powerssl.controller.v1.SetDeactivateAccountResponseRequest
	(*GetRekeyAccountRequestResponse)(nil),            // 10: powerssl.controller.v1.GetRekeyAccountRequestResponse
	(*SetRekeyAccountResponseRequest)(nil),            // 11: powerssl.controller.v1.SetRekeyAccountResponseRequest
	(*GetUpdateAccountRequestResponse)(nil),           // 12: powerssl.controller.v1.GetUpdateAccountRequestResponse
	(*SetUpdateAccountResponseRequest)(nil),           // 13: powerssl.controller.v1.SetUpdateAccountResponseRequest
	(*GetCreateOrderRequestResponse)(nil),             // 14: powerssl.controller.v1.GetCreateOrderRequestResponse
	(*SetCreateOrderResponseRequest)(nil),             // 15: powerssl.controller.v1.SetCreateOrderResponseRequest
	(*GetFinalizeOrderRequestResponse)(nil),           // 16: powerssl.controller.v1.GetFinalizeOrderRequestResponse
	(*SetFinalizeOrderResponseRequest)(nil),           // 17: powerssl.controller.v1.SetFinalizeOrderResponseRequest
	(*GetGetOrderRequestResponse)(nil),                // 18: powerssl.controller.v1.GetGetOrderRequestResponse
	(*SetGetOrderResponseRequest)(nil),                // 19: powerssl.controller.v1.SetGetOrderResponseRequest
	(*GetCreateAuthorizationRequestResponse)(nil),     // 20: powerssl.controller.v1.GetCreateAuthorizationRequestResponse
	(*SetCreateAuthorizationResponseRequest)(nil),     // 21: powerssl.controller.v1.SetCreateAuthorizationResponseRequest
	(*GetDeactivateAuthorizationRequestResponse)(nil), // 22: powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse
	(*SetDeactivateAuthorizationResponseRequest)(nil), // 23: powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest
	(*GetGetAuthorizationRequestResponse)(nil),        // 24: powerssl.controller.v1.GetGetAuthorizationRequestResponse
	(*SetGetAuthorizationResponseRequest)(nil),        // 25: powerssl.controller.v1.SetGetAuthorizationResponseRequest
	(*GetGetChallengeRequestResponse)(nil),            // 26: powerssl.controller.v1.GetGetChallengeRequestResponse
	(*SetGetChallengeResponseRequest)(nil),            // 27: powerssl.controller.v1.SetGetChallengeResponseRequest
	(*GetValidateChallengeRequestResponse)(nil),       // 28: powerssl.controller.v1.GetValidateChallengeRequestResponse
	(*SetValidateChallengeResponseRequest)(nil),       // 29: powerssl.controller.v1.SetValidateChallengeResponseRequest
	(*GetGetCertificateRequestResponse)(nil),          // 30: powerssl.controller.v1.GetGetCertificateRequestResponse
	(*SetGetCertificateResponseRequest)(nil),          // 31: powerssl.controller.v1.SetGetCertificateResponseRequest
	(*GetRevokeCertificateRequestResponse)(nil),       // 32: powerssl.controller.v1.GetRevokeCertificateRequestResponse
	(*SetRevokeCertificateResponseRequest)(nil),       // 33: powerssl.controller.v1.SetRevokeCertificateResponseRequest
	(*Account)(nil),                                   // 34: powerssl.controller.v1.Account
	(*Authorization)(nil),                             // 35: powerssl.controller.v1.Authorization
	(*Challenge)(nil),                                 // 36: powerssl.controller.v1.Challenge
	(*Identifier)(nil),                                // 37: powerssl.controller.v1.Identifier
	(*Order)(nil),                                     // 38: powerssl.controller.v1.Order
	(*Problem)(nil),                                   // 39: powerssl.controller.v1.Problem
	(*Problem_Subproblem)(nil),                        // 40: powerssl.controller.v1.Problem.Subproblem
	(*Activity)(nil),                                  // 41: powerssl.controller.v1.Activity
	(*Error)(nil),                                     // 42: powerssl.controller.v1.Error
	(*emptypb.Empty)(nil),                             // 43: google.protobuf.Empty
}
var file_powerssl_controller_v1_acme_proto_depIdxs = []int32{
	41, // 0: powerssl.controller.v1.GetCreateAccountRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 1: powerssl.controller.v1.SetCreateAccountResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	34, // 2: powerssl.controller.v1.SetCreateAccountResponseRequest.account:type_name -> powerssl.controller.v1.Account
	42, // 3: powerssl.controller.v1.SetCreateAccountResponseRequest.error:type_name -> powerssl.controller.v1.Error
	41, // 4: powerssl.controller.v1.GetDeactivateAccountRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 5: powerssl.controller.v1.SetDeactivateAccountResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 6: powerssl.controller.v1.GetRekeyAccountRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 7: powerssl.controller.v1.SetRekeyAccountResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 8: powerssl.controller.v1.GetUpdateAccountRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 9: powerssl.controller.v1.SetUpdateAccountResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 10: powerssl.controller.v1.GetCreateOrderRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 11: powerssl.controller.v1.SetCreateOrderResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 12: powerssl.controller.v1.GetFinalizeOrderRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 13: powerssl.controller.v1.SetFinalizeOrderResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 14: powerssl.controller.v1.GetGetOrderRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 15: powerssl.controller.v1.SetGetOrderResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 16: powerssl.controller.v1.GetCreateAuthorizationRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 17: powerssl.controller.v1.SetCreateAuthorizationResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 18: powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 19: powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 20: powerssl.controller.v1.GetGetAuthorizationRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 21: powerssl.controller.v1.SetGetAuthorizationResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 22: powerssl.controller.v1.GetGetChallengeRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 23: powerssl.controller.v1.SetGetChallengeResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 24: powerssl.controller.v1.GetValidateChallengeRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 25: powerssl.controller.v1.SetValidateChallengeResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 26: powerssl.controller.v1.GetGetCertificateRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 27: powerssl.controller.v1.SetGetCertificateResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	41, // 28: powerssl.controller.v1.GetRevokeCertificateRequestResponse.activity:type_name -> powerssl.controller.v1.Activity
	41, // 29: powerssl.controller.v1.SetRevokeCertificateResponseRequest.activity:type_name -> powerssl.controller.v1.Activity
	0,  // 30: powerssl.controller.v1.Account.status:type_name -> powerssl.controller.v1.Account.Status
	37, // 31: powerssl.controller.v1.Authorization.identifier:type_name -> powerssl.controller.v1.Identifier
	1,  // 32: powerssl.controller.v1.Authorization.status:type_name -> powerssl.controller.v1.Authorization.Status
	36, // 33: powerssl.controller.v1.Authorization.challenges:type_name -> powerssl.controller.v1.Challenge
	2,  // 34: powerssl.controller.v1.Challenge.type:type_name -> powerssl.controller.v1.Challenge.Type
	3,  // 35: powerssl.controller.v1.Challenge.status:type_name -> powerssl.controller.v1.Challenge.Status
	39, // 36: powerssl.controller.v1.Challenge.error:type_name -> powerssl.controller.v1.Problem
	4,  // 37: powerssl.controller.v1.Identifier.type:type_name -> powerssl.controller.v1.Identifier.Type
	5,  // 38: powerssl.controller.v1.Order.status:type_name -> powerssl.controller.v1.Order.Status
	37, // 39: powerssl.controller.v1.Order.identifiers:type_name -> powerssl.controller.v1.Identifier
	39, // 40: powerssl.controller.v1.Order.error:type_name -> powerssl.controller.v1.Problem
	40, // 41: powerssl.controller.v1.Problem.subproblems:type_name -> powerssl.controller.v1.Problem.Subproblem
	37, // 42: powerssl.controller.v1.Problem.Subproblem.identifier:type_name -> powerssl.controller.v1.Identifier
	41, // 43: powerssl.controller.v1.ACMEService.GetCreateAccountRequest:input_type -> powerssl.controller.v1.Activity
	7,  // 44: powerssl.controller.v1.ACMEService.SetCreateAccountResponse:input_type -> powerssl.controller.v1.SetCreateAccountResponseRequest
	41, // 45: powerssl.controller.v1.ACMEService.GetDeactivateAccountRequest:input_type -> powerssl.controller.v1.Activity
	9,  // 46: powerssl.controller.v1.ACMEService.SetDeactivateAccountResponse:input_type -> powerssl.controller.v1.SetDeactivateAccountResponseRequest
	41, // 47: powerssl.controller.v1.ACMEService.GetRekeyAccountRequest:input_type -> powerssl.controller.v1.Activity
	11, // 48: powerssl.controller.v1.ACMEService.SetRekeyAccountResponse:input_type -> powerssl.controller.v1.SetRekeyAccountResponseRequest
	41, // 49: powerssl.controller.v1.ACMEService.GetUpdateAccountRequest:input_type -> powerssl.controller.v1.Activity
	13, // 50: powerssl.controller.v1.ACMEService.SetUpdateAccountResponse:input_type -> powerssl.controller.v1.SetUpdateAccountResponseRequest
	41, // 51: powerssl.controller.v1.ACMEService.GetCreateOrderRequest:input_type -> powerssl.controller.v1.Activity
	15, // 52: powerssl.controller.v1.ACMEService.SetCreateOrderResponse:input_type -> powerssl.controller.v1.SetCreateOrderResponseRequest
	41, // 53: powerssl.controller.v1.ACMEService.GetFinalizeOrderRequest:input_type -> powerssl.controller.v1.Activity
	17, // 54: powerssl.controller.v1.ACMEService.SetFinalizeOrderResponse:input_type -> powerssl.controller.v1.SetFinalizeOrderResponseRequest
	41, // 55: powerssl.controller.v1.ACMEService.GetGetOrderRequest:input_type -> powerssl.controller.v1.Activity
	19, // 56: powerssl.controller.v1.ACMEService.SetGetOrderResponse:input_type -> powerssl.controller.v1.SetGetOrderResponseRequest
	41, // 57: powerssl.controller.v1.ACMEService.GetCreateAuthorizationRequest:input_type -> powerssl.controller.v1.Activity
	21, // 58: powerssl.controller.v1.ACMEService.SetCreateAuthorizationResponse:input_type -> powerssl.controller.v1.SetCreateAuthorizationResponseRequest
	41, // 59: powerssl.controller.v1.ACMEService.GetDeactivateAuthorizationRequest:input_type -> powerssl.controller.v1.Activity
	23, // 60: powerssl.controller.v1.ACMEService.SetDeactivateAuthorizationResponse:input_type -> powerssl.controller.v1.SetDeactivateAuthorizationResponseRequest
	41, // 61: powerssl.controller.v1.ACMEService.GetGetAuthorizationRequest:input_type -> powerssl.controller.v1.Activity
	25, // 62: powerssl.controller.v1.ACMEService.SetGetAuthorizationResponse:input_type -> powerssl.controller.v1.SetGetAuthorizationResponseRequest
	41, // 63: powerssl.controller.v1.ACMEService.GetGetChallengeRequest:input_type -> powerssl.controller.v1.Activity
	27, // 64: powerssl.controller.v1.ACMEService.SetGetChallengeResponse:input_type -> powerssl.controller.v1.SetGetChallengeResponseRequest
	41, // 65: powerssl.controller.v1.ACMEService.GetValidateChallengeRequest:input_type -> powerssl.controller.v1.Activity
	29, // 66: powerssl.controller.v1.ACMEService.SetValidateChallengeResponse:input_type -> powerssl.controller.v1.SetValidateChallengeResponseRequest
	41, // 67: powerssl.controller.v1.ACMEService.GetGetCertificateRequest:input_type -> powerssl.controller.v1.Activity
	31, // 68: powerssl.controller.v1.ACMEService.SetGetCertificateResponse:input_type -> powerssl.controller.v1.SetGetCertificateResponseRequest
	41, // 69: powerssl.controller.v1.ACMEService.GetRevokeCertificateRequest:input_type -> powerssl.controller.v1.Activity
	33, // 70: powerssl.controller.v1.ACMEService.SetRevokeCertificateResponse:input_type -> powerssl.controller.v1.SetRevokeCertificateResponseRequest
	6,  // 71: powerssl.controller.v1.ACMEService.GetCreateAccountRequest:output_type -> powerssl.controller.v1.GetCreateAccountRequestResponse
	43, // 72: powerssl.controller.v1.ACMEService.SetCreateAccountResponse:output_type -> google.protobuf.Empty
	8,  // 73: powerssl.controller.v1.ACMEService.GetDeactivateAccountRequest:output_type -> powerssl.controller.v1.GetDeactivateAccountRequestResponse
	43, // 74: powerssl.controller.v1.ACMEService.SetDeactivateAccountResponse:output_type -> google.protobuf.Empty
	10, // 75: powerssl.controller.v1.ACMEService.GetRekeyAccountRequest:output_type -> powerssl.controller.v1.GetRekeyAccountRequestResponse
	43, // 76: powerssl.controller.v1.ACMEService.SetRekeyAccountResponse:output_type -> google.protobuf.Empty
	12, // 77: powerssl.controller.v1.ACMEService.GetUpdateAccountRequest:output_type -> powerssl.controller.v1.GetUpdateAccountRequestResponse
	43, // 78: powerssl.controller.v1.ACMEService.SetUpdateAccountResponse:output_type -> google.protobuf.Empty
	14, // 79: powerssl.controller.v1.ACMEService.GetCreateOrderRequest:output_type -> powerssl.controller.v1.GetCreateOrderRequestResponse
	43, // 80: powerssl.controller.v1.ACMEService.SetCreateOrderResponse:output_type -> google.protobuf.Empty
	16, // 81: powerssl.controller.v1.ACMEService.GetFinalizeOrderRequest:output_type -> powerssl.controller.v1.GetFinalizeOrderRequestResponse
	43, // 82: powerssl.controller.v1.ACMEService.SetFinalizeOrderResponse:output_type -> google.protobuf.Empty
	18, // 83: powerssl.controller.v1.ACMEService.GetGetOrderRequest:output_type -> powerssl.controller.v1.GetGetOrderRequestResponse
	43, // 84: powerssl.controller.v1.ACMEService.SetGetOrderResponse:output_type -> google.protobuf.Empty
	20, // 85: powerssl.controller.v1.ACMEService.GetCreateAuthorizationRequest:output_type -> powerssl.controller.v1.GetCreateAuthorizationRequestResponse
	43, // 86: powerssl.controller.v1.ACMEService.SetCreateAuthorizationResponse:output_type -> google.protobuf.Empty
	22, // 87: powerssl.controller.v1.ACMEService.GetDeactivateAuthorizationRequest:output_type -> powerssl.controller.v1.GetDeactivateAuthorizationRequestResponse
	43, // 88: powerssl.controller.v1.ACMEService.SetDeactivateAuthorizationResponse:output_type -> google.protobuf.Empty
	24, // 89: powerssl.controller.v1.ACMEService.GetGetAuthorizationRequest:output_type -> powerssl.controller.v1.GetGetAuthorizationRequestResponse
	43, // 90: powerssl.controller.v1.ACMEService.SetGetAuthorizationResponse:output_type -> google.protobuf.Empty
	26, // 91: powerssl.controller.v1.ACMEService.GetGetChallengeRequest:output_type -> powerssl.controller.v1.GetGetChallengeRequestResponse
	43, // 92: powerssl.controller.v1.ACMEService.SetGetChallengeResponse:output_type -> google.protobuf.Empty
	28, // 93: powerssl.controller.v1.ACMEService.GetValidateChallengeRequest:output_type -> powerssl.controller.v1.GetValidateChallengeRequestResponse
	43, // 94: powerssl.controller.v1.ACMEService.SetValidateChallengeResponse:output_type -> google.protobuf.Empty
	30, // 95: powerssl.controller.v1.ACMEService.GetGetCertificateRequest:output_type -> powerssl.controller.v1.GetGetCertificateRequestResponse
	43, // 96: powerssl.controller.v1.ACMEService.SetGetCertificateResponse:output_type -> google.protobuf.Empty
	32, // 97: powerssl.controller.v1.ACMEService.GetRevokeCertificateRequest:output_type -> powerssl.controller.v1.GetRevokeCertificateRequestResponse
	43, // 98: powerssl.controller.v1.ACMEService.SetRevokeCertificateResponse:output_type -> google.protobuf.Empty
	71, // [71:99] is the sub-list for method output_type
	43, // [43:71] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_powerssl_controller_v1_acme_proto_init() }
func file_powerssl_controller_v1_acme_proto_init() {
	if File_powerssl_controller_v1_acme_proto != nil {
		return
	}
	file_powerssl_controller_v1_meta_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_powerssl_controller_v1_acme_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCreateAccountRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCreateAccountResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeactivateAccountRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeactivateAccountResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRekeyAccountRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRekeyAccountResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateAccountRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpdateAccountResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCreateOrderRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCreateOrderResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinalizeOrderRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFinalizeOrderResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGetOrderRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGetOrderResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCreateAuthorizationRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCreateAuthorizationResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeactivateAuthorizationRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeactivateAuthorizationResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGetAuthorizationRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGetAuthorizationResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGetChallengeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGetChallengeResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidateChallengeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetValidateChallengeResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGetCertificateRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGetCertificateResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevokeCertificateRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRevokeCertificateResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_powerssl_controller_v1_acme_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem_Subproblem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_powerssl_controller_v1_acme_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_powerssl_controller_v1_acme_proto_goTypes,
		DependencyIndexes: file_powerssl_controller_v1_acme_proto_depIdxs,
		EnumInfos:         file_powerssl_controller_v1_acme_proto_enumTypes,
		MessageInfos:      file_powerssl_controller_v1_acme_proto_msgTypes,
	}.Build()
	File_powerssl_controller_v1_acme_proto = out.File
	file_powerssl_controller_v1_acme_proto_rawDesc = nil
	file_powerssl_controller_v1_acme_proto_goTypes = nil
	file_powerssl_controller_v1_acme_proto_depIdxs = nil
}
