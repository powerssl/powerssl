openapi: 3.0.0
info:
  title: powerssl/apiserver/v1/certificate.proto
  version: v1
paths:
  /v1/certificates:
    get:
      summary: |-
        Lists certificates. The order is unspecified but deterministic. Newly
        created certificates will not necessarily be added to the end of this list.
      operationId: List
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListCertificatesResponse'
      parameters:
      - name: page_size
        description: |-
          Requested page size. Server may return fewer certificates than requested.
          If unspecified, server will pick an appropriate default.
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: page_token
        description: |-
          A token identifying a page of results the server should return.
          Typically, this is the value of
          [ListCertificatesResponse.next_page_token][powerssl.apiserver.v1.ListCertificatesResponse.next_page_token].
          returned from the previous call to `List` method.
        in: query
        required: false
        schema:
          type: string
      tags:
      - CertificateService
      security:
      - bearerAuth: []
    post:
      summary: Creates a certificate, and returns the new Certificate.
      operationId: Create
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Certificate'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateCertificateRequest'
        required: true
      tags:
      - CertificateService
      security:
      - bearerAuth: []
  /v1/{name}:
    get:
      summary: Gets a certificate. Returns NOT_FOUND if the certificate does not exist.
      operationId: Get
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Certificate'
      parameters:
      - name: name
        description: The name of the certificate to retrieve.
        in: path
        required: true
        example: certificates/*
        schema:
          type: string
          pattern: ^certificates\/\w+$
      tags:
      - CertificateService
      security:
      - bearerAuth: []
    delete:
      summary: Deletes a certificate. Returns NOT_FOUND if the certificate does not
        exist.
      operationId: Delete
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                properties: {}
      parameters:
      - name: name
        description: The name of the certificate to delete.
        in: path
        required: true
        example: certificates/*
        schema:
          type: string
          pattern: ^certificates\/\w+$
      tags:
      - CertificateService
      security:
      - bearerAuth: []
    put:
      summary: |-
        Updates a certificate. Returns INVALID_ARGUMENT if the name of the
        certificate is non-empty and does equal the previous name.
      operationId: Update
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Certificate'
      parameters:
      - name: name
        description: The name of the certificate to update.
        in: path
        required: true
        example: certificates/*
        schema:
          type: string
          pattern: ^certificates\/\w+$
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateCertificateRequest'
        required: true
      tags:
      - CertificateService
      security:
      - bearerAuth: []
components:
  schemas:
    protobufFieldMask:
      type: object
      properties:
        paths:
          type: array
          items:
            type: string
          description: The set of field mask paths.
      description: |-
        paths: "f.a"
            paths: "f.b.d"

        Here `f` represents a field in some root message, `a` and `b`
        fields in the message found in `f`, and `d` a field found in the
        message in `f.b`.

        Field masks are used to specify a subset of fields that should be
        returned by a get operation or modified by an update operation.
        Field masks also have a custom JSON encoding (see below).

        # Field Masks in Projections

        When used in the context of a projection, a response message or
        sub-message is filtered by the API to only contain those fields as
        specified in the mask. For example, if the mask in the previous
        example is applied to a response message as follows:

            f {
              a : 22
              b {
                d : 1
                x : 2
              }
              y : 13
            }
            z: 8

        The result will not contain specific values for fields x,y and z
        (their value will be set to the default, and omitted in proto text
        output):


            f {
              a : 22
              b {
                d : 1
              }
            }

        A repeated field is not allowed except at the last position of a
        paths string.

        If a FieldMask object is not present in a get operation, the
        operation applies to all fields (as if a FieldMask of all fields
        had been specified).

        Note that a field mask does not necessarily apply to the
        top-level response message. In case of a REST get operation, the
        field mask applies directly to the response, but in case of a REST
        list operation, the mask instead applies to each individual message
        in the returned resource list. In case of a REST custom method,
        other definitions may be used. Where the mask applies will be
        clearly documented together with its declaration in the API.  In
        any case, the effect on the returned resource/resources is required
        behavior for APIs.

        # Field Masks in Update Operations

        A field mask in update operations specifies which fields of the
        targeted resource are going to be updated. The API is required
        to only change the values of the fields as specified in the mask
        and leave the others untouched. If a resource is passed in to
        describe the updated values, the API ignores the values of all
        fields not covered by the mask.

        If a repeated field is specified for an update operation, new values will
        be appended to the existing repeated field in the target resource. Note that
        a repeated field is only allowed in the last position of a `paths` string.

        If a sub-message is specified in the last position of the field mask for an
        update operation, then new value will be merged into the existing sub-message
        in the target resource.

        For example, given the target message:

            f {
              b {
                d: 1
                x: 2
              }
              c: [1]
            }

        And an update message:

            f {
              b {
                d: 10
              }
              c: [2]
            }

        then if the field mask is:

         paths: ["f.b", "f.c"]

        then the result will be:

            f {
              b {
                d: 10
                x: 2
              }
              c: [1, 2]
            }

        An implementation may provide options to override this default behavior for
        repeated and message fields.

        In order to reset a field's value to the default, the field must
        be in the mask and set to the default value in the provided resource.
        Hence, in order to reset all fields of a resource, provide a default
        instance of the resource and set all fields in the mask, or do
        not provide a mask as described below.

        If a field mask is not present on update, the operation applies to
        all fields (as if a field mask of all fields has been specified).
        Note that in the presence of schema evolution, this may mean that
        fields the client does not know and has therefore not filled into
        the request will be reset to their default. If this is unwanted
        behavior, a specific service may require a client to always specify
        a field mask, producing an error if not.

        As with get operations, the location of the resource which
        describes the updated values in the request message depends on the
        operation kind. In any case, the effect of the field mask is
        required to be honored by the API.

        ## Considerations for HTTP REST

        The HTTP kind of an update operation which uses a field mask must
        be set to PATCH instead of PUT in order to satisfy HTTP semantics
        (PUT must only be used for full updates).

        # JSON Encoding of Field Masks

        In JSON, a field mask is encoded as a single string where paths are
        separated by a comma. Fields name in each path are converted
        to/from lower-camel naming conventions.

        As an example, consider the following message declarations:

            message Profile {
              User user = 1;
              Photo photo = 2;
            }
            message User {
              string display_name = 1;
              string address = 2;
            }

        In proto a field mask for `Profile` may look as such:

            mask {
              paths: "user.display_name"
              paths: "photo"
            }

        In JSON, the same mask is represented as below:

            {
              mask: "user.displayName,photo"
            }

        # Field Masks and Oneof Fields

        Field masks treat fields in oneofs just as regular fields. Consider the
        following message:

            message SampleMessage {
              oneof test_oneof {
                string name = 4;
                SubMessage sub_message = 9;
              }
            }

        The field mask can be:

            mask {
              paths: "name"
            }

        Or:

            mask {
              paths: "sub_message"
            }

        Note that oneof type names ("test_oneof" in this case) cannot be used in
        paths.

        ## Field Mask Verification

        The implementation of any API method which has a FieldMask type field in the
        request should verify the included field paths, and return an
        `INVALID_ARGUMENT` error if any path is duplicated or unmappable.
      title: '`FieldMask` represents a set of symbolic field paths, for example:'
    v1Certificate:
      type: object
      properties:
        name:
          type: string
          description: |-
            The resource name of the certificate.
            Certificate names have the form `certificates/{certificate_id}`.
            The name is ignored when creating a certificate.
        create_time:
          type: string
          format: date-time
        update_time:
          type: string
          format: date-time
        display_name:
          type: string
        title:
          type: string
        description:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        dnsnames:
          type: array
          items:
            type: string
        key_algorithm:
          $ref: '#/components/schemas/v1KeyAlgorithm'
        key_size:
          type: integer
          format: int32
        digest_algorithm:
          $ref: '#/components/schemas/v1DigestAlgorithm'
        auto_renew:
          type: boolean
          format: boolean
      description: A Certificate ...
    v1CreateCertificateRequest:
      type: object
      properties:
        certificate:
          $ref: '#/components/schemas/v1Certificate'
      description: Request message for CertificateService.Create.
    v1DigestAlgorithm:
      type: string
      enum:
      - DIGEST_ALGORITHM_UNSPECIFIED
      - SHA1
      - SHA256
      default: DIGEST_ALGORITHM_UNSPECIFIED
    v1KeyAlgorithm:
      type: string
      enum:
      - KEY_ALGORITHM_UNSPECIFIED
      - RSA
      default: KEY_ALGORITHM_UNSPECIFIED
    v1ListCertificatesResponse:
      type: object
      properties:
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/v1Certificate'
          description: The list of certificates.
        next_page_token:
          type: string
          description: |-
            A token to retrieve next page of results.
            Pass this value in the
            [ListCertificatesRequest.page_token][powerssl.apiserver.v1.ListCertificatesRequest.page_token]
            field in the subsequent call to `List` method to retrieve the next
            page of results.
      description: Response message for CertificateService.List.
    v1UpdateCertificateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the certificate to update.
        update_mask:
          $ref: '#/components/schemas/protobufFieldMask'
        certificate:
          $ref: '#/components/schemas/v1Certificate'
      description: Request message for CertificateService.Update.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
