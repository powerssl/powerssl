openapi: 3.0.0
info:
  title: powerssl/apiserver/v1/certificate.proto
  version: v1
tags:
  - name: CertificateService
paths:
  /v1/certificates:
    get:
      summary: |-
        Lists certificates. The order is unspecified but deterministic. Newly
        created certificates will not necessarily be added to the end of this list.
      operationId: CertificateService_List
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListCertificatesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
        - name: pageToken
          description: |-
            A token identifying a page of results the server should return.
            Typically, this is the value of
            [ListCertificatesResponse.next_page_token][powerssl.apiserver.v1.ListCertificatesResponse.next_page_token].
            returned from the previous call to `List` method.
          in: query
          required: false
          schema:
            type: string
        - name: pageSize
          description: |-
            Requested page size. Server may return fewer certificates than requested.
            If unspecified, server will pick an appropriate default.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - CertificateService
      security:
        - bearerAuth: []
    post:
      summary: Creates a certificate, and returns the new Certificate.
      operationId: CertificateService_Create
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Certificate'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateCertificateRequest'
        required: true
      tags:
        - CertificateService
      security:
        - bearerAuth: []
  /v1/{name}:
    get:
      summary: Gets a certificate. Returns NOT_FOUND if the certificate does not exist.
      operationId: CertificateService_Get
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Certificate'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: name
          description: The name of the certificate to retrieve.
          in: path
          required: true
          example: certificates/*
          schema:
            type: string
            pattern: ^certificates\/\w+$
      tags:
        - CertificateService
      security:
        - bearerAuth: []
    delete:
      summary: Deletes a certificate. Returns NOT_FOUND if the certificate does not exist.
      operationId: CertificateService_Delete
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                properties: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: name
          description: The name of the certificate to delete.
          in: path
          required: true
          example: certificates/*
          schema:
            type: string
            pattern: ^certificates\/\w+$
      tags:
        - CertificateService
      security:
        - bearerAuth: []
    put:
      summary: |-
        Updates a certificate. Returns INVALID_ARGUMENT if the name of the
        certificate is non-empty and does equal the previous name.
      operationId: CertificateService_Update
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Certificate'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      parameters:
        - name: name
          description: The name of the certificate to update.
          in: path
          required: true
          example: certificates/*
          schema:
            type: string
            pattern: ^certificates\/\w+$
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                updateMask:
                  type: string
                  description: The field mask with paths to update.
                certificate:
                  $ref: '#/components/schemas/v1Certificate'
              description: Request message for CertificateService.Update.
        required: true
      tags:
        - CertificateService
      security:
        - bearerAuth: []
components:
  schemas:
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
      additionalProperties: {}
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1Certificate:
      type: object
      properties:
        name:
          type: string
          description: |-
            The resource name of the certificate.
            Certificate names have the form `certificates/{certificate_id}`.
            The name is ignored when creating a certificate.
        createTime:
          type: string
          format: date-time
        updateTime:
          type: string
          format: date-time
        displayName:
          type: string
        title:
          type: string
        description:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        dnsnames:
          type: array
          items:
            type: string
        keyAlgorithm:
          $ref: '#/components/schemas/v1KeyAlgorithm'
        keySize:
          type: integer
          format: int32
        digestAlgorithm:
          $ref: '#/components/schemas/v1DigestAlgorithm'
        autoRenew:
          type: boolean
      description: A Certificate ...
    v1CreateCertificateRequest:
      type: object
      properties:
        certificate:
          $ref: '#/components/schemas/v1Certificate'
      description: Request message for CertificateService.Create.
    v1DigestAlgorithm:
      type: string
      enum:
        - DIGEST_ALGORITHM_UNSPECIFIED
        - SHA1
        - SHA256
      default: DIGEST_ALGORITHM_UNSPECIFIED
    v1KeyAlgorithm:
      type: string
      enum:
        - KEY_ALGORITHM_UNSPECIFIED
        - RSA
      default: KEY_ALGORITHM_UNSPECIFIED
    v1ListCertificatesResponse:
      type: object
      properties:
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/v1Certificate'
          description: The list of certificates.
        nextPageToken:
          type: string
          description: |-
            A token to retrieve next page of results.
            Pass this value in the
            [ListCertificatesRequest.page_token][powerssl.apiserver.v1.ListCertificatesRequest.page_token]
            field in the subsequent call to `List` method to retrieve the next
            page of results.
      description: Response message for CertificateService.List.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
