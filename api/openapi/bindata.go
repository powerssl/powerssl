// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// powerssl/apiserver/v1/acme_account.yaml
// powerssl/apiserver/v1/acme_server.yaml
// powerssl/apiserver/v1/certificate.yaml
// powerssl/apiserver/v1/certificate_issue.yaml
// powerssl/apiserver/v1/user.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _powersslApiserverV1Acme_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x6f\xdb\x46\x0c\x7e\xd7\x5f\x41\x74\x01\x0a\x74\x68\x94\xb4\x6f\x7a\xf3\xba\x1f\xd8\xb0\x6e\x45\x9d\x62\x0f\xcb\x56\x9c\x4f\xb4\x73\xad\x74\x77\x25\x29\x37\x5e\x91\xff\x7d\xd0\xaf\xe8\x14\xcb\x91\x9d\xa6\x09\xda\x38\x0f\x81\x25\x7d\xe2\x7d\x24\x3f\xf2\x78\x72\x1e\xad\xf2\x26\x81\xe7\x87\x47\x87\x47\x91\xb1\x73\x97\x44\x00\x62\x24\xc3\x04\xbc\xfb\x88\xc4\x9c\xc5\xca\x1b\x46\x5a\x22\xc5\xcb\xe3\x58\xe9\x1c\xdf\x2a\xad\x5d\x61\xe5\xd0\x93\x13\x17\x01\x2c\x91\xd8\x38\x9b\xc0\xf2\x38\x12\xb5\xe0\xd2\xca\x53\xb0\x2a\xc7\x04\x26\x2f\x5e\xfe\x34\xa9\xf1\x53\xa4\xa5\xd1\x18\x79\x25\x67\x15\xa6\x34\xf8\xa9\x84\x5d\x94\x57\x00\x0b\x94\xfa\x07\x80\xf3\x48\x4a\x8c\xb3\xbf\xa6\x43\x36\xde\xfe\x82\xd2\x20\x09\xd9\x3b\xcb\xc8\xed\xab\x00\x8f\x9e\x1d\x1d\x3d\xea\x2e\x01\x52\x64\x4d\xc6\x4b\x45\x72\x02\x5c\x68\x8d\xcc\xf3\x22\xbb\x7c\xfb\x30\x40\x6b\x67\x05\xad\x84\x06\x00\x94\xf7\x99\xd1\x15\xa5\xf8\x1d\x3b\xdb\x7f\x0a\xc0\xfa\x0c\x73\x75\xf5\x2e\xc0\x01\xe1\x3c\x81\xc7\xdf\xc5\xda\xe5\xde\x59\xb4\xc2\x71\x8d\xe5\x78\x79\x1c\x78\xf6\x38\xea\xd8\xce\x55\x91\xc9\x66\x07\x2c\x14\x16\xcf\x3d\x6a\xc1\x14\x90\xc8\xd1\xfd\xfa\x41\x5e\x4f\x45\x49\xc1\xad\x0f\x5e\x91\xca\x51\x90\x82\xa4\xb4\x82\x28\xff\x07\xd6\x8d\x4d\xa0\x14\x44\x70\x8b\xf0\x43\x61\x08\xd3\x04\x84\x8a\x10\x8b\xe7\x2a\xf7\xa5\x36\x4b\x15\x4e\x2b\x4d\x72\xfc\xa4\xd2\x64\x13\x44\x8e\x9f\x44\xd7\xfb\x22\x2b\x8f\x09\xb0\x90\xb1\x8b\xde\x03\xaf\x44\x90\x6c\x02\xff\x06\xd6\x4f\xe3\xd3\x8f\xdf\x9f\xf6\x56\xa8\x6e\x1d\x34\xaf\xb6\x6a\x6f\x5d\x1c\x50\x7b\x43\x05\x75\x41\x46\x56\x21\x78\x86\x8a\x90\x26\x85\x9c\x25\xf0\xf7\x3f\x51\x9d\xe7\x0c\x05\xb7\x2d\x82\x1f\x2b\xf4\xd7\x51\x07\x9e\x4a\x6f\xc4\x20\x27\xf0\xe9\x62\xaf\x75\x68\xb3\xf6\x60\xb5\xee\x8b\xad\xbb\xfd\x1b\x9f\xaa\xaf\x45\xe8\xfb\x86\x7f\x99\xf4\x6f\xb0\x08\x4a\xaa\xc8\xf2\x83\x4b\x03\x79\x0f\xc4\xfd\xfa\xa8\x0f\xc7\xfc\x7a\xe5\xd4\x35\x10\xe8\xe7\x75\x4d\xa5\x93\xd1\x60\x18\x6f\xb7\x6a\xab\x89\xcd\x2b\x42\x2b\x17\xbd\x20\xed\x3c\xc0\xfd\x6e\xf8\x9b\x98\xe0\x4a\x3f\x02\xf7\xf8\x75\x43\xe7\xa1\x54\x77\x2d\x86\x5b\xad\xef\xdb\x2f\xe8\x83\x35\xda\x1f\x0a\xa4\xd5\x15\xd6\x57\xef\x75\xb4\xe7\x2a\x63\xbc\x09\xad\x2e\x4a\x0b\x3c\x71\xef\xd1\xde\xed\x92\x53\xf3\xdf\xd5\xd6\x7b\x1b\x2b\x1a\x2b\xb8\x40\xea\x3d\x99\x3b\xca\x95\x54\xcf\x9e\x3f\xfb\x52\x13\x83\xe3\xad\xfb\xcb\x0b\xc2\xfd\xc8\xb0\x6f\x2a\x77\xd0\x54\xee\x6f\x24\xa8\x35\x7e\xaf\x23\x41\xc7\xab\x04\x35\xd4\x6a\x7c\xf5\x75\x68\x56\xcc\x27\xf6\xd2\x40\x1d\x65\x37\x7b\x87\xba\xcd\x6e\x70\x2e\x8c\xc2\x64\xbc\xa1\x2c\x0c\xc6\x60\x7e\x96\x2a\x2b\x70\x14\xd5\xf5\xa6\xd9\xaa\xe9\x08\x97\x62\xdc\x91\x98\x76\xe9\xc0\x7a\xeb\xed\x70\xa8\x19\x02\xe4\xc8\xac\x16\xe3\x84\x53\x14\x65\x32\x5e\xc7\x29\x22\xd5\xdb\xb4\x04\x73\xee\x4b\xe6\x3a\xc1\x04\x09\xa9\x15\xd2\xeb\x2d\x3b\x86\xa2\x2a\xd4\x31\x4f\x74\x25\xd0\x13\xb3\x05\xb4\x0b\x5a\x39\xe6\x3e\x15\x13\x1c\x1a\x8a\x6a\xf4\xfd\x6c\x33\xa9\x61\x9f\xa9\xd5\x1f\xdb\x30\xaf\x3f\x82\x8e\x67\xaa\x6b\xb9\x63\xd8\x4c\xcd\x70\x28\xa9\xbd\x48\x97\x7f\x2a\x4d\x4d\x69\x51\x65\xaf\x06\xe2\xbe\x99\x31\x52\xce\x7f\xce\x9b\x0a\x9e\x2c\x08\x31\x5d\x5f\x6d\xe6\x5c\x86\xca\xf6\xfa\x94\xd2\x72\x33\xb1\x0d\xf2\x68\x3e\x0e\x8f\xd5\xef\xe6\xee\xb5\xa3\x10\xeb\xbd\x62\x34\xfc\xc1\x61\x25\xc4\xee\xb8\xf5\x6e\x9e\xf7\x77\x64\xbd\x7e\x76\xda\x31\xf6\x37\x98\x19\x2c\x9e\xcb\xab\x76\x10\x1d\x49\xce\xa6\xd3\xe6\x97\xe8\x12\x75\x79\xbf\x54\xfc\xfe\x4e\xb2\xd8\xee\x6a\xd3\x12\xd0\x92\x0d\xb6\xb5\x9e\x87\x67\x22\xbe\xdd\x0d\x2b\x7c\xd2\x40\x9b\x9b\xf5\xc5\xcf\x4d\xcf\xf9\xed\xaf\x93\xe8\xff\x00\x00\x00\xff\xff\x10\x9c\xa3\x54\x56\x19\x00\x00")

func powersslApiserverV1Acme_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Acme_accountYaml,
		"powerssl/apiserver/v1/acme_account.yaml",
	)
}

func powersslApiserverV1Acme_accountYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Acme_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/acme_account.yaml", size: 6486, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1Acme_serverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6f\xdb\x36\x10\x7f\xd7\x5f\x71\xe8\x0a\x14\xd8\x50\xcb\x69\xdf\xf4\xe6\x75\x1f\xd8\xb0\x0e\x45\x9d\x62\x0f\xeb\x56\xd0\xd4\xd9\x66\x22\x91\xcc\xf1\xe4\xc4\x0b\xf2\xbf\x0f\xd4\x87\x45\xc7\xb2\x65\x27\xf3\x82\x1a\xd1\x83\x61\x89\xa7\xe3\xef\xee\x7e\xf7\x41\x19\x8b\x5a\x58\x95\xc0\xdb\xc1\x70\x30\x8c\x94\x9e\x9a\x24\x02\x60\xc5\x19\x26\x60\xcd\x35\x92\x73\x59\x2c\xac\x72\x48\x0b\xa4\x78\x71\x16\x0b\x99\xe3\x97\xea\x76\x60\xc9\xb0\x89\x00\x16\x48\x4e\x19\x9d\xc0\xe2\x2c\x62\x31\x73\x5e\xc9\x6b\xd0\x22\xc7\x04\x46\xef\xde\xff\x38\x2e\xc5\xfd\xaf\x92\x18\x59\xc1\xf3\x52\xa4\x51\x57\x2d\x97\x8f\x00\x66\xc8\xd5\x1f\x00\x63\x91\x04\x2b\xa3\x7f\x49\x3b\xf4\x7c\xf9\x4d\x39\xae\x25\x09\x9d\x35\xda\xa1\x6b\x5e\x05\x78\xf1\x66\x38\x7c\xd1\xde\x02\xa4\xe8\x24\x29\xcb\x25\xd0\x11\xb8\x42\x4a\x74\x6e\x5a\x64\xab\xb7\x07\x81\xb4\x34\x9a\x51\x73\xa8\x00\x40\x58\x9b\x29\x59\x42\x8a\x2f\x9c\xd1\xeb\xab\x00\x4e\xce\x31\x17\xf7\x9f\x02\xbc\x24\x9c\x26\xf0\xea\x9b\x58\x9a\xdc\x1a\x8d\x9a\x5d\x5c\xc9\xba\x78\x71\xe6\xed\x68\xad\x73\x1f\x6b\x34\xaf\xa2\x16\xf9\x54\x14\x19\x6f\x37\x46\x43\xa1\xf1\xc6\xa2\x64\x4c\x01\x89\x0c\x3d\xad\x4d\x64\xe5\x98\x05\x17\xae\xb1\xc1\x0a\x12\x39\xf2\x2a\xc8\xfe\x6a\x08\x72\x55\x20\x2d\x03\xf5\x4a\x6f\x3e\x23\xbc\x2a\x14\x61\x9a\xc0\x54\x64\x0e\xa3\xdd\xf0\x78\x69\x31\x01\xc7\xa4\xf4\x6c\x63\x3b\x2b\x66\x78\x6e\x2e\x51\xff\xbf\x5b\x8e\xd5\x3f\x78\x84\x1d\x95\x66\x9c\x21\xad\xad\x4c\x0d\xe5\x82\xcb\xb5\xb7\x6f\xea\x95\x26\x2b\x1b\x60\x9b\x59\x59\xef\x84\xb2\x20\xc5\xcb\x50\x76\x82\x82\x90\x46\x05\xcf\x13\xf8\xf3\xaf\x72\xc1\x1a\xb7\x6f\x96\xbe\x23\x14\x8c\xa7\x90\xa7\xad\x6d\xa7\x94\x9a\x9e\x75\xe8\xf8\x7b\x93\x06\x41\xef\x80\xb3\x1b\x4c\x37\x94\xdd\xfe\xac\x98\xd1\x7a\xf5\x63\x85\xa4\x75\x6e\x9b\x10\x4c\x05\x1e\x83\xc9\xbe\x03\xdd\xfa\x24\xbd\x3b\xb4\xf9\xfc\x8c\x27\xd1\x7b\x4e\x93\xd3\xbb\xda\x8d\xff\xbd\x57\x88\xfd\x40\xd2\x59\x87\x03\xda\xf9\x0b\x6f\x44\x6e\xfd\x64\x14\x0c\x2d\xf1\xb7\x0f\xe9\x0c\x15\x48\x66\x24\x9d\xc0\xdf\x81\xba\xcf\xf1\xe7\xeb\xef\x5e\x1e\xa7\x68\xa7\x98\x21\xe3\x9e\xfc\xfe\xa1\x14\xfe\x3a\x28\x6e\xc9\x1b\xc3\x0a\x5d\x02\xb7\x77\xcf\x3c\x86\x26\x6a\xa7\xc9\x63\x5b\xec\x5b\xa4\x3f\xd9\xf4\x79\xf6\x78\xe6\xf7\xb1\xf9\xfd\x74\x23\x54\x45\xf0\x27\x1c\xa1\x5a\x54\x5e\xa8\x06\x56\xc9\x97\x1f\x07\x26\xc5\x74\xa4\x57\x0a\x2a\x1f\x9b\xc9\x05\xca\x66\x7a\x0a\x6a\x77\x14\x86\xe2\x13\x65\xa1\x2b\x3a\xa3\xb3\x10\x59\x81\xbd\x52\xed\x81\x68\xb2\xac\x8b\xc1\x8a\x88\x07\x02\x93\x26\xed\xd8\x6f\xf3\x0c\xd6\x75\x02\x03\xc8\xd1\x39\x31\xeb\x07\x9c\x22\x0b\x95\xb9\x4d\x39\x41\x24\xd6\x4e\xca\x8c\xb9\x5b\x27\xcc\x2e\xba\x04\x01\xa9\x08\x12\x96\x95\x03\x3d\x51\xe6\x68\x9f\x21\xb2\x1c\xf0\xcf\xd5\x1e\xa2\xad\xcf\x3c\xa1\x5f\xb3\x0a\x92\xbf\x28\x49\xfe\x68\x35\xa9\x72\x36\x13\xcb\xdf\xf7\x41\x5e\x7d\x01\xeb\x0f\x54\x5b\x6d\xfb\x64\x33\x31\xc1\xae\x98\xae\x79\xda\x5f\x22\x4d\x95\xd7\x28\xb2\x0f\x1d\x7e\xdf\x8e\x45\x11\x4a\x36\xb4\xdc\x27\x71\x4a\xc6\x56\x8d\xb3\xd7\x1d\x5b\xcf\x69\x07\x32\xa6\x2d\x9e\xe1\x76\x87\x75\xbd\xad\xdf\xca\x1e\x8c\xe5\xbf\xcf\xb2\xee\x5e\xad\xf1\x86\x3f\x34\x5f\x9e\x7a\xfc\xbd\xa5\xa8\x1f\x23\x43\xab\xd4\x7a\x2f\xdc\x65\xaf\xe8\xe3\xe3\xd7\xb4\x93\xb1\x5f\x6f\xa0\x06\xfd\x64\xcd\xbe\x39\xb3\x6d\xda\x50\x29\x9f\xd4\xa2\xf5\xc3\xea\xe6\xa7\x3a\xdb\x7f\xfd\xe3\x3c\xfa\x37\x00\x00\xff\xff\x66\x84\x26\xa4\xcd\x16\x00\x00")

func powersslApiserverV1Acme_serverYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Acme_serverYaml,
		"powerssl/apiserver/v1/acme_server.yaml",
	)
}

func powersslApiserverV1Acme_serverYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Acme_serverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/acme_server.yaml", size: 5837, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1CertificateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\x38\x74\x05\x0a\x6c\x8d\x9c\xb4\xd8\x1e\xfc\xe6\x35\x69\xea\x35\x4d\x83\xd8\xd9\x30\xb4\x9d\x43\x4b\x27\x9b\x8d\x44\x2a\xe4\xc9\x8e\xda\xf5\xbb\x0f\x24\x25\x9b\xb2\x65\x3b\x49\xff\x04\xcd\xea\x87\x20\x92\x8e\xc7\xdf\x1d\xef\x77\x77\x24\x65\x86\x82\x65\xbc\x03\x4f\x83\xdd\x60\xb7\xc5\x45\x2c\x3b\x2d\x00\xe2\x94\x60\x07\x32\x39\x43\xa5\x75\xd2\x66\x19\xd7\xa8\xa6\xa8\xda\xd3\xbd\x76\x88\x8a\x78\xcc\x43\x46\x18\x64\x4a\x92\x6c\x01\x4c\x51\x69\x2e\x45\x07\xa6\x7b\x2d\x62\x63\x6d\x94\xec\x80\x60\x29\x76\xe0\xd9\x42\xbe\x8f\x6a\xca\x43\x6c\x65\x8c\x26\x56\x66\x49\x9f\x7d\x07\x30\x46\x72\xff\x00\xe8\x3c\x4d\x99\x2a\x3a\xf0\xef\x4e\xf9\x06\xe0\x88\x6b\xd2\xe0\x0f\x0b\x60\x30\x41\x90\x2a\x42\x05\x5c\x43\x2e\x74\x86\x21\x8f\x39\x46\x30\xca\x09\x22\x24\x54\x29\x17\x5c\x13\x0f\x03\x38\xc6\x59\x52\xcc\xb5\x85\x0a\x19\x61\x54\xd3\x07\x33\x9e\x24\x20\x24\x81\xc0\x10\xb5\x66\x8a\x27\x05\x8c\x10\x58\x14\x61\x04\x24\x81\x26\x08\x28\x22\x90\x31\xd0\x84\x6b\x48\xb8\xa6\xa0\xd4\x29\x33\x54\x8c\xb8\x14\xbd\xa8\xc9\xfa\xa1\xc1\x5f\x8a\x2a\xd4\x99\x14\xba\x32\xdc\xfc\x1e\x3c\xd9\xdd\x7d\xb0\x78\x04\x88\x50\x87\x8a\x67\x64\xfd\xdb\x05\x9d\x87\x06\x52\x9c\x27\xf3\xd1\x81\x27\x1d\x4a\x41\x28\xc8\x57\x00\xc0\xb2\x2c\x31\x10\xb8\x14\xed\xf7\x5a\x8a\xfa\x57\x00\x1d\x4e\x30\x65\xcb\x6f\x01\x1e\x2a\x8c\x3b\xf0\xe8\xa7\x76\x28\xd3\x4c\x0a\x14\xa4\xdb\x4e\x56\xb7\xa7\x7b\xc6\x0e\xcf\x3c\x7d\x5a\xc2\x79\xd4\x5a\x40\x8f\x59\x9e\xd0\x7a\x6b\x04\xe4\x02\xaf\x32\x0c\xcd\x0a\xa0\x52\x52\xdd\xad\x51\x2a\x0b\xfb\xc4\x28\xd7\x95\x0d\x19\x53\x2c\x35\xe1\xe3\xad\x50\x15\xd8\x97\x39\xaa\xc2\x53\xcf\xc5\xea\x3b\x85\x97\x39\x57\x18\x75\x20\x66\x89\xc6\xd6\x66\x78\x54\x64\xd8\x01\x4d\x8a\x8b\xf1\xca\x74\x19\x1b\xe3\x40\x5e\xa0\x58\xe7\x4d\x8f\x22\xe6\xd7\x05\x32\xd2\xc0\x23\x14\xc4\xe3\x82\x8b\x31\x30\xab\xc5\x44\xad\x42\x9d\x27\xa4\x6d\x20\x3b\x6e\x83\x9e\xc8\x3c\x89\x40\x21\xe5\x4a\x04\x35\x5d\x83\x22\xe3\x21\x4b\x92\xe2\xb1\x0b\x77\xee\x06\x4e\x59\x92\x1b\x6d\x35\xd9\x37\xeb\xe2\x22\x10\x78\x45\x43\x03\x60\x68\x91\xbd\x7b\x53\x25\x98\x60\x9e\x60\x82\xe9\x5e\x70\xed\xf1\x75\x8c\x0e\x37\x46\x10\x2b\x99\x5a\x78\x99\xc2\x29\x97\xb9\x06\x03\xdd\xb0\xf6\xdc\xa8\x3e\x87\x14\x69\x22\xa3\xe0\xdb\x2e\x5d\x9f\x7f\xc0\x6b\xae\xdc\x29\x5e\xe6\xa8\x0d\x25\xec\x6a\x69\xfe\x01\x03\xe8\xbb\x45\x4a\x59\x51\x5a\x0a\x31\xce\x50\xd5\xf3\x16\x4d\x98\xb0\xc0\xed\xf0\xba\x7f\x7a\xb1\x9f\x18\x1f\x57\xab\x6e\x53\x5d\xc6\xc3\x0b\x60\xc2\x70\x4a\xc9\x4c\x71\x46\x58\x91\xf7\x6b\xb8\x89\x0b\xc2\x31\xaa\xda\x97\x58\xaa\x94\x91\xfd\xf6\xf4\x49\xf9\xa5\x2a\x25\x95\x37\x1b\x4a\x49\x39\x15\x86\xb9\xe2\x54\xf8\xc2\x23\x64\x0a\x55\x37\xa7\x49\x07\xde\xbc\xb3\x1f\x32\xa9\x57\x2b\xcb\x33\x5b\x00\x34\x30\xdf\x95\x8f\x81\x89\x8a\x0a\x2e\xd6\x05\xce\xfc\xf9\xaf\x9b\xec\x9d\xf6\xfb\x90\xee\x3d\xe3\xee\x53\x86\x2f\xd9\xf2\xbb\x8c\xbc\xe8\x69\x80\xb3\x19\x4c\x33\x94\x2d\x0e\xb5\xa1\xe1\xb9\xb5\xe4\xfd\xc2\xbb\x0b\x6e\x91\xca\xf1\xab\x90\xc2\x74\x60\x1f\x4d\x96\xfa\xb4\xbe\xf7\x3a\x44\x5a\xa2\x47\x00\xa7\x25\x35\x8e\x5f\x0f\x86\xcf\x5f\x9f\x1d\xef\x03\x8f\x2d\x4f\x3c\x29\x88\x24\x6a\xdb\x46\xe1\xd5\x0d\xfa\xa3\x43\xbc\x17\xed\xd1\x3d\xe5\xcb\xa6\x8e\xc8\xfc\x5d\x67\x99\xe9\xd0\xcd\x77\xd7\x32\xd7\xe3\x84\xa4\x49\xb5\x8a\xe3\x14\x97\xcb\x8d\xd9\x2a\x34\x56\x1b\x8f\x11\xe6\x87\x57\x2c\xcd\xcc\xa6\xc5\xaf\x87\xed\x9f\x6f\x53\xb5\x9d\x95\x44\xa8\x44\x07\xfe\xf1\xf5\xbd\x6d\xbf\x9d\xfd\xf2\xf0\x2b\x15\xa7\x08\x13\x24\x5c\x21\xdf\xbe\x7d\xfd\x2d\xf9\xe7\x66\xfc\x3e\x28\x68\xda\x15\x63\x01\xea\x0e\x7c\xfc\xf4\x83\x66\xdb\x68\xe6\x82\xec\xff\x4b\xb2\x2c\xdf\x78\xb4\x70\x96\x45\xab\xbd\xe0\x82\x6c\xbd\xe3\x3f\xbb\x47\xbd\xfd\x61\xf7\xf4\xf0\xec\xd5\xc1\xf1\xa0\xe2\x9c\xe7\xf0\x45\x0b\xe1\x39\x9e\x1b\x16\x8a\x1d\x4c\x33\x2a\x6c\x63\x69\x89\x89\x97\x39\x4b\xea\x1b\x15\xa3\xe8\xba\x34\x75\x58\xbf\x0f\x9a\xfe\xa8\x94\xe5\xef\x0b\x50\x38\xb7\xeb\xfe\xfd\x50\xf8\xee\x1a\x6c\xc7\x90\x3b\x6d\xb0\x17\xb8\x8c\x50\x09\xcd\xc9\xdb\xb3\xd3\x51\x1e\x77\xc5\x5c\x81\x73\xb3\x1c\xbd\xc7\xb0\x6a\x81\xbd\x02\xd7\xf2\x57\xe3\x4c\x25\xbe\x33\x1a\x17\xc8\x1e\xcf\x6c\x95\x5a\x6c\xbd\x47\x45\x99\x4f\xe6\xa1\x7c\x43\x60\xa1\x8c\x1a\xe6\x5b\xdd\xed\x37\xed\xf5\x01\x52\xd4\x9a\x8d\xb7\x03\x8e\x90\x18\x4f\xf4\xaa\x1c\x53\x8a\xd5\x0e\xe4\x08\x53\x5d\x0f\x99\x4d\x01\xe3\x2d\x88\x8b\x90\x5a\x66\xba\xa1\x2b\x2c\xcd\xb7\xbb\x7e\xd3\x31\x90\xc9\x03\x0a\xb5\xcc\x55\xb8\x36\x21\xd4\x8f\x78\x3c\xb8\x76\x80\x86\x09\x9b\xa2\x1d\x63\x5c\x0e\xe7\x35\xd2\x7f\xf4\x9e\x86\x3c\xfa\x74\x1e\xac\x4c\x6f\x67\xe5\x1a\xf8\x58\x48\x85\x11\xcc\x26\x28\xdc\x89\xb9\x3b\x4d\x6c\x44\xe2\x4e\xd4\x07\xfc\x5a\x0e\xa8\x42\xc1\x30\x75\x87\xb8\x97\x15\x5d\x9e\xfb\x6c\x35\x11\xd7\x59\xc2\x8a\xe3\xeb\xac\x87\xbb\xf7\xd8\x1e\x7f\x8b\x35\xdb\x26\x9b\xb0\x11\x36\x85\x6a\x2d\x7e\xcc\x8f\x45\x11\x37\x1a\x59\x72\xd2\x10\x4d\xeb\xb1\x08\x6d\x17\xfa\x56\x64\x68\xd4\x78\x81\x45\x37\x19\x4b\xc5\x69\x92\xfa\xe2\x9b\x53\xed\x4b\x6f\xd4\x23\x5f\x57\x9f\x7f\xf8\x8c\x94\x10\xf1\x31\x6a\xba\x05\x9e\xfd\xfa\xc0\x05\x24\x96\x93\x3c\x45\x81\xb3\x55\x50\x23\x29\x13\x64\xd5\xf1\xfa\x52\xb7\xe4\x53\x2b\x08\x82\x2a\x3f\xac\x39\xc2\xb9\x69\xde\x5c\x4d\x33\xdb\x4d\x6c\xe8\x9a\x6a\x98\x4b\x28\x55\x5a\x35\x1e\x6e\x28\x65\x81\x33\xa1\x32\x68\xbf\xd9\xe1\x0d\x91\x82\x22\x4f\xfd\xc2\xb7\xdf\x3b\x3c\xe8\x0f\x86\xdd\xa3\xc3\xd7\xa7\xbd\xc1\x8b\x57\xc3\xb3\xe3\xfe\xc9\xc1\xb3\xde\xf3\xde\xc1\xbe\x27\xd6\x7f\xd1\xdd\xab\x3f\x3e\xf9\xf5\xb7\x39\x7c\xd7\xf2\x6d\xd7\x55\x0f\xb8\x1b\xa0\x7c\x79\xf0\xf7\x56\x88\xa7\xfd\xee\x32\xa0\xcd\xc3\xd6\x5f\x85\xdd\x3e\x0e\xbe\x7c\x79\x5b\xd3\x67\x37\x34\x9f\x09\xd7\x64\x6a\x4d\xed\x8a\x75\x51\xd9\xf0\x8a\x4e\xaa\xbb\xa8\xcf\x2c\x71\xd5\x1d\x95\x77\x00\x64\xf5\x2f\x5f\x53\xd5\x2b\xd3\x09\xd3\xda\xdd\x43\xb9\x0b\x28\x2e\x6a\x3b\x2f\x68\xbe\x84\xb2\x6c\x08\x6e\x73\xfd\xb4\x32\xb2\x36\x55\xcc\x31\x89\x4a\x0c\xa0\xf3\x91\x36\xf2\x82\x9a\x2f\x9d\x6a\x96\xba\x6b\x85\x2b\x5a\xea\xa8\x1b\x2d\x5f\xa2\xb6\x0b\xaf\x6d\xdc\x3e\x9a\x9f\xfa\xac\x6f\x86\xbf\x41\x5f\x73\xc3\x0d\x8d\x7b\x7e\xc5\xf4\xc5\x6d\x26\x72\xcb\x91\x32\x7d\x01\x33\x4e\x13\xbb\x31\xd2\x4d\xd3\xdc\x65\xd2\x3d\x9b\x63\xa9\xf6\x10\x7d\x33\x45\xe5\x68\x6f\x13\x51\x5b\x9d\x09\x51\x56\xed\x3d\xac\x7c\xa7\x14\x2d\x5f\xba\x87\xe7\x65\x29\xfd\xe3\xaf\x41\xeb\xbf\x00\x00\x00\xff\xff\x71\x0e\x5c\x2e\xe1\x21\x00\x00")

func powersslApiserverV1CertificateYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1CertificateYaml,
		"powerssl/apiserver/v1/certificate.yaml",
	)
}

func powersslApiserverV1CertificateYaml() (*asset, error) {
	bytes, err := powersslApiserverV1CertificateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/certificate.yaml", size: 8673, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1Certificate_issueYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xc1\x72\xdb\x36\x10\xbd\xeb\x2b\x76\xd2\xcc\x64\x26\xad\x45\x27\xb9\xf1\xa6\x26\x4d\xc6\x9d\x44\xc9\xd8\x72\x7b\x68\x5a\x07\x22\x57\x12\x62\x12\x80\xb1\x4b\xc9\xaa\xeb\x7f\xef\x00\x24\x2d\x50\xa2\x24\xcb\x8d\x93\xda\x8e\x0e\x89\x48\x2e\x96\x0f\x8b\x7d\x0f\x0f\xb2\x36\xa8\x84\x91\x31\xbc\xe8\xee\x77\xf7\x3b\x52\x8d\x74\xdc\x01\x60\xc9\x19\xc6\x60\xf4\x0c\x2d\x51\x16\x09\x23\x09\xed\x14\x6d\x34\x7d\x16\x25\x68\x59\x8e\x64\x22\x18\x4f\x24\x51\x81\x5d\x63\x35\xeb\x0e\xc0\x14\x2d\x49\xad\x62\x98\x3e\xeb\xb0\x18\x93\x4b\xb5\x07\x4a\xe4\x18\xc3\xcb\xc5\xa8\x03\x37\xe8\x08\xed\x54\x26\xd8\x31\x82\x27\x3e\xd0\xa5\xbe\x70\xb1\x97\xee\x0a\x60\x8c\x5c\x7e\x01\xa0\x22\xcf\x85\x9d\xc7\xf0\x06\x99\x40\x40\x80\xa0\x0b\x87\xc8\x85\x55\x04\xfd\xf7\x83\x93\xd7\xef\x8f\xfb\xaf\x40\x8e\x80\x27\x18\x46\x41\xaa\x91\x40\x69\x06\x3c\x97\xc4\xdd\x2a\xaf\x36\x68\x05\x4b\xad\x0e\xd2\xb5\x00\x4f\xde\x20\x57\xe1\x16\xc9\x68\x45\x48\x35\x2e\x80\x47\xcf\xf7\xf7\x1f\x2d\x2e\x01\x52\xa4\xc4\x4a\xc3\xbe\x0c\x3d\xa0\x22\x49\x90\x68\x54\x64\x57\xa3\xbb\x41\x74\xa2\x15\xa3\xe2\x30\x01\x80\x30\x26\x73\x30\xa4\x56\xd1\x67\xd2\xaa\xf9\x14\x80\x92\x09\xe6\x62\xf9\x2e\xc0\x63\x8b\xa3\x18\x9e\xfc\x10\x25\x3a\x37\x5a\xa1\x62\x8a\xca\x58\x8a\xa6\xcf\x96\xa7\xf7\xa4\xb3\x80\x3c\x12\x45\xc6\xeb\x67\xa1\xa0\x50\x78\x6e\x30\x61\x4c\x01\xad\xd5\xf6\xdb\x4e\xc6\x9a\xe4\x88\x05\x17\x54\xcf\xc1\x08\x2b\x72\x64\xb4\xc1\xca\xd4\x7d\xe7\xfe\x0d\xb2\x4b\x15\x83\x6b\xb9\xe0\x96\xc5\xb3\x42\x5a\x4c\x63\x60\x5b\x84\xb1\x78\x2e\x72\xe3\x78\x10\x74\x12\x45\x4f\x23\xdf\xf4\x14\x3d\xed\x6c\x9e\x06\xcf\x0d\xc6\x40\x6c\xa5\x1a\x37\x1e\x18\xc1\x8c\x56\xc5\xf0\x57\x98\xf8\x63\xf4\x71\xf6\xe3\xc7\x2a\xb9\xbf\x78\x5c\x8d\xaa\xa9\x54\x4f\x6c\x1d\x95\x2a\x28\x98\x14\x56\xf2\x3c\x1c\x31\x44\x61\xd1\xf6\x0a\x9e\xc4\xf0\xc7\x9f\x9d\x72\x89\x33\x64\x5c\x61\xd8\x2b\x7f\xfb\xab\x93\xac\x7c\xed\xdd\xe0\x99\xb1\x6e\x4a\x2c\x91\x62\xb8\xb8\xfc\x4e\x23\xa8\x57\xed\x21\xd2\xc8\x14\xab\xbb\xd4\x3f\x7b\x57\x63\x8e\x4d\x2a\x36\xd0\xe9\xa0\xff\x5b\xef\xed\xc1\xab\x93\xde\xe1\x9b\xe3\x77\xbf\xf4\x07\x35\xab\x5c\xb5\x41\xfb\xef\x57\xa9\x42\xa6\x49\xc7\x33\xb5\x87\xb9\xe1\x39\x08\x95\x96\xd4\xc3\xb3\x42\x64\x7e\xbc\xb1\x38\x95\xba\x20\x9f\x68\x27\x22\x96\x80\xef\x06\x11\xbf\x6f\x78\xf7\x94\xa9\x0e\x20\x12\xff\xac\xd3\x80\x7e\x2d\xd5\xde\x5c\xeb\xf6\x4a\x6f\x6e\x9a\xb2\xfd\x97\x5b\xe7\xb0\xc4\xb3\xe8\xa0\xd6\x0a\xde\x82\xbe\x78\x4f\x6c\x84\x45\xc5\x97\x55\xa1\xd6\x9b\xe3\x40\x76\xde\x4a\x62\x6a\xac\x62\x17\x06\x13\x04\x6d\x53\xb4\x4e\x3d\x0a\x45\x06\x13\x39\x92\x98\xc2\xb0\x60\x48\x5d\x33\xe5\x52\x49\x62\x99\x74\xa1\x8f\xb3\x6c\xbe\xa8\xbc\x45\xe1\x98\x10\xe6\x83\x99\xcc\x32\xbf\xd9\x2b\x74\x84\x17\x56\x66\x73\x18\x22\x88\x34\xc5\x14\x58\x7b\x1d\x42\x95\x96\x32\x26\x09\xb2\x5d\x3d\x81\x9b\xc4\x7d\x10\x22\x37\x8f\xe5\x39\xd2\x61\x85\xe9\xa1\xa8\x52\xd9\xc4\x5f\x56\x97\x6e\x41\x8e\x1e\xb7\x00\x1f\xe3\x91\xfc\x7b\x59\x52\xcf\x0a\xb4\xf3\x56\xec\x23\x91\x11\x5e\x0b\x9a\x54\x8c\x63\xb4\x8d\x27\x23\x6d\x73\xc1\xfe\xd9\x8b\xe7\xad\x60\x06\xfa\x14\xd5\x2d\xa0\x69\x14\xea\x76\xbc\x92\xa6\x55\xd5\x7a\xe9\xc5\x65\xc9\x21\xfd\xe4\x4d\x8d\xad\x5c\x92\x77\x44\x38\x5b\x01\xb1\x93\x9a\x94\xef\xb9\x0f\x7a\xf2\x50\x8d\xcd\x1d\x93\x90\x6f\x67\x62\xca\x56\xff\x9f\x98\x98\x05\x42\x17\x54\x81\x2c\xe3\xfd\xcf\x86\xc3\x62\xd4\x53\x57\x09\xca\x82\xeb\xe1\x67\x4c\xea\x95\x0e\x8e\xdb\x9d\x70\x5d\x8e\x6d\x16\x96\xa5\x75\xa9\xa6\x22\x2b\x70\x6b\xd4\x42\x75\x87\xf3\x4a\x22\xae\x1a\x73\x47\x60\x89\x4e\x5b\xde\xb7\x2a\xf4\xed\x32\x9f\x3b\x23\x35\xde\x0e\x38\x45\x16\x32\xa3\xd5\x38\x61\xad\x08\xf7\x01\xc9\x98\x53\xb3\x79\x36\xb5\x4e\xb0\x20\x65\x9b\xac\x8a\xcd\x8e\xf5\xf0\xcc\xdd\x5e\xff\x86\x4a\x05\x3e\xd6\x7d\x9c\x6f\xb5\x48\xba\xb0\x49\xe3\x60\xbc\x74\x20\x0e\xf6\x83\xf2\xb3\x8c\xdc\x8f\x25\x98\x88\x29\xfa\xe1\x6e\x09\x1a\x03\x3e\x35\xa4\xe1\xa2\xf1\x33\x77\x5a\xdb\xef\xe8\xc2\xff\xef\xee\x7c\x2a\x3d\xb5\x87\x24\x09\xe4\x58\x69\x8b\x29\xcc\x26\x8d\xed\xb9\xb2\xcf\x52\x8d\x9b\x5b\xdc\x32\xe4\xd2\x64\x0f\xe4\xb5\xea\x55\xb7\x8f\x3b\xac\xec\xb1\x0c\x0e\x7c\x85\x3f\xc0\xfc\xe7\x34\xa9\x24\x93\x89\x79\xff\x3a\xcb\x57\xfe\xb1\x60\x7b\xcf\x2e\x96\x78\x5b\x6c\x26\x86\xd8\xd6\xde\x8d\x76\x73\x1f\x91\xa6\xd2\x65\x14\xd9\x87\x96\xe6\x5b\x8f\x45\x91\x6f\x86\x1b\x11\xa8\x35\xe3\x29\xce\x7b\xd9\x58\x5b\xc9\x93\x7c\xeb\xf4\x4e\x71\xee\x1c\xe5\xcd\x75\x22\x95\x63\x24\xbe\xee\x0b\x97\x8c\xcc\x0a\x2f\xba\xdd\x6e\x4d\xf6\x4d\x1b\xc7\x8e\xcc\x2f\x77\xeb\xad\xb5\x48\xd6\xe8\x0b\xdc\xd0\x06\x6d\x39\x6e\xed\x2a\xe7\xcb\x79\xbe\xb8\xe4\x6e\xb2\x73\x0a\xcf\xf9\x43\xed\xf8\x37\x56\x72\xcb\x0f\x17\xb7\x21\xda\xa5\xd0\xbc\x13\x74\xfa\x95\xd7\xb8\xf6\x1c\x47\x2e\xaa\x86\x1d\x98\x8e\xc6\x5c\x27\xcc\xa6\xf6\x2a\x3e\x3e\xae\x42\xab\x9b\xe5\xc5\xeb\x8a\x65\xbf\xfe\x3e\xe8\xfc\x1b\x00\x00\xff\xff\x46\x3a\x67\xb0\x12\x1d\x00\x00")

func powersslApiserverV1Certificate_issueYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Certificate_issueYaml,
		"powerssl/apiserver/v1/certificate_issue.yaml",
	)
}

func powersslApiserverV1Certificate_issueYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Certificate_issueYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/certificate_issue.yaml", size: 7442, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1UserYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x73\xd4\x36\x10\x7f\xbf\x4f\xb1\x43\x99\x61\xa6\x25\xbe\x04\xde\xfc\x96\x96\xc2\xa4\x03\x81\xc9\x9f\xf6\x01\x68\xa2\xb3\xd6\x77\x22\xb6\x24\xb4\xeb\xbb\x18\xca\x77\xef\x48\xb2\x2f\xf6\x9d\x93\x5c\xf8\x5b\x52\xf2\x00\xb1\xb5\x5a\xed\xfe\xf6\xb7\xab\xf5\xc6\x58\xd4\xc2\xaa\x14\x1e\x26\xdb\xc9\xf6\x48\xe9\xdc\xa4\x23\x00\x56\x5c\x60\x0a\xd6\x2c\xd0\x11\x15\x63\x61\x15\xa1\x9b\xa3\x1b\xcf\x77\xc6\x15\xa1\x4b\xac\x33\x6c\x46\x00\x73\x74\xa4\x8c\x4e\x61\xbe\x33\x62\x31\x25\xbf\x7b\x0b\xb4\x28\x31\x85\x63\x42\x77\x88\x6e\xae\x32\x1c\x59\xc1\xb3\xb0\xd8\x6a\x08\x0f\x00\x53\xe4\xf8\x0b\x00\x55\x65\x29\x5c\x9d\xc2\x3f\x5b\xcd\x1b\x80\xa7\x8a\x98\x20\xc8\x27\x70\x34\x43\x30\x4e\xa2\x03\x45\x50\x69\xb2\x98\xa9\x5c\xa1\x84\x49\xc5\x20\x91\xd1\x95\x4a\x2b\x62\x95\x25\xb0\x8f\x8b\xa2\x86\xcc\xa1\x60\x94\x4b\x75\x41\x11\x2c\x54\x51\x80\x36\x0c\x1a\x33\x24\x12\x4e\x15\x35\x4c\x10\x84\x94\x28\x81\x0d\xf0\x0c\x01\xb5\x04\x93\x03\xcf\x14\x41\xa1\x88\x93\x46\x89\xb1\xe8\x04\x2b\xa3\xf7\x64\xcf\xc3\x13\x6f\x6a\x23\xe3\x90\xac\xd1\x84\x94\x2e\x4f\xbe\xf3\x60\x7b\xfb\xce\xc5\x23\x80\x44\xca\x9c\xb2\x1c\xc0\xdb\x05\xaa\x32\x6f\x4b\x5e\x15\xcb\xdd\x49\x47\x3a\x33\x9a\x51\x73\x57\x01\x80\xb0\xb6\x50\x59\x30\x66\xfc\x86\x8c\xee\xaf\x02\x50\x36\xc3\x52\xac\xbe\x05\xb8\xeb\x30\x4f\xe1\xde\x4f\xe3\xcc\x94\xd6\x68\xd4\x4c\xe3\x28\x4b\xe3\xf9\x8e\xf7\xc3\xfb\x45\x07\x8d\x1d\xf7\x46\x17\x36\xe7\xa2\x2a\xf8\x72\x37\x34\x54\x1a\xcf\x2d\x66\x8c\x12\xd0\x39\xe3\xbe\xad\x37\xce\x66\x87\x2c\xb8\xa2\xd6\x07\x2b\x9c\x28\x3d\x53\x3a\xa1\x69\xe9\x6a\xc5\x14\x0f\xd5\x3b\xbc\xcc\xbb\x0e\x2d\xfd\xcf\x01\xbe\xad\x90\xbc\xa3\x7e\x23\x90\x7a\x87\x09\x1c\x86\x2c\x81\x52\xd4\xe0\x90\x2b\xa7\x21\xc7\x05\xba\x86\x78\x3c\x13\x1a\x5c\xbb\x2f\xe9\xa9\xdb\xcb\xbb\x94\xbe\x0f\x31\xdf\x22\x57\xad\xca\xce\x40\x68\x0f\x91\x33\xd6\x29\xc1\xd8\xc6\xa2\xab\x44\xe9\x14\xde\x56\xe8\xea\xce\x3b\x7f\x9a\x72\x28\x53\xc8\x45\x41\x5d\xdf\x86\xf0\xe4\xda\x62\x0a\x4a\x33\x4e\xd1\xf5\x56\x72\xe3\x4a\xc1\x61\xed\xe1\x83\x41\xe8\x8e\xcc\x19\xea\x0d\xb1\xdb\x05\xf6\xd2\xa0\x24\x6a\x56\x79\xad\xf4\x14\x44\xc4\xd1\xe4\x9e\x32\x55\xc1\x14\xd2\xb0\x81\x81\x66\xa6\x2a\x64\x83\x69\x1f\xb8\xa3\xda\xaa\x4c\x14\x45\x7d\x3f\x26\xab\x8a\x1b\xe7\xa2\xa8\xbc\xb6\x9e\xec\xcb\x35\x72\x27\x1a\xcf\xf9\xc4\x9f\x7c\x12\x4c\x7a\xfd\xb2\x2d\x7a\xc9\xb2\xe8\x25\xf3\x9d\xe4\xfa\x8d\x7d\xab\xa2\xa5\x28\x21\x77\xa6\x0c\x06\x59\x87\x73\x65\x2a\x02\x6f\xac\xaf\x32\xa7\x5e\xe7\x29\x94\xc8\x33\x23\xbf\x44\x1c\x89\x9d\xd2\xd3\x66\xa1\x2d\xce\x6d\xe0\xba\xc5\xb9\x51\x84\x59\xe5\x14\xd7\x5d\xa9\x09\x0a\x87\x6e\xb7\xe2\x59\x0a\x2f\x5f\x87\x05\x6b\x68\xbd\x64\xff\x16\x0a\x2d\x81\x08\x4c\xbf\x0f\x42\xb7\xc1\x8a\xd1\xd0\xb8\x08\x27\x5e\x5b\x45\xa3\xa2\xdb\x50\x47\xbd\x57\xb7\xa9\x74\x36\x75\xeb\x57\x23\x3b\x0c\x19\x30\xe7\x6a\x63\x86\x4d\xb9\x1a\xc9\xc8\x09\x8f\x67\x53\x73\x2f\x60\xbd\x48\x0b\x76\x15\x7e\x5e\xaa\xfb\x4e\xe5\xbd\xaf\x6f\x1f\x2e\x6f\x55\x9e\x20\xb7\xa4\x4f\xe0\xa0\x21\xfc\xfe\xf3\xa3\x93\xc7\xcf\x8f\xf7\x1f\x81\xca\x03\xfb\xfd\x32\x48\x83\x14\xba\x0e\x3c\xdf\xa4\x9d\x78\x82\xb7\xa2\x9b\xb8\x6d\x59\x70\x55\x03\xe1\xff\xbd\xcc\x33\xdf\xbb\xfa\xf5\xd8\x53\x36\x94\x60\xe3\x8b\xa4\x53\x38\xc7\xd5\xfa\xef\xfb\xe5\xc1\xf2\xdf\xe1\xb9\xff\xc1\x73\x51\x5a\xdf\xab\x87\x0e\x63\xfc\xf3\xcd\x2f\x86\xd6\x2f\x66\x74\x3a\x85\xbf\x83\xa2\x57\xe3\x57\x8b\x5f\xee\x7e\xee\xab\x43\x62\x81\x8c\x6b\x49\xf4\x28\xbc\xfe\x42\x79\x14\x95\x7f\x1f\xa9\xe4\xbb\x3b\x74\xac\x90\x52\x78\xff\xe1\x47\xd6\x5c\x9a\x35\x91\x48\xff\x8b\x9c\xb1\xd5\x95\x1f\xc8\xc7\x56\x8a\xa1\xdc\xd9\xdb\xff\x73\xf7\xe9\xde\xa3\x93\xdd\x83\x27\xc7\xcf\x7e\xdf\x3f\x6a\x53\x68\x15\xcd\xa5\x22\xe5\x93\x4a\x6f\x61\x69\xb9\x0e\xed\x5b\xc8\x33\x7c\x5b\x89\xa2\xdf\xbe\x7a\x0d\xd7\x66\x5d\x34\xeb\xfb\xc8\xba\x1f\x17\xd8\xa7\xa4\x62\x15\x22\xfd\x5f\x4e\xc5\x6f\xd7\xb8\xc6\x2c\xf8\xca\x8d\xeb\x85\x25\x5e\xa8\x31\x26\xca\x87\xa1\xdd\xa4\xca\x77\xf5\x52\x41\x44\xd4\x4c\xde\x60\xd6\xf6\x9b\x9d\x5b\x68\xd4\x05\xfe\xd8\x15\x5d\xf7\x07\x63\x11\xbe\xba\xaf\x95\xba\x18\x27\x4c\xea\xa6\x4a\x2c\x79\x7a\x43\xc3\x32\x23\x07\xce\x5b\x9f\x60\x0c\xcf\x2f\x4a\x24\x12\xd3\xeb\x0d\x96\xc8\x42\x15\xb4\x2e\x27\x9c\x13\xdd\xcf\x74\xc5\x58\x52\x9f\x24\x57\x51\xa4\x13\x90\x48\x8d\x81\x8f\x9d\x1b\x02\xe2\xf9\xdf\x35\x60\xf3\xea\xd6\x4b\xf7\xe6\xf0\x16\x21\x8f\x5f\x97\x8e\x49\x34\x33\x69\x8c\x5e\x9b\x8e\x7c\x84\xd1\x9f\x1f\xdd\xd5\xe2\x3d\x50\xd1\x0a\x45\xec\x2b\x5a\x9c\x30\x2f\x25\x35\x9e\xf3\x8b\x76\xa6\xb5\x01\x9d\x37\x99\x75\x75\x9a\xfd\xa0\x7f\x75\xdc\xd5\x9f\x1f\xbd\x10\x44\x71\x9e\x15\x07\x59\x4a\xfb\xaa\xdb\x13\xe9\x0e\xb3\x42\xb0\x92\x1b\x8d\xb1\xd6\xb6\xf4\x94\xe7\x0a\x0b\xd9\x9c\x0a\x54\x4d\xc8\xcb\x6b\x1e\x1e\x5e\xf5\x7c\x8b\xe3\x9e\x73\x5e\xa9\xcf\x83\xbe\xae\x50\x2e\x72\xe7\x52\xce\x3d\x5d\xf6\xfb\x03\xa5\xf5\x86\x8c\x0b\x17\xde\x0d\x03\xbb\xe9\x15\x18\x9f\x9f\x09\x3a\xfb\x98\x13\x22\xf2\xa5\xa0\x33\x58\x28\x9e\x85\xab\x94\x06\x8f\xf9\x3a\x99\x7e\xdc\x39\x36\xaa\xf9\x0a\x50\xaf\xe4\x90\xc7\xc5\x21\x99\xca\x65\xeb\x21\xe8\x27\x8e\x37\x30\x88\x10\xcc\x44\x43\x47\x5f\xfc\xe1\x34\xb6\x18\xef\xfd\x7f\x27\x4a\x7e\x38\x4d\xd6\x8e\x08\x9a\x15\x81\x9a\x6a\xe3\x50\xc2\x62\x86\x3a\xfe\x0d\x29\x0e\xa8\xfb\xa7\xc5\x3f\x2e\x1d\xa9\x8d\xbc\x6b\xef\x1f\x8f\xe5\x16\xab\x4e\x9f\x15\xc3\xfa\xc9\x6a\xa4\x22\x5b\x88\x7a\x7f\x13\xb0\xbd\x1f\x1b\x08\xae\xf4\xe4\x01\xd9\x24\xf1\x00\xb4\x6d\xc8\xa1\xa7\x57\x1b\xeb\x4e\x1f\xd2\x23\xc8\x8c\xd9\xb6\xed\x4b\x90\x4f\x1b\xd1\xe6\x65\x7c\x78\xdc\x78\xf6\xc7\x5f\x47\xa3\x7f\x03\x00\x00\xff\xff\xd5\x01\x7b\x89\x96\x1c\x00\x00")

func powersslApiserverV1UserYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1UserYaml,
		"powerssl/apiserver/v1/user.yaml",
	)
}

func powersslApiserverV1UserYaml() (*asset, error) {
	bytes, err := powersslApiserverV1UserYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/user.yaml", size: 7318, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"powerssl/apiserver/v1/acme_account.yaml":      powersslApiserverV1Acme_accountYaml,
	"powerssl/apiserver/v1/acme_server.yaml":       powersslApiserverV1Acme_serverYaml,
	"powerssl/apiserver/v1/certificate.yaml":       powersslApiserverV1CertificateYaml,
	"powerssl/apiserver/v1/certificate_issue.yaml": powersslApiserverV1Certificate_issueYaml,
	"powerssl/apiserver/v1/user.yaml":              powersslApiserverV1UserYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"powerssl": &bintree{nil, map[string]*bintree{
		"apiserver": &bintree{nil, map[string]*bintree{
			"v1": &bintree{nil, map[string]*bintree{
				"acme_account.yaml":      &bintree{powersslApiserverV1Acme_accountYaml, map[string]*bintree{}},
				"acme_server.yaml":       &bintree{powersslApiserverV1Acme_serverYaml, map[string]*bintree{}},
				"certificate.yaml":       &bintree{powersslApiserverV1CertificateYaml, map[string]*bintree{}},
				"certificate_issue.yaml": &bintree{powersslApiserverV1Certificate_issueYaml, map[string]*bintree{}},
				"user.yaml":              &bintree{powersslApiserverV1UserYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
