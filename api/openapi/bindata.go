// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// powerssl/apiserver/v1/acme_account.yaml
// powerssl/apiserver/v1/acme_server.yaml
// powerssl/apiserver/v1/certificate.yaml
// powerssl/apiserver/v1/certificate_issue.yaml
// powerssl/apiserver/v1/user.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _powersslApiserverV1Acme_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xd4\x56\x10\x7e\xf7\xaf\x18\xd1\x48\x48\x54\xc4\x09\xbc\xf9\x6d\x4b\x2f\x6a\x55\x5a\xc4\x06\xf5\xa1\x69\xd1\xec\xf1\xec\xe6\x80\x7d\xce\x61\x66\xbc\x64\x8b\xf2\xdf\x2b\xdf\xb2\xc7\xc4\x9b\xdd\x85\x40\x04\x24\x0f\xd1\xda\xfe\x3c\xfe\x66\xe6\x9b\x8b\xed\x03\x39\x0c\x36\x83\xc7\x87\x47\x87\x47\x89\x75\x73\x9f\x25\x00\x6a\xb5\xa0\x0c\x82\x7f\x4b\x2c\x52\xa4\x18\xac\x10\x2f\x89\xd3\xe5\x71\x8a\xa6\xa4\x97\x68\x8c\xaf\x9c\x1e\x06\xf6\xea\x13\x80\x25\xb1\x58\xef\x32\x58\x1e\x27\x8a\x0b\xa9\xad\x3c\x04\x87\x25\x65\x30\x79\xf2\xf4\xa7\x49\x8b\x9f\x12\x2f\xad\xa1\x24\xa0\x9e\x35\x98\xda\xe0\xbb\x1a\x76\x51\x1f\x01\x2c\x48\xdb\x1f\x00\x3e\x10\xa3\x5a\xef\x7e\xcd\xc7\x6c\xbc\xfc\x85\xb4\x43\x32\x49\xf0\x4e\x48\xfa\x5b\x01\xee\x3d\x3a\x3a\xba\xb7\x3e\x04\xc8\x49\x0c\xdb\xa0\x0d\xc9\x09\x48\x65\x0c\x89\xcc\xab\xe2\xf2\xee\xc3\x08\x6d\xbc\x53\x72\x1a\x1b\x00\xc0\x10\x0a\x6b\x1a\x4a\xe9\x2b\xf1\x6e\x78\x15\x40\xcc\x19\x95\xf8\xfe\x59\x80\x03\xa6\x79\x06\xf7\xbf\x4b\x8d\x2f\x83\x77\xe4\x54\xd2\x16\x2b\xe9\xf2\x38\xf2\xec\x7e\xb2\x66\x3b\xc7\xaa\xd0\xcd\x0e\x38\xa8\x1c\x9d\x07\x32\x4a\x39\x10\xb3\xe7\xdb\xf5\x83\x83\x99\x2a\x6a\x25\xbd\x0f\x01\x19\x4b\x52\xe2\x28\x29\xbd\x20\xea\xff\x91\x75\xeb\x32\xa8\x05\x11\x9d\x62\x7a\x53\x59\xa6\x3c\x03\xe5\x2a\xc6\xd2\x39\x96\xa1\xd6\x66\xad\xc2\x69\xa3\x49\x49\x1f\x34\x9a\xec\x82\x28\xe9\x83\xe4\x7a\x5f\x74\x15\x28\x03\x51\xb6\x6e\x31\xb8\x10\x50\x95\xd8\x65\xf0\x6f\x64\xfd\x34\x3d\x7d\xfb\xfd\xe9\xe0\x09\xcd\xa9\x83\xee\xd6\x5e\xed\xbd\x8b\x23\x6a\xef\xa8\x90\xa9\xd8\xea\x2a\x06\xcf\x08\x99\x78\x52\xe9\x59\x06\x7f\xff\x93\xb4\x79\x2e\x48\x69\xd7\x22\xf8\xb1\x41\x7f\x19\x75\x10\xb8\xf6\x46\x2d\x49\x06\xef\x2e\xee\xb4\x0e\x7d\xd6\xbe\x59\xad\x87\x6a\xe7\x6e\xff\x22\xe4\xf8\xa5\x08\xfd\xae\xe1\x5f\x26\xfd\x2b\x2c\x82\x9a\x2a\x89\xfe\xe0\xf3\x48\xde\x23\x71\xbf\x3e\xea\xe3\x31\xbf\x5e\x39\x6d\x0d\x44\xfa\x79\xde\x52\x59\xcb\x68\x34\x8c\x37\x5b\xb5\xcd\xc6\x16\x90\xc9\xe9\xc5\x20\x48\x7b\x2f\x70\xbf\x5b\xf9\x2a\x36\xb8\xda\x8f\xc8\x3d\x79\xde\xd1\xf9\x56\xaa\xbb\x15\xc3\x8d\xd6\xf7\xcd\x17\xf4\xc1\x08\xed\x05\x4d\xed\x7f\xef\x37\xa6\x37\x15\xf1\x6a\x94\xf9\x1c\x0b\xa1\x9d\x98\x59\xa7\xb4\x20\x1e\x5c\x99\x7b\x2e\x51\x9b\x6b\x8f\x1f\x8d\x92\x39\xf1\xaf\xc9\x7d\x02\x36\x83\x38\xdd\xf8\x08\xf7\xb2\x73\xc1\x3f\x61\xba\x9b\xe1\x77\x55\xfe\x19\xaa\xfc\xf6\x66\x74\xab\xf1\x5b\x9d\xd1\x6b\x5e\x35\xa8\xa3\xd6\xe2\x9b\xcf\x35\xb3\x6a\x3e\x71\x97\x06\xda\x28\xfb\xd9\x2b\x32\x7d\x76\xa3\x17\xb5\x24\x4e\xc6\x0b\x2e\xe2\x60\x8c\xe6\x67\x89\x45\x45\x5b\x51\xeb\x76\x38\x5b\x75\x1d\xe1\x52\x8c\x7b\x12\x33\x3e\x1f\x79\xde\xd5\x0e\x3c\xde\x7f\x4b\x12\xc1\xc5\x76\xc2\x39\x29\xda\x42\xae\xe2\x90\x19\xe3\x06\x6d\x95\x4a\x19\x4a\xe6\x3a\xc1\x44\x09\x69\x15\x32\xe8\x2d\x7b\x86\xa2\x29\xd4\x6d\x9e\x98\x46\xa0\x27\x76\x07\xe8\x3a\x68\xf5\xde\xf9\x50\x6d\xb4\xc5\x57\xcd\x2e\xfa\xd1\x66\x72\x2b\xa1\xc0\xd5\x1f\xbb\x30\x6f\xbf\x4a\x6e\xcf\xd4\xba\xe5\x6e\xc3\x16\x38\xa3\xb1\xa4\x0e\x22\x5d\xff\x61\x9e\xdb\xda\x22\x16\xcf\x46\xe2\xbe\x99\x31\x71\x29\x7f\xce\xbb\x0a\x9e\x2c\x98\x28\xbf\xfa\xb4\x99\xf7\x05\xa1\x1b\xf4\x29\x34\xfa\x61\x62\x1b\xe5\xd1\x7d\xad\xdd\x56\xbf\x9b\xbb\xd7\x9e\x42\x6c\x67\xc5\xd6\xf0\x47\x6f\x0f\x31\x76\xcf\xd1\xbb\x79\x01\xdf\x93\xf5\xd5\x97\x99\x3d\x63\xff\x01\x3b\x83\xa3\x73\x7d\xd6\xef\x7e\x5b\x92\xb3\xe9\xf5\xef\x53\x74\x89\xb6\xbc\x9f\xa2\xbc\xfe\x2c\x59\xec\xa7\xda\xb4\x06\xf4\x64\xa3\xb1\x36\xf0\xf0\x4c\x35\xf4\xd3\xb0\xc1\x67\x1d\xb4\x3b\xd9\x1e\xfc\xdc\xf5\x9c\xdf\xfe\x3a\x49\xfe\x0f\x00\x00\xff\xff\x32\x2c\xde\x5c\xe7\x18\x00\x00")

func powersslApiserverV1Acme_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Acme_accountYaml,
		"powerssl/apiserver/v1/acme_account.yaml",
	)
}

func powersslApiserverV1Acme_accountYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Acme_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/acme_account.yaml", size: 6375, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1Acme_serverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x4f\xe3\x48\x10\xbe\xfb\x57\x94\x58\x24\xa4\x5d\x11\x07\xb8\xf9\x96\x65\x1f\xda\xd5\xb2\x1a\x11\xd0\x1c\x86\x19\xd4\x69\x57\x92\x06\xbb\xbb\xa9\x2e\x07\x32\x88\xff\x3e\xf2\x2b\xee\x80\xf3\x1a\x26\x42\x13\x91\x43\x14\xbb\xbf\x94\xbf\xaa\xfa\xaa\xba\xda\xc6\xa2\x16\x56\x45\x70\xd2\xe9\x76\xba\x81\xd2\x43\x13\x05\x00\xac\x38\xc1\x08\xac\xb9\x47\x72\x2e\x09\x85\x55\x0e\x69\x82\x14\x4e\x8e\x42\x21\x53\xbc\x2e\x2f\x3b\x96\x0c\x9b\x00\x60\x82\xe4\x94\xd1\x11\x4c\x8e\x02\x16\x23\x97\x1b\x39\x04\x2d\x52\x8c\xa0\x77\x7a\xf6\x67\xbf\x80\xe7\xdf\x4a\x62\x60\x05\x8f\x0b\x48\x6d\xae\x5c\x2e\x6e\x01\x8c\x90\xcb\x1f\x00\xc6\x22\x09\x56\x46\xff\x13\xb7\xd8\xb9\xfe\x4f\x39\xae\x90\x84\xce\x1a\xed\xd0\xd5\x7f\x05\xd8\x3b\xee\x76\xf7\x9a\x4b\x80\x18\x9d\x24\x65\xb9\x20\xda\x03\x97\x49\x89\xce\x0d\xb3\x64\xf6\xef\x8e\x87\x96\x46\x33\x6a\xf6\x0d\x00\x08\x6b\x13\x25\x0b\x4a\xe1\x8d\x33\x7a\x7e\x15\xc0\xc9\x31\xa6\xe2\xf9\x5d\x80\x7d\xc2\x61\x04\x07\xbf\x84\xd2\xa4\xd6\x68\xd4\xec\xc2\x12\xeb\xc2\xc9\x51\xee\x47\xe3\x9d\x3b\xaf\xd8\x1c\x04\x0d\xf3\xa1\xc8\x12\x5e\xec\x8c\x86\x4c\xe3\x83\x45\xc9\x18\x03\x12\x19\x7a\x5b\x9f\xc8\xca\x3e\x0b\xce\x5c\xed\x83\x15\x24\x52\xe4\x59\x92\xf3\x4f\x2d\x10\x2b\x46\xd8\x57\x5f\xd1\x7b\x82\xd2\x11\xdc\x65\x48\x53\xef\x1e\xe1\x5d\xa6\x08\xe3\x08\x86\x22\x71\x3e\xba\x8d\x21\x4f\x2d\x46\xa0\x34\xe3\x08\x69\x6e\x65\x68\x28\x15\x5c\xac\x9d\x1c\xb7\x92\xb9\x30\xb7\xa8\xb7\xc0\xc6\x31\x29\x3d\xaa\x16\xea\x32\xa9\x1f\xff\xb2\x4c\x2a\x73\x28\x33\x52\x3c\xf5\xb1\x03\x14\x84\xd4\xcb\x78\x1c\xc1\xa7\xcf\xc5\x82\x35\x6e\xdd\xb2\x39\x25\x14\x8c\xbb\x50\x38\x8d\x6f\xbb\x54\x2b\xb9\xb4\xd0\xf1\xef\x26\xf6\x92\xde\x42\x67\x39\x99\x76\x2a\xcb\xe3\x59\x2a\xa3\x89\xea\x79\xc9\xa4\x09\x6e\xa3\x7a\xa6\x0c\xb7\xa1\xe4\x7c\x4b\x78\xcc\x4b\xf1\x69\xd3\xdd\xe0\x6f\xdc\x89\xcd\x60\x37\x35\xbd\xac\xff\xe7\xdf\xcf\xba\x6d\x3e\x21\xb4\x36\x5b\x4f\x76\xf9\x07\x1f\x44\x6a\xf3\x51\xc5\x9b\x22\xc2\x5f\x37\x6f\xc6\x35\x49\x66\x24\x1d\xc1\x17\xcf\xdc\x55\x78\x75\xff\xdb\xfe\x76\x9a\x76\x8c\x09\x32\xae\xa9\xef\x3f\x0a\xf0\xcf\x21\x71\x4b\xb9\x33\xac\xd0\x45\xf0\xf8\xf4\xae\x63\xa8\xb3\xb6\x9b\x3a\xb6\xd9\xba\x4d\xfa\xd2\xc6\xef\xb3\xc7\xbb\xbe\xb7\xad\xef\xb7\x1b\xa1\x4a\x81\xbf\xe1\x08\xd5\xb0\xca\x41\x15\xb1\x12\x5f\x9c\xd6\x07\xd9\xb0\xa7\x67\x06\xca\x18\x9b\xc1\x0d\xca\x7a\x7a\xf2\x7a\x77\xe0\xa7\xe2\x92\x12\x3f\x14\xad\xd9\x99\x88\x24\xc3\x95\xa8\xe6\x0c\x36\x98\x56\xcd\x60\x26\xc4\x0d\x89\x49\x13\xb7\x3c\xef\xe5\xb1\xaf\xfd\xd0\x97\xa2\x73\x62\xb4\x9a\x70\x8c\x2c\x54\xe2\x5e\xe2\x04\x91\xf0\x4f\x85\x8a\x31\x75\xf3\x82\x59\x26\x17\x2f\x21\xa5\x40\xfc\xb6\xb2\x61\x24\x8a\x1a\x5d\xe5\x88\x2c\x06\xfc\x0b\xb5\x06\xb4\x89\x59\x2e\xe8\x43\x56\x5e\xf1\x67\x85\xc8\x5f\x6d\x26\x56\xce\x26\x62\xfa\xff\x3a\xcc\x63\x45\x28\xd9\xd0\x74\x1d\x19\x16\xf9\x2f\xb7\xa1\x95\xc6\x17\x9e\x7a\x36\x8c\x7f\xd3\x8a\xfc\xc7\x6d\xb6\x87\x2c\x7c\x15\xf4\xdd\x5c\x7e\xbc\x66\xdb\x77\x3e\x8d\x0f\xfc\xa1\x7e\x75\xb2\x22\xde\x0b\x5a\xe4\x36\xf4\x5e\x0a\xf5\x4c\xb8\xdb\x95\xd0\xd7\xe7\xaf\x6e\xce\xfd\x7c\xbd\xa6\xea\x75\xe7\x39\xff\xc6\xcc\xb6\x6e\xea\x05\x3e\xaa\xa0\xd5\xcd\xf2\xe2\xaf\xaa\x76\xfe\xfd\x78\x11\x7c\x0b\x00\x00\xff\xff\x4b\x00\x10\x10\xac\x15\x00\x00")

func powersslApiserverV1Acme_serverYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Acme_serverYaml,
		"powerssl/apiserver/v1/acme_server.yaml",
	)
}

func powersslApiserverV1Acme_serverYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Acme_serverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/acme_server.yaml", size: 5548, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1CertificateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x0c\x7a\x0a\x14\x38\xa7\x91\x93\x16\x67\x2f\x7c\xe7\x6d\xd2\xd4\xdb\x34\x0d\x62\x67\x17\x8b\xb6\xeb\xd0\xd2\xc8\x66\x23\x91\x2c\x39\xb2\xe3\x76\xfb\xee\x0b\x92\x92\x4d\xd9\x72\x9c\xa4\x3f\x41\xb3\xf5\x45\x10\x49\xc3\xe1\x37\x3f\xdf\x70\x48\x4a\x85\x82\x29\xde\x81\xa7\xd1\x6e\xb4\xdb\xe2\x22\x95\x9d\x16\x00\x71\xca\xb0\x03\x4a\xce\x50\x1b\x93\xb5\x99\xe2\x06\xf5\x14\x75\x7b\xba\xd7\x8e\x51\x13\x4f\x79\xcc\x08\x23\xa5\x25\xc9\x16\xc0\x14\xb5\xe1\x52\x74\x60\xba\xd7\x22\x36\x36\x56\xc9\x0e\x08\x96\x63\x07\x9e\x2d\xe5\xfb\xa8\xa7\x3c\xc6\x96\x62\x34\x71\x32\x2b\xfa\xdc\x3b\x80\x31\x92\xff\x07\xc0\x14\x79\xce\xf4\xbc\x03\x7f\xef\x94\x6f\x00\x8e\xb8\x21\x03\xe1\xb0\x08\x06\x13\x04\xa9\x13\xd4\xc0\x0d\x14\xc2\x28\x8c\x79\xca\x31\x81\x51\x41\x90\x20\xa1\xce\xb9\xe0\x86\x78\x1c\xc1\x31\xce\xb2\xf9\x42\x5b\xac\x91\x11\x26\x35\x7d\x30\xe3\x59\x06\x42\x12\x08\x8c\xd1\x18\xa6\x79\x36\x87\x11\x02\x4b\x12\x4c\x80\x24\xd0\x04\x01\x45\x02\x32\x05\x9a\x70\x03\x19\x37\x14\x95\x3a\xa5\x42\xcd\x88\x4b\xd1\x4b\x9a\xac\x1f\x5a\xfc\xa5\xa8\x46\xa3\xa4\x30\x95\xe1\xf6\xf7\xe0\xc9\xee\xee\x83\xe5\x23\x40\x82\x26\xd6\x5c\x91\xf3\x6f\x17\x4c\x11\x5b\x48\x69\x91\x2d\x46\x47\x81\x74\x2c\x05\xa1\xa0\x50\x01\x00\x53\x2a\xb3\x10\xb8\x14\xed\xf7\x46\x8a\xfa\x57\x00\x13\x4f\x30\x67\xab\x6f\x01\x1e\x6a\x4c\x3b\xf0\xe8\x3f\xed\x58\xe6\x4a\x0a\x14\x64\xda\x5e\xd6\xb4\xa7\x7b\xd6\x8e\xc0\x3c\x73\x5a\xc2\x79\xd4\x5a\x42\x4f\x59\x91\xd1\x66\x6b\x04\x14\x02\x2f\x15\xc6\x36\x02\xa8\xb5\xd4\x77\x6b\x94\x56\x71\x9f\x18\x15\xa6\xb2\x41\x31\xcd\x72\x9b\x3e\x41\x84\xaa\xc4\x56\x6c\x8c\x7d\xfe\x11\x37\x59\x17\xa4\xac\xfd\x9d\xe2\x87\x02\x8d\x35\xd4\x0e\x04\xc3\x3f\x62\x04\x7d\x47\x2b\xc8\xd9\x1c\x34\x52\xa1\x05\xa4\x38\x43\x5d\xcf\x46\x9a\x30\x01\xba\x1a\x1e\xd5\xb4\xf6\xd2\x30\xdd\x1f\x83\xe7\xa9\x4f\x60\xc5\xe3\x0b\x60\xc2\x7a\x4a\x4b\xa5\x39\x23\xac\x42\x12\x2a\xe1\xa2\x03\x1f\x0a\xd4\xf3\xe0\x9d\x9d\x8d\x6b\x4c\x3a\x90\xb2\xcc\x84\x26\x36\xb9\x95\xe6\x0a\x3b\xc0\x05\xe1\x18\x75\xed\x4b\x2a\x75\xce\xc8\x7d\x7b\xfa\xa4\xd1\x83\x03\x79\x81\xe2\x9a\x2e\xec\x02\x59\x69\xe0\x09\x0a\xe2\xe9\x9c\x8b\x31\x30\xef\x4e\x99\xda\xcc\x29\x32\x32\x8e\x9b\xa5\x1b\xcc\x44\x16\x59\x52\xba\xb6\xee\xb8\xc1\x5c\xf1\x98\x65\xd9\xfc\xb1\x67\x30\xf7\x03\xa7\x2c\x2b\xac\xb6\x9a\xec\x9b\x4d\xa9\x1e\x09\xbc\xa4\xa1\x05\x30\x74\xc8\xde\xbd\xa9\x6a\x66\xb4\xa8\x99\xd1\x74\x2f\xba\xf6\xf8\x3a\x46\x8f\x1b\x13\x48\xb5\xcc\x1d\x3c\xa5\x71\xca\x65\x61\xc0\x42\xb7\x85\xe8\xdc\xaa\x3e\x87\x1c\x69\x22\x93\x6f\x11\x55\x43\x9a\x8b\x71\xf9\xa1\xaa\xed\x55\x18\x1b\x6a\x7b\xa9\x0f\xe3\x42\x73\x9a\x87\xc2\x23\x64\x1a\x75\xb7\xa0\x49\x07\xde\xbc\x73\x1f\x94\x34\xeb\xa5\xfe\x99\xab\xc8\x06\x58\xc8\x82\xc7\xc0\x44\x15\x48\x1f\x29\x81\xb3\x70\xfe\xeb\x56\x5f\xaf\xfd\x3e\xd4\xdf\xc0\xb8\xfb\x54\x72\xcb\x42\xf7\xab\x4c\x82\xec\x69\x80\x73\x35\x98\x66\x28\x5b\x1c\xea\x52\x23\x70\x6b\x59\xb2\x97\xde\x5d\x12\x88\x74\x81\xdf\x84\x14\xb6\x25\xfa\x64\xcb\xe3\xe7\xcd\xcd\xd0\x21\xd2\x0a\x3d\x22\x38\x2d\xa9\x71\xfc\x7a\x30\x7c\xfe\xfa\xec\x78\x1f\x78\xea\x78\x12\x48\x41\x22\xd1\xb8\xbe\x06\x2f\x6f\xd0\xb0\x1c\xe2\xbd\xe8\x57\xee\x29\x5f\xae\x6a\x51\xec\xdf\x4d\x96\xd9\x96\xd9\x7e\xf7\x3d\x6c\x3d\x4f\x48\xda\x52\xab\x39\x4e\x71\x75\x4d\xb1\xbd\x7b\xe3\x92\x12\x30\xc2\xfe\xf0\x92\xe5\xca\xee\x22\xc2\x56\xa6\xfd\xdf\x9b\xaf\x39\x95\x95\x44\xa8\x45\x07\xfe\x0a\xf5\xbd\x6d\xbf\x9d\xfd\xef\xe1\x37\x5a\x9c\x12\xcc\x90\x70\x8d\x7c\xfb\xee\xf5\xf7\xe4\x9f\x9f\xf1\xc7\xa0\xa0\xed\x34\xad\x05\x68\x3a\xf0\xe9\xf3\x4f\x9a\x6d\xa3\x99\x4f\xb2\x7f\x2f\xc9\x54\x71\xe5\x5e\xff\x4c\x25\xeb\xbd\xe0\x92\x6c\xbd\xe3\xdf\xbb\x47\xbd\xfd\x61\xf7\xf4\xf0\xec\xd5\xc1\xf1\xa0\xe2\x5c\xe0\xf0\x65\x0b\x11\x38\x9e\x5b\x16\x8a\x1d\xcc\x15\xcd\x5d\x63\xe9\x88\x89\x1f\x0a\x96\xd5\xdb\x6c\xab\xe8\xba\x34\xf5\x58\x7f\x0c\x9a\xfe\x5c\x29\xcb\xdf\x57\xa0\x70\xe1\xe2\xfe\xe3\x50\xf8\xee\x1a\x6c\xcf\x90\x3b\x6d\xb0\x97\xb8\xac\x50\x09\xcd\xcb\xbb\xc3\xcc\x51\x91\x76\xc5\x42\x81\x77\xb3\x1c\xbd\xc7\xb8\x6a\x81\x83\x05\xae\x15\x46\xe3\x4c\x67\xa1\x33\x1a\x03\xe4\x0e\x17\xb6\x4a\x2d\x4f\x4d\x46\xf3\xb2\x9e\x2c\x52\xf9\x86\xc0\x62\x99\x34\xcc\xb7\x7e\x50\xd3\x7c\x4c\x93\xa3\x31\x6c\xbc\x1d\x70\x82\xc4\x78\x66\xd6\xe5\x98\xd6\x2c\x3c\x7f\xe0\x84\xb9\xa9\xa7\xcc\x55\x09\x13\x04\xc4\x67\x48\xad\x32\xdd\xd0\x15\x8e\xe6\xdb\x5d\x7f\xd5\xf1\x93\xad\x03\x1a\x8d\x2c\x74\xbc\xb1\x20\xd4\x0f\x70\x02\xb8\x6e\x80\x81\x09\x9b\xa2\x1b\x63\x5d\x0e\xe7\x35\xd2\x7f\x0a\x9e\x86\x3c\xf9\x7c\x1e\xad\x4d\xef\x66\xe5\x06\xf8\x58\x48\x8d\x09\xcc\x26\x28\xfc\x11\xb6\x3f\x0b\x6b\x44\xe2\x8f\xb8\x07\xfc\x5a\x0e\xa8\x52\xc1\x32\x75\x87\x78\x50\x15\x7d\x9d\xfb\x62\x35\x09\x37\x2a\x63\xf3\xe3\xeb\xc4\xc3\x5f\x44\x6c\xcf\xbf\x65\xcc\xb6\xc9\x66\x6c\x84\x4d\xa9\x5a\xcb\x1f\xfb\x63\x49\xc2\xad\x46\x96\x9d\x34\x64\xd3\x66\x2c\xc2\xb8\x40\xdf\x8a\x0c\x8d\x1a\x2f\x70\xde\xcd\xc6\x52\x73\x9a\xe4\xa1\xf8\xd5\xa5\xf6\x65\x30\xea\x51\xa8\xab\xcf\x3f\x7e\x41\x49\x48\xf8\x18\x0d\xdd\x02\xcf\x7e\x7d\xe0\x12\x12\x2b\x48\x9e\xa2\xc0\xd9\x3a\xa8\x91\x94\x19\xb2\xea\x70\x78\xa5\x5b\x0a\xa9\x15\x45\x51\x55\x1f\x36\x1c\xe1\xdc\xb4\x6e\xae\x97\x99\xed\x26\x36\x74\x4d\x35\xcc\x25\x94\xaa\xac\x5a\x0f\x37\x2c\x65\x91\x37\xa1\x32\x68\xbf\xd9\xe1\x0d\x99\x82\xa2\xc8\xc3\x85\x6f\xbf\x77\x78\xd0\x1f\x0c\xbb\x47\x87\xaf\x4f\x7b\x83\x17\xaf\x86\x67\xc7\xfd\x93\x83\x67\xbd\xe7\xbd\x83\xfd\x40\xac\xff\xa2\xbb\x57\x7f\x7c\xf2\xff\x5f\x16\xf0\x7d\xcb\xb7\x5d\x57\x3d\xe1\x6e\x80\xf2\xe5\xc1\x9f\x5b\x21\x9e\xf6\xbb\xab\x80\xae\x1e\xb6\xf9\x6e\xea\xf6\x79\xf0\xf5\x97\xb7\x0d\x7d\x76\x43\xf3\x99\x71\x43\x76\xad\xa9\xdd\x79\x2e\x57\x36\xbc\xa4\x93\xea\x26\xe5\x0b\x97\xb8\xea\x86\x25\x38\x00\x72\xfa\x57\x2f\x59\xea\x2b\xd3\x09\x33\xc6\xdf\xa2\xf8\xeb\x13\x2e\x6a\x3b\x2f\x68\xbe\x42\x71\x6c\x88\x6e\x73\x79\xb2\x36\xb2\x36\x55\xca\x31\x4b\x4a\x0c\x60\x8a\x91\xb1\xf2\x82\x9a\xaf\x4c\x6a\x96\xfa\x6b\x85\x4b\x5a\xe9\xa8\x1b\x2d\x5f\xa1\xb6\x4f\xaf\x6d\xdc\x3e\x5a\x9c\xfa\x6c\x6e\x86\xbf\x43\x5f\x73\xc3\x0d\x8d\x7f\x7e\xc5\xcc\xc5\x6d\x26\xf2\xe1\xc8\x99\xb9\x80\x19\xa7\x89\xdb\x18\x99\xa6\x69\xee\xb2\xe8\x9e\x2d\xb0\x54\x7b\x88\xbe\x9d\xa2\x72\x74\xb0\x89\xa8\x45\x67\x42\xa4\xaa\xbd\x87\x93\xef\x94\xa2\xe5\x4b\xff\xf0\xbc\x5c\x4a\x7f\xfb\x63\xd0\xfa\x27\x00\x00\xff\xff\xab\x36\x5a\x86\x72\x21\x00\x00")

func powersslApiserverV1CertificateYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1CertificateYaml,
		"powerssl/apiserver/v1/certificate.yaml",
	)
}

func powersslApiserverV1CertificateYaml() (*asset, error) {
	bytes, err := powersslApiserverV1CertificateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/certificate.yaml", size: 8562, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1Certificate_issueYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x73\xd3\x46\x10\x7e\xf7\x5f\xb1\x43\x99\x61\x86\x36\x56\x80\x37\xbd\xb9\x50\x98\x74\xc0\x30\x89\xd3\x3e\x94\x36\x9c\xa5\xb5\x7d\x44\xba\xbb\xdc\xae\xec\xb8\x69\xfe\xf7\xce\x9d\xa4\xf8\x64\xcb\x76\x9c\x12\x68\x12\xfc\x00\x96\xb4\xb7\xfa\xf6\xd7\x77\xdf\x39\xda\xa0\x12\x46\xc6\xf0\xa2\xbb\xdf\xdd\xef\x48\x35\xd2\x71\x07\x80\x25\x67\x18\x83\xd1\x33\xb4\x44\x59\x24\x8c\x24\xb4\x53\xb4\xd1\xf4\x59\x94\xa0\x65\x39\x92\x89\x60\x3c\x91\x44\x05\x76\x8d\xd5\xac\x3b\x00\x53\xb4\x24\xb5\x8a\x61\xfa\xac\xc3\x62\x4c\xce\xd5\x1e\x28\x91\x63\x0c\x2f\x17\xab\x0e\xdc\xa2\x23\xb4\x53\x99\x60\xc7\x08\x9e\x78\x43\xe7\xfa\xc2\xd9\x5e\xba\x2b\x80\x31\x72\xf9\x05\x80\x8a\x3c\x17\x76\x1e\xc3\x1b\x64\x02\x01\x01\x82\x2e\x1c\x22\x17\x56\x11\xf4\xdf\x0f\x4e\x5e\xbf\x3f\xee\xbf\x02\x39\x02\x9e\x60\x68\x05\xa9\x46\x02\xa5\x19\xf0\x5c\x12\x77\x2b\xbf\xda\xa0\x15\x2c\xb5\x3a\x48\xd7\x02\x3c\x79\x83\x5c\x99\x5b\x24\xa3\x15\x21\xd5\xb8\x00\x1e\x3d\xdf\xdf\x7f\xb4\xb8\x04\x48\x91\x12\x2b\x0d\xfb\x34\xf4\x80\x8a\x24\x41\xa2\x51\x91\x5d\xad\xee\x06\xd6\x89\x56\x8c\x8a\x43\x07\x00\xc2\x98\xcc\xc1\x90\x5a\x45\x9f\x49\xab\xe6\x53\x00\x4a\x26\x98\x8b\xe5\xbb\x00\x8f\x2d\x8e\x62\x78\xf2\x43\x94\xe8\xdc\x68\x85\x8a\x29\x2a\x6d\x29\x9a\x3e\x5b\x0e\xef\x49\x67\x01\x79\x24\x8a\x8c\xd7\x47\xa1\xa0\x50\x78\x6e\x30\x61\x4c\x01\xad\xd5\xf6\xdb\x06\x63\x4d\x72\xc4\x82\x0b\xaa\x63\x30\xc2\x8a\x1c\x19\x6d\x50\x99\xba\xef\xdc\xbf\x81\x77\xa9\x62\x70\x2d\x17\xdc\xb2\x78\x56\x48\x8b\x69\x0c\x6c\x8b\xd0\x16\xcf\x45\x6e\xdc\x1c\x04\x9d\x44\xd1\xd3\xc8\x37\x3d\x45\x4f\x3b\x9b\xc3\xe0\xb9\xc1\x18\x88\xad\x54\xe3\xc6\x03\x23\x98\xd1\xaa\x18\xfe\x0a\x1d\x7f\x8c\x3e\xce\x7e\xfc\x58\x39\xf7\x17\x8f\xab\x55\xf5\x28\xd5\x81\xad\x1b\xa5\x0a\x0a\x26\x85\x95\x3c\x0f\x57\x0c\x51\x58\xb4\xbd\x82\x27\x31\xfc\xf1\x67\xa7\x2c\x71\x86\x8c\x2b\x13\xf6\xca\xdf\xfe\xea\x43\x56\xbe\xf6\x6e\xcc\x99\xb1\x2e\x24\x96\x48\x31\x5c\x5c\x7e\x1f\x23\xa8\xab\xf6\x10\xc7\xc8\x14\xab\xbb\xd4\x3f\x7b\x57\x6b\x8e\x4d\x2a\x36\x8c\xd3\x41\xff\xb7\xde\xdb\x83\x57\x27\xbd\xc3\x37\xc7\xef\x7e\xe9\x0f\xea\xa9\x72\xd9\x06\xed\xbf\x5f\xb9\x0a\x27\x4d\xba\x39\x53\x7b\x98\x1b\x9e\x83\x50\x69\x39\x7a\x78\x56\x88\xcc\xaf\x37\x16\xa7\x52\x17\xe4\x1d\xed\x34\x88\x25\xe0\xbb\x31\x88\xdf\x37\xbc\x7b\x3a\xa9\x0e\x20\x12\xff\xac\xd3\x60\xfc\x5a\xb2\xbd\x39\xd7\xed\x99\xde\xdc\x34\x65\xfb\x2f\xb7\xce\x61\x89\x67\xd1\x41\xad\x19\xbc\x05\x7e\xf1\x9a\xd8\x08\x8b\x8a\x2f\xab\x44\xad\x17\xc7\x01\xed\xbc\x95\xc4\xd4\xa8\x62\x17\x06\x13\x04\x6d\x53\xb4\x8e\x3d\x0a\x45\x06\x13\x39\x92\x98\xc2\xb0\x60\x48\x5d\x33\xe5\x52\x49\x62\x99\x74\xa1\x8f\xb3\x6c\xbe\xc8\xbc\x45\xe1\x26\x21\xf4\x07\x33\x99\x65\x7e\xb3\x57\xe8\x06\x5e\x58\x99\xcd\x61\x88\x20\xd2\x14\x53\x60\xed\x79\x08\x55\x5a\xd2\x98\x24\xc8\x76\xd5\x04\x2e\x88\xfb\x40\x44\x2e\x8e\xe5\x18\xe9\xb0\xc2\xf4\x50\x58\xa9\x6c\xe2\x2f\xcb\x4b\xb7\x40\x47\x8f\x5b\x80\x8f\xf1\x48\xfe\xbd\x4c\xa9\x67\x05\xda\x79\x2b\xf6\x91\xc8\x08\xaf\x05\x4d\x2a\xc6\x31\xda\xc6\x93\x91\xb6\xb9\x60\xff\xec\xc5\xf3\x56\x30\x03\x7d\x8a\xea\x16\xd0\x34\x12\x75\x3b\x5a\x49\xd3\x2a\x6b\xbd\xf4\xe4\xb2\xa4\x90\x7e\xf2\xa2\xc6\x56\x2a\xc9\x2b\x22\x9c\xad\x80\xd8\x89\x4d\xca\xf7\xdc\x07\x3e\x79\xa8\xc2\xe6\x8e\x51\xc8\xb7\x13\x31\x65\xab\xff\x4f\x44\xcc\x02\xa1\x33\xaa\x40\x96\xf6\xfe\x67\xc3\x61\x31\xea\xa9\x2b\x07\x65\xc2\xf5\xf0\x33\x26\x75\xa5\x83\xe3\x76\x27\xac\xcb\xb1\xcd\xc2\xb4\xb4\x96\x6a\x2a\xb2\x02\xb7\x5a\x2d\x58\x77\x38\xaf\x28\xe2\xaa\x31\x77\x04\x96\xe8\xb4\xe5\x7d\xab\x44\xdf\x4e\xf3\xb9\x13\x52\xe3\xed\x80\x53\x64\x21\x33\x5a\xb5\x13\xd6\x8a\x70\x1f\x90\x8c\x39\x35\x9b\x67\x53\xeb\x04\x05\x29\xdb\x64\x95\x6c\x76\xcc\x87\x9f\xdc\xed\xf9\x6f\xb0\x54\xa0\x63\xdd\xc7\xe9\x56\x8b\xa4\x0b\x9b\x34\x0e\xc6\x4b\x07\xe2\x60\x3f\x28\x3f\xcb\xc8\xfd\x5a\x82\x89\x98\xa2\x5f\xee\x4a\xd0\x58\xf0\xa9\x41\x0d\x17\x8d\x9f\xb9\xd3\x5a\x7e\x47\x17\xfe\x7f\x77\xe7\x53\xa9\xa9\x3d\x24\x49\x20\xc7\x4a\x5b\x4c\x61\x36\x69\x6c\xcf\x95\x7c\x96\x6a\xdc\xdc\xe2\x96\x21\x97\x22\x7b\x20\xaf\x95\xaf\xba\x7d\xdc\x61\x65\x8f\x65\x70\xe0\x2b\xfc\x01\xe6\x3f\xbb\x49\x25\x99\x4c\xcc\xfb\xd7\x29\x5f\xf9\xc7\x82\xed\x3d\xbb\x28\xf1\x36\xdb\x4c\x0c\xb1\xad\xbd\x1b\xed\xe6\x3e\x22\x4d\xa5\xf3\x28\xb2\x0f\x2d\xcd\xb7\x1e\x8b\x22\xdf\x0c\x37\x1a\xa0\x56\x8f\xa7\x38\xef\x65\x63\x6d\x25\x4f\xf2\xad\xe1\x9d\xe2\xdc\x29\xca\x9b\xf3\x44\x2a\xc7\x48\x7c\xfd\x17\x8a\x82\xf5\x21\x2a\x9c\xad\x5a\x0e\xb5\xce\x50\xd4\x0d\xbb\xa4\x79\x56\x46\xa8\xdb\xed\xd6\xbc\xb0\x69\x8f\xd9\x91\x24\xca\x8d\x7d\x6b\x14\xc9\x1a\x2a\x82\x1b\x2a\xa6\x2d\x27\xb3\x5d\x99\x7f\xd9\xcf\x17\x67\xe7\x4d\xca\x4f\xe1\x39\x7f\xa8\x0f\x07\x1b\x33\xb9\xe5\x37\x8e\xdb\xe0\xf7\x92\x93\xde\x09\x3a\xfd\xca\x35\xae\xe5\xc9\x91\xb3\xaa\x61\x07\xfa\xa4\x11\xeb\x84\xd9\xd4\xb2\xc6\xdb\xc7\x95\x69\x75\xb3\xbc\x78\x5d\x0d\xe4\xaf\xbf\x0f\x3a\xff\x06\x00\x00\xff\xff\xfa\xfb\xed\xaf\x3d\x1d\x00\x00")

func powersslApiserverV1Certificate_issueYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Certificate_issueYaml,
		"powerssl/apiserver/v1/certificate_issue.yaml",
	)
}

func powersslApiserverV1Certificate_issueYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Certificate_issueYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/certificate_issue.yaml", size: 7485, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1UserYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x73\xd4\x36\x10\x7f\xbf\x4f\xb1\x43\x99\x61\xa6\x25\xbe\x04\xde\xfc\x96\x96\xc2\xa4\x03\x81\xc9\x9f\xf6\x01\x68\xa2\xb3\xd6\x77\x22\xb6\x24\xb4\xeb\xbb\x18\xca\x77\xef\x48\xb2\x2f\xf6\x9d\x93\x5c\xf8\x5b\x52\xf2\x00\xb1\xb5\x5a\xed\xfe\xf6\xb7\xab\xf5\xc6\x58\xd4\xc2\xaa\x14\x1e\x26\xdb\xc9\xf6\x48\xe9\xdc\xa4\x23\x00\x56\x5c\x60\x0a\xd6\x2c\xd0\x11\x15\x63\x61\x15\xa1\x9b\xa3\x1b\xcf\x77\xc6\x15\xa1\x4b\xac\x33\x6c\x46\x00\x73\x74\xa4\x8c\x4e\x61\xbe\x33\x62\x31\x25\xbf\x7b\x0b\xb4\x28\x31\x85\x63\x42\x77\x88\x6e\xae\x32\x1c\x59\xc1\xb3\xb0\xd8\x6a\x08\x0f\x00\x53\xe4\xf8\x0b\x00\x55\x65\x29\x5c\x9d\xc2\x3f\x5b\xcd\x1b\x80\xa7\x8a\x98\x20\xc8\x27\x70\x34\x43\x30\x4e\xa2\x03\x45\x50\x69\xb2\x98\xa9\x5c\xa1\x84\x49\xc5\x20\x91\xd1\x95\x4a\x2b\x62\x95\x25\xb0\x8f\x8b\xa2\x86\xcc\xa1\x60\x94\x4b\x75\x41\x11\x2c\x54\x51\x80\x36\x0c\x1a\x33\x24\x12\x4e\x15\x35\x4c\x10\x84\x94\x28\x81\x0d\xf0\x0c\x01\xb5\x04\x93\x03\xcf\x14\x41\xa1\x88\x93\x46\x89\xb1\xe8\x04\x2b\xa3\xf7\x64\xcf\xc3\x13\x6f\x6a\x23\xe3\x90\xac\xd1\x84\x94\x2e\x4f\xbe\xf3\x60\x7b\xfb\xce\xc5\x23\x80\x44\xca\x9c\xb2\x1c\xc0\xdb\x05\xaa\x32\x6f\x4b\x5e\x15\xcb\xdd\x49\x47\x3a\x33\x9a\x51\x73\x57\x01\x80\xb0\xb6\x50\x59\x30\x66\xfc\x86\x8c\xee\xaf\x02\x50\x36\xc3\x52\xac\xbe\x05\xb8\xeb\x30\x4f\xe1\xde\x4f\xe3\xcc\x94\xd6\x68\xd4\x4c\xe3\x28\x4b\xe3\xf9\x8e\xf7\xc3\xfb\x45\x07\x8d\x1d\xf7\x46\x17\x36\xe7\xa2\x2a\xf8\x72\x37\x34\x54\x1a\xcf\x2d\x66\x8c\x12\xd0\x39\xe3\xbe\xad\x37\xce\x66\x87\x2c\xb8\xa2\xd6\x07\x2b\x9c\x28\x3d\x53\x3a\xa1\x69\xe9\x6a\xc5\x14\x0f\xd5\x3b\xbc\xcc\xbb\x0e\x2d\xfd\xcf\x01\xbe\xad\x90\xbc\xa3\x7e\x23\x90\x7a\x87\x09\x1c\x86\x2c\x81\x52\xd4\xe0\x90\x2b\xa7\x21\xc7\x05\xba\x86\x78\x3c\x13\x1a\x5c\xbb\x2f\xe9\xa9\xdb\xcb\xbb\x94\xbe\x0f\x31\xdf\x22\x57\xad\xca\xce\x40\x68\x0f\x91\x33\xd6\x29\xc1\xd8\xc6\xa2\xab\x44\xe9\x14\xde\x56\xe8\xea\xce\x3b\x7f\x9a\x72\x28\x53\xc8\x45\x41\x5d\xdf\x86\xf0\xe4\xda\x62\x0a\x4a\x33\x4e\xd1\xf5\x56\x72\xe3\x4a\xc1\x61\xed\xe1\x83\x41\xe8\x8e\xcc\x19\xea\x0d\xb1\xdb\x05\xf6\xd2\xa0\x24\x6a\x56\x79\xad\xf4\x14\x44\xc4\xd1\xe4\x9e\x32\x55\xc1\x14\xd2\xb0\x81\x81\x66\xa6\x2a\x64\x83\x69\x1f\xb8\xa3\xda\xaa\x4c\x14\x45\x7d\x3f\x26\xab\x8a\x1b\xe7\xa2\xa8\xbc\xb6\x9e\xec\xcb\x35\x72\x27\x1a\xcf\xf9\xc4\x9f\x7c\x12\x4c\x7a\xfd\xb2\x2d\x7a\xc9\xb2\xe8\x25\xf3\x9d\xe4\xfa\x8d\x7d\xab\xa2\xa5\x28\x21\x77\xa6\x0c\x06\x59\x87\x73\x65\x2a\x02\x6f\xac\xaf\x32\xa7\x5e\xe7\x29\x94\xc8\x33\x23\xbf\x44\x1c\x89\x9d\xd2\xd3\x66\xa1\x2d\xce\x6d\xe0\xba\xc5\xb9\x51\x84\x59\xe5\x14\xd7\x5d\xa9\x09\x0a\x87\x6e\xb7\xe2\x59\x0a\x2f\x5f\x87\x05\x6b\x68\xbd\x64\xff\x16\x0a\x2d\x81\x08\x4c\xbf\x0f\x42\xb7\xc1\x8a\xd1\xd0\xb8\x08\x27\x5e\x5b\x45\xa3\xa2\xdb\x50\x47\xbd\x57\xb7\xa9\x74\x36\x75\xeb\x57\x23\x3b\x0c\x19\x30\xe7\x6a\x63\x86\x4d\xb9\x1a\xc9\xc8\x09\x8f\x67\x53\x73\x2f\x60\xbd\x48\x0b\x76\x15\x7e\x5e\xaa\xfb\x4e\xe5\xbd\xaf\x6f\x1f\x2e\x6f\x55\x9e\x20\xb7\xa4\x4f\xe0\xa0\x21\xfc\xfe\xf3\xa3\x93\xc7\xcf\x8f\xf7\x1f\x81\xca\x03\xfb\xfd\x32\x48\x83\x14\xba\x0e\x3c\xdf\xa4\x9d\x78\x82\xb7\xa2\x9b\xb8\x6d\x59\x70\x55\x03\xe1\xff\xbd\xcc\x33\xdf\xbb\xfa\xf5\xd8\x53\x36\x94\x60\xe3\x8b\xa4\x53\x38\xc7\xd5\xfa\xef\xfb\xe5\xc1\xf2\xdf\xe1\xb9\xff\xc1\x73\x51\x5a\xdf\xab\x87\x0e\x63\xfc\xf3\xcd\x2f\x86\xd6\x2f\x66\x74\x3a\x85\xbf\x83\xa2\x57\xe3\x57\x8b\x5f\xee\x7e\xee\xab\x43\x62\x81\x8c\x6b\x49\xf4\x28\xbc\xfe\x42\x79\x14\x95\x7f\x1f\xa9\xe4\xbb\x3b\x74\xac\x90\x52\x78\xff\xe1\x47\xd6\x5c\x9a\x35\x91\x48\xff\x8b\x9c\xb1\xd5\x95\x1f\xc8\xc7\x56\x8a\xa1\xdc\xd9\xdb\xff\x73\xf7\xe9\xde\xa3\x93\xdd\x83\x27\xc7\xcf\x7e\xdf\x3f\x6a\x53\x68\x15\xcd\xa5\x22\xe5\x93\x4a\x6f\x61\x69\xb9\x0e\xed\x5b\xc8\x33\x7c\x5b\x89\xa2\xdf\xbe\x7a\x0d\xd7\x66\x5d\x34\xeb\xfb\xc8\xba\x1f\x17\xd8\xa7\xa4\x62\x15\x22\xfd\x5f\x4e\xc5\x6f\xd7\xb8\xc6\x2c\xf8\xca\x8d\xeb\x85\x25\x5e\xa8\x31\x26\xca\x87\xa1\xdd\xa4\xca\x77\xf5\x52\x41\x44\xd4\x4c\xde\x60\xd6\xf6\x9b\x9d\x5b\x68\xd4\x05\xfe\xd8\x15\x5d\xf7\x07\x63\x11\xbe\xba\xaf\x95\xba\x18\x27\x4c\xea\xa6\x4a\x2c\x79\x7a\x43\xc3\x32\x23\x07\xce\x5b\x9f\x60\x0c\xcf\x2f\x4a\x24\x12\xd3\xeb\x0d\x96\xc8\x42\x15\xb4\x2e\x27\x9c\x13\xdd\xcf\x74\xc5\x58\x52\x9f\x24\x57\x51\xa4\x13\x90\x48\x8d\x81\x8f\x9d\x1b\x02\xe2\xf9\xdf\x35\x60\xf3\xea\xd6\x4b\xf7\xe6\xf0\x16\x21\x8f\x5f\x97\x8e\x49\x34\x33\x69\x8c\x5e\x9b\x8e\x7c\x84\xd1\x9f\x1f\xdd\xd5\xe2\x3d\x50\xd1\x0a\x45\xec\x2b\x5a\x9c\x30\x2f\x25\x35\x9e\xf3\x8b\x76\xa6\xb5\x01\x9d\x37\x99\x75\x75\x9a\xfd\xa0\x7f\x75\xdc\xd5\x9f\x1f\xbd\x10\x44\x71\x9e\x15\x07\x59\x4a\xfb\xaa\xdb\x13\xe9\x0e\xb3\x42\xb0\x92\x1b\x8d\xb1\xd6\xb6\xf4\x94\xe7\x0a\x0b\xd9\x9c\x0a\x54\x4d\xc8\xcb\x6b\x1e\x1e\x5e\xf5\x7c\x8b\xe3\x9e\x73\x5e\xa9\xcf\x83\xbe\xae\x50\x2e\x72\xe7\x52\xce\x3d\x5d\xf6\xfb\x03\xa5\xf5\x86\x8c\x0b\x17\xde\x0d\x03\xbb\xe9\x15\x18\x9f\x9f\x09\x3a\xfb\x98\x13\x22\xf2\xa5\xa0\x33\x58\x28\x9e\x85\xab\x94\x06\x8f\xf9\x3a\x99\x7e\xdc\x39\x36\xaa\xf9\x0a\x50\xaf\xe4\x90\xc7\xc5\x21\x99\xca\x65\xeb\x21\xe8\x27\x8e\x37\x30\x88\x10\xcc\x44\x43\x47\x5f\xfc\xe1\x34\xb6\x18\xef\xfd\x7f\x27\x4a\x7e\x38\x4d\xd6\x8e\x08\x9a\x15\x81\x9a\x6a\xe3\x50\xc2\x62\x86\x3a\xfe\x0d\x29\x0e\xa8\xfb\xa7\xc5\x3f\x2e\x1d\xa9\x8d\xbc\x6b\xef\x1f\x8f\xe5\x16\xab\x4e\x9f\x15\xc3\xfa\xc9\x6a\xa4\x22\x5b\x88\x7a\x7f\x13\xb0\xbd\x1f\x1b\x08\xae\xf4\xe4\x01\xd9\x24\xf1\x00\xb4\x6d\xc8\xa1\xa7\x57\x1b\xeb\x4e\x1f\xd2\x23\xc8\x8c\xd9\xb6\xed\x4b\x90\x4f\x1b\xd1\xe6\x65\x7c\x78\xdc\x78\xf6\xc7\x5f\x47\xa3\x7f\x03\x00\x00\xff\xff\xd5\x01\x7b\x89\x96\x1c\x00\x00")

func powersslApiserverV1UserYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1UserYaml,
		"powerssl/apiserver/v1/user.yaml",
	)
}

func powersslApiserverV1UserYaml() (*asset, error) {
	bytes, err := powersslApiserverV1UserYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/user.yaml", size: 7318, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"powerssl/apiserver/v1/acme_account.yaml":      powersslApiserverV1Acme_accountYaml,
	"powerssl/apiserver/v1/acme_server.yaml":       powersslApiserverV1Acme_serverYaml,
	"powerssl/apiserver/v1/certificate.yaml":       powersslApiserverV1CertificateYaml,
	"powerssl/apiserver/v1/certificate_issue.yaml": powersslApiserverV1Certificate_issueYaml,
	"powerssl/apiserver/v1/user.yaml":              powersslApiserverV1UserYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"powerssl": &bintree{nil, map[string]*bintree{
		"apiserver": &bintree{nil, map[string]*bintree{
			"v1": &bintree{nil, map[string]*bintree{
				"acme_account.yaml":      &bintree{powersslApiserverV1Acme_accountYaml, map[string]*bintree{}},
				"acme_server.yaml":       &bintree{powersslApiserverV1Acme_serverYaml, map[string]*bintree{}},
				"certificate.yaml":       &bintree{powersslApiserverV1CertificateYaml, map[string]*bintree{}},
				"certificate_issue.yaml": &bintree{powersslApiserverV1Certificate_issueYaml, map[string]*bintree{}},
				"user.yaml":              &bintree{powersslApiserverV1UserYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
