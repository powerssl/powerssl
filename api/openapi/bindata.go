// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package openapi generated by go-bindata.// sources:
// powerssl/apiserver/v1/acme_account.yaml
// powerssl/apiserver/v1/acme_server.yaml
// powerssl/apiserver/v1/certificate.yaml
// powerssl/apiserver/v1/certificate_issue.yaml
// powerssl/apiserver/v1/user.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _powersslApiserverV1Acme_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x0c\x52\x03\x06\x52\xc4\xb4\x93\x1b\x4f\x55\xd3\x0f\xb4\x68\xda\xa0\x72\xd0\x43\xdd\x06\xa3\xe5\x48\xde\x84\xdc\xdd\xcc\x0c\x15\xbb\x81\xff\x7b\xc1\x2f\x8b\x14\x19\x59\x72\xdd\xb4\x8e\x75\x31\x4c\xee\xe3\xec\x9b\x99\xb7\x4f\x43\xfa\x40\x0e\x83\x4d\xe0\xd9\xd1\xf1\xd1\x71\x64\xdd\xdc\x27\x11\x80\x5a\xcd\x28\x81\xe0\xdf\x13\x8b\x64\x31\x06\x2b\xc4\x4b\xe2\x78\x79\x12\xa3\xc9\xe9\x35\x1a\xe3\x0b\xa7\x47\x81\xbd\xfa\x08\x60\x49\x2c\xd6\xbb\x04\x96\x27\x91\xe2\x42\xca\x28\x4f\xc0\x61\x4e\x09\x4c\x9e\xbf\xf8\x76\x52\xe3\xa7\xc4\x4b\x6b\x28\x0a\xa8\xe7\x15\xa6\x0c\xf8\xa1\x84\x5d\x95\x57\x00\x0b\xd2\xfa\x1f\x00\x1f\x88\x51\xad\x77\x3f\xa4\x63\x31\x5e\x7f\x4f\xda\x20\x99\x24\x78\x27\x24\xed\xa3\x00\x8f\x9e\x1e\x1f\x3f\x5a\x5d\x02\xa4\x24\x86\x6d\xd0\x8a\xe4\x04\xa4\x30\x86\x44\xe6\x45\x76\xfd\xf4\x51\x07\x6d\xbc\x53\x72\xda\x0d\x00\x80\x21\x64\xd6\x54\x94\xe2\x37\xe2\x5d\x7f\x15\x40\xcc\x39\xe5\xb8\x7e\x17\xe0\x80\x69\x9e\xc0\xe1\x17\xb1\xf1\x79\xf0\x8e\x9c\x4a\x5c\x63\x25\x5e\x9e\x74\x32\x3b\x8c\x56\x6c\xe7\x58\x64\xfa\xf1\x04\x1c\x14\x8e\x2e\x02\x19\xa5\x14\x88\xd9\xf3\x7f\x9b\x07\x07\x33\x55\xd4\x42\xda\x1c\x02\x32\xe6\xa4\xc4\x9d\xa6\xb4\x82\x28\xff\x76\xa2\x5b\x97\x40\x29\x88\xce\x2d\xa6\x77\x85\x65\x4a\x13\x50\x2e\xba\x58\xba\xc0\x3c\x94\xda\x2c\x55\x38\xad\x34\x29\xf1\xe3\x4a\x93\x4d\x11\x25\x7e\x1c\x6d\xce\x45\x2f\x03\x25\x20\xca\xd6\x2d\x7a\x0b\x01\x55\x89\x5d\x02\x7f\x76\xa2\x9f\xc5\x67\xef\xbf\x3c\xeb\xed\x50\xdd\x3a\x68\x1e\x6d\xd5\xde\xa6\x38\xa2\xf6\x86\x0a\x99\x82\xad\x5e\x76\xc1\x33\x42\x26\x9e\x14\x7a\x9e\xc0\xef\x7f\x44\x75\x9f\x33\x52\xda\xf6\x10\x7c\x53\xa1\xef\xc7\x39\x08\x5c\x66\xa3\x96\x24\x81\x0f\x57\x7b\xad\x43\xdb\xb5\x07\xab\xf5\x50\x6c\xed\xf6\xaf\x42\x8a\xf7\x45\xe8\x7b\xc3\xbf\x6e\xfa\x67\x78\x08\x4a\xaa\x24\xfa\xb5\x4f\x3b\xf2\x1e\xa9\xfb\xe6\xaa\x8f\xd7\xbc\x66\xea\x67\x6f\xc8\xe8\xda\x52\xc7\x3d\x07\x8d\x2a\xaa\xc3\xf1\x02\xe5\xed\x70\x6d\x43\xfa\x15\xcb\x55\x9a\x63\xcf\xde\x42\xca\xa3\xad\xbc\x5b\xe7\xa8\xa6\xc6\x80\x4c\x4e\xaf\x7a\x8d\xda\x79\x88\xfc\xc9\xca\x67\x31\x45\x96\x79\x74\xd2\x93\x5f\x1b\x3a\x0f\xc5\x61\x6a\x31\xdc\xa9\xc7\xdc\xbd\xa9\x1c\x0c\x68\xbf\x2b\x88\x2f\xd7\x58\xaf\xdf\x5b\xd1\x9e\x63\x26\x74\x1b\x5a\xab\x2a\x2d\xe8\xd4\xbf\x25\xf7\x69\xb7\x9c\xda\xbf\xd6\xed\xff\x2e\x76\xb4\x4e\x69\x41\xdc\x5b\x99\x7b\xce\x51\xab\xb5\x67\x4f\xff\xad\xa9\xc5\xcb\xd6\xfe\xf2\x9c\x69\x3f\xb6\xec\x4d\xe5\x13\x98\xca\xff\x70\x2c\xb9\x87\xb3\xc5\x8a\x4a\x09\x6a\xd8\xd4\xf8\xea\x53\xd7\xac\x98\x4f\xdc\x75\x80\x91\xba\x8c\xd5\xe3\xf0\xab\x12\x78\xd8\xad\xc1\x48\xa3\x31\x4d\x6d\xd9\x15\xcc\x5e\x0e\x5f\x94\xaf\x75\xbb\xe3\xd6\xc6\xa7\x34\xdc\x77\xe8\x9c\x63\xbe\x09\x90\x93\x08\x2e\x46\x02\xac\x29\x34\x25\x45\x9b\xc9\x10\x87\xcc\xd8\xfb\x7d\x53\xca\xd7\x84\xb2\x49\x05\x9d\x92\xd7\x1a\xe8\xc9\x62\xc7\x52\x54\x67\xfa\xa6\x4c\x4c\xe5\xd7\xa7\x76\x0b\xe8\xaa\x68\xe5\xf0\xfd\x44\x6d\xe7\x1d\xa7\x1e\xc8\xff\x71\x98\xd4\x4a\xc8\xf0\xf2\xe7\x6d\x98\xd7\xdf\x6c\x6f\xee\xd4\xca\x9d\x6f\xc2\x66\x38\xa3\xb1\xa6\x0e\x7c\x60\x54\xb9\x37\xfb\x9a\x12\xe7\xf2\xcb\xbc\x39\xa3\x93\x05\x13\xa5\xc3\xdd\x66\xde\x67\x84\xae\x67\x69\x68\xf4\x76\x62\x1b\xe5\xd1\x7c\xcb\x7e\xc5\xd9\xc6\x92\x7c\x7c\xc8\xde\x51\x88\xc3\x17\x96\x1d\xb3\xb8\x85\x71\x3a\xba\xd0\x97\xed\xf4\xb7\x21\xcd\xd6\x22\xa7\x65\xb8\x96\x74\xc7\x23\x7b\x99\x9e\xab\x86\xd6\x5a\x2b\x7c\xd2\x40\x9b\x9b\xf5\xc5\x77\x8d\xbc\x7f\xfc\xed\x34\xfa\x3b\x00\x00\xff\xff\x6d\xd2\x51\x87\x70\x18\x00\x00")

func powersslApiserverV1Acme_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Acme_accountYaml,
		"powerssl/apiserver/v1/acme_account.yaml",
	)
}

func powersslApiserverV1Acme_accountYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Acme_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/acme_account.yaml", size: 6256, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1Acme_serverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x6f\xeb\x36\x0c\x7e\xf7\xaf\x20\xce\x0e\x10\x60\xc3\x89\xd3\xd3\x37\x3f\x2d\xeb\x2e\xd8\xb0\x0e\x45\xd3\x62\x0f\xeb\x56\x28\x32\x93\xa8\xb5\x25\x95\xa2\xd3\x66\x45\xff\xfb\x20\x5f\x62\x27\x76\x73\xe9\x96\x0d\x0b\x9a\x07\x23\xb6\x68\xea\x23\xf9\xf1\x93\x64\x63\x51\x0b\xab\x22\x38\xed\x0f\xfa\x83\x40\xe9\x89\x89\x02\x00\x56\x9c\x60\x04\xd6\x3c\x22\x39\x97\x84\xc2\x2a\x87\x34\x47\x0a\xe7\x27\xa1\x90\x29\xde\x16\xb7\x7d\x4b\x86\x4d\x00\x30\x47\x72\xca\xe8\x08\xe6\x27\x01\x8b\xa9\xf3\x4e\x3e\x81\x16\x29\x46\x30\x3c\x3b\xff\x6e\x94\x9b\xfb\xab\x92\x18\x58\xc1\xb3\xdc\xa4\x72\x57\x0c\xe7\x8f\x00\xa6\xc8\xc5\x1f\x00\x63\x91\x04\x2b\xa3\x7f\x8c\x3b\xfc\xdc\xfe\xac\x1c\x97\x96\x84\xce\x1a\xed\xd0\x55\xaf\x02\x7c\xf8\x3c\x18\x7c\xa8\x6f\x01\x62\x74\x92\x94\xe5\x1c\xe8\x10\x5c\x26\x25\x3a\x37\xc9\x92\xe5\xdb\xfd\x86\xb5\x34\x9a\x51\x73\xd3\x01\x80\xb0\x36\x51\x32\x87\x14\xde\x39\xa3\x57\x47\x01\x9c\x9c\x61\x2a\xd6\x9f\x02\x7c\x24\x9c\x44\xd0\xfb\x22\x94\x26\xb5\x46\xa3\x66\x17\x16\xb6\x2e\x9c\x9f\xf8\x38\xea\xe8\xdc\x65\x89\xa6\x17\xd4\xc8\x27\x22\x4b\xf8\xf5\x60\x34\x64\x1a\x9f\x2c\x4a\xc6\x18\x90\xc8\xd0\x7f\x1b\x13\x59\x39\x62\xc1\x99\xab\x62\xb0\x82\x44\x8a\xbc\x2c\xb2\xff\x55\x04\x79\xc8\x90\x16\x0d\xf7\x4a\xb7\x9f\x11\x3e\x64\x8a\x30\x8e\x60\x22\x12\x87\xc1\x66\x78\xbc\xb0\x18\x81\x63\x52\x7a\xda\x9a\xce\x8a\x29\x5e\x99\x7b\xd4\xff\xee\x94\x23\xf5\x27\x1e\x60\x46\xa5\x19\xa7\x48\x2b\x23\x13\x43\xa9\xe0\x7c\xec\xf4\x73\x39\x52\x75\x65\x05\xac\xdd\x95\xe5\x4c\x28\x33\x52\xbc\x68\xda\x8e\x51\x10\xd2\x30\xe3\x59\x04\xbf\xfd\x9e\x0f\x58\xe3\x76\xed\xd2\x33\x42\xc1\x78\x0c\x7d\x5a\xc7\x76\x4c\xad\xe9\x59\x87\x8e\xbf\x31\x71\xa3\xe8\x1d\x70\x36\x83\xe9\x86\xb2\x39\x9f\x05\x33\xea\xac\x5e\x16\x48\xea\xe4\xd6\x0d\xc1\x94\xe1\x21\x98\xec\x57\xa0\x67\xdf\xa4\x2f\xfb\x2e\x3e\x3f\xe0\x51\xac\x3d\xc7\xc9\xe9\x4d\xcb\x8d\xbf\xae\x09\xb1\xdf\x90\x74\xea\x70\x83\x76\xfe\x87\x4f\x22\xb5\x7e\x67\xd4\xd8\xb4\x84\x5f\xbe\x65\x65\x28\x40\x32\x23\xe9\x08\xfe\x68\xb8\xbb\x09\x6f\x1e\xbf\xfa\x78\x18\xd1\x8e\x31\x41\xc6\x1d\xf9\xfd\x6d\x6e\xfc\xff\xa0\xb8\x25\x1f\x0c\x2b\x74\x11\x3c\xbf\xbc\xf3\x18\xaa\xaa\x1d\x27\x8f\x6d\xb6\xab\x48\x5f\xdb\xf8\x7d\xef\xf1\xce\xef\x43\xf3\xfb\x90\x5b\xa8\x02\x96\x19\xdf\xa1\xe4\xb5\xa1\x86\xec\xb5\xca\x90\xe5\xcc\x3f\x17\xee\xbe\x3d\xb6\x21\xd6\x1c\xe5\x32\xca\xae\x57\xf7\xa7\xe9\xa1\x77\x71\x35\x10\x6f\x54\x62\x29\xec\xf3\xef\x13\xe3\x6c\x32\xd4\x4b\x07\x1d\xf9\xec\xca\x63\xef\x6b\x6f\xd8\x6b\x66\xa0\x23\x69\x22\x8e\x95\xaf\xa6\x48\x2e\xda\x4b\xd0\x92\xed\x7b\x4e\x2d\x4d\x8c\xed\x79\xdb\x07\xbd\xae\x63\x1e\x40\x8a\xce\x89\x69\x87\x83\xb5\x6a\xc7\xc8\x42\x25\xae\x6d\x27\x88\xc4\xca\x71\x9c\x31\x5d\x23\xd8\x26\x0e\x34\x52\x5e\x50\xa0\x49\x8a\x3d\x33\x91\x0b\xc1\xb6\x40\x64\x7e\x8a\xb8\x52\x3b\x98\xd6\x39\xf3\xcd\xf1\x89\x55\x43\x61\x8a\x86\xf9\xdb\x6e\x62\xe5\x6c\x22\x16\xbf\xec\x82\xbc\xf8\xcc\xb6\xbd\x50\xb5\xa4\x6f\xb3\x4d\xc4\x18\xbb\x6a\xda\x92\x8f\x4e\xe2\x6e\x97\xc3\x58\x11\x4a\x36\xb4\xb8\xa6\x64\x2b\x98\x9c\xb1\xc5\xea\xbc\x35\x1d\xaf\x1e\x06\xf7\x64\x4c\xb7\x76\xed\xa7\x59\xaf\x7e\x90\x7b\x33\x96\x7f\xbe\xcb\xba\x95\x56\xe3\x13\x5f\x54\x9f\xb7\x36\xe4\xbb\x12\xd5\x91\xf7\x56\x41\x6e\xa8\xea\x4a\x9c\x33\x66\x5b\x89\x71\x6e\x1f\x95\xa6\xe5\xc3\xe2\xe6\xfb\xb2\x23\x7e\xfa\xf5\x2a\xf8\x2b\x00\x00\xff\xff\x13\xeb\x04\xd4\x56\x16\x00\x00")

func powersslApiserverV1Acme_serverYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Acme_serverYaml,
		"powerssl/apiserver/v1/acme_server.yaml",
	)
}

func powersslApiserverV1Acme_serverYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Acme_serverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/acme_server.yaml", size: 5718, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1CertificateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6f\x6f\xdb\x36\x13\x7f\xef\x4f\x71\xe8\x53\x20\xc0\xf3\x34\x72\xd2\xe2\xd9\x0b\xbf\x9a\xd7\xa4\xa9\xd7\x34\x0d\x62\x67\xc3\xd0\x76\x0e\x2d\x9d\x6c\x36\x12\xa9\x90\x27\x3b\x6e\xd7\xef\x3e\x90\x94\x62\xca\x92\xed\xc4\x6d\x3a\x34\xab\x5e\x04\xb1\x74\x3c\xde\xbf\xdf\xdd\x91\x27\x33\x14\x2c\xe3\x1d\x78\x16\xec\x05\x7b\x2d\x2e\x62\xd9\x69\x01\x10\xa7\x04\x3b\x90\xc9\x19\x2a\xad\x93\x36\xcb\xb8\x46\x35\x45\xd5\x9e\xee\xb7\x43\x54\xc4\x63\x1e\x32\xc2\x20\x53\x92\x64\x0b\x60\x8a\x4a\x73\x29\x3a\x30\xdd\x6f\x11\x1b\x6b\xc3\x64\x17\x04\x4b\xb1\x03\xcf\x17\xf4\x7d\x54\x53\x1e\x62\x2b\x63\x34\xb1\x34\x4b\xfc\xec\x3b\x80\x31\x92\xfb\x07\x40\xe7\x69\xca\xd4\xbc\x03\x7f\xed\x16\x6f\x00\x8e\xb9\x26\x0d\xfe\xb2\x00\x06\x13\x04\xa9\x22\x54\xc0\x35\xe4\x42\x67\x18\xf2\x98\x63\x04\xa3\x9c\x20\x42\x42\x95\x72\xc1\x35\xf1\x30\x80\x13\x9c\x25\xf3\x1b\x6e\xa1\x42\x46\x18\x55\xf8\xc1\x8c\x27\x09\x08\x49\x20\x30\x44\xad\x99\xe2\xc9\x1c\x46\x08\x2c\x8a\x30\x02\x92\x40\x13\x04\x14\x11\xc8\x18\x68\xc2\x35\x24\x5c\x53\x50\xf0\x94\x19\x2a\x46\x5c\x8a\x5e\xd4\xa4\xfd\xd0\xc8\x5f\x90\x2a\xd4\x99\x14\xba\x54\xdc\x3c\x8f\x9e\xee\xed\x3d\x5a\xfc\x04\x88\x50\x87\x8a\x67\x64\xed\xdb\x05\x9d\x87\x46\xa4\x38\x4f\x6e\x56\x07\x1e\x75\x28\x05\xa1\x20\x9f\x01\x00\xcb\xb2\xc4\x88\xc0\xa5\x68\x7f\xd0\x52\x54\xbf\x02\xe8\x70\x82\x29\x5b\x7e\x0b\xf0\x58\x61\xdc\x81\x9d\xff\xb4\x43\x99\x66\x52\xa0\x20\xdd\x76\xb4\xba\x3d\xdd\x37\x7a\x78\xea\xe9\xb3\x42\x9c\x9d\xd6\x42\xf4\x98\xe5\x09\xad\xd6\x46\x40\x2e\xf0\x3a\xc3\xd0\x78\x00\x95\x92\xea\x9f\x55\x4a\x65\x61\x9f\x18\xe5\xba\xd4\x21\x63\x8a\xa5\x26\x7c\x3c\x0f\x95\x81\x7d\x95\xa3\x9a\x7b\xec\xb9\xa8\xbf\x53\x78\x95\x73\x85\x51\x07\x62\x96\x68\x6c\xad\x17\x8f\xe6\x19\x76\x40\x93\xe2\x62\x5c\xdb\x2e\x63\x63\x1c\xc8\x4b\x14\xab\xac\xe9\x41\xc4\x3c\x5d\x20\x43\x0d\x3c\x42\x41\x3c\x9e\x73\x31\x06\x66\xb9\x98\xa8\x55\xa8\xf3\x84\xb4\x0d\x64\x87\x6d\xd0\x13\x99\x27\x11\x28\xa4\x5c\x89\xa0\xc2\x6b\x30\xcf\x78\xc8\x92\x64\xfe\xc4\x85\x3b\x77\x0b\xa7\x2c\xc9\x0d\xb7\x0a\xed\xdb\x55\x71\x11\x08\xbc\xa6\xa1\x11\x60\x68\x25\x7b\xff\xb6\x4c\x30\xc1\x4d\x82\x09\xa6\xfb\xc1\xad\xd7\x57\x65\x74\x72\x63\x04\xb1\x92\xa9\x15\x2f\x53\x38\xe5\x32\xd7\x60\x44\x37\xa8\xbd\x30\xac\x2f\x20\x45\x9a\xc8\x28\xf8\xb6\xae\xeb\xf3\x8f\x78\x4b\xcf\x9d\xe1\x55\x8e\xda\x40\xc2\x7a\x4b\xf3\x8f\x18\x40\xdf\x39\x29\x65\xf3\x42\x53\x88\x71\x86\xaa\x9a\xb7\x68\xc2\x84\x15\xdc\x2e\xaf\xda\xa7\x17\xfb\x89\xf1\x49\xe9\x75\x9b\xea\x32\x1e\x5e\x02\x13\x06\x53\x4a\x66\x8a\x33\xc2\x12\xbc\xf7\x61\x26\x2e\x08\xc7\xa8\x2a\x5f\x62\xa9\x52\x46\xf6\xdb\xb3\xa7\xc5\x97\xb2\x94\x94\xd6\x6c\x28\x25\xc5\x56\x18\xe6\x8a\xd3\xdc\x27\x1e\x21\x53\xa8\xba\x39\x4d\x3a\xf0\xf6\xbd\xfd\x90\x49\x5d\xaf\x2c\xcf\x6d\x01\xd0\xc0\x7c\x53\x3e\x01\x26\x4a\x28\xb8\x58\x17\x38\xf3\xf7\xbf\x6d\xb2\x77\xdc\x1f\x42\xba\xf7\x94\x7b\x48\x19\xbe\x40\xcb\x2f\x32\xf2\xa2\xa7\x41\x9c\xf5\xc2\x34\x8b\xb2\xc1\xa0\x36\x34\x3c\xb3\x16\xb8\x5f\x58\x77\x81\x2d\x52\x39\xde\x0b\x28\x4c\x07\xf6\xc9\x64\xa9\xcf\xab\x7b\xaf\x23\xa4\x25\x78\x04\x70\x56\x40\xe3\xe4\xcd\x60\xf8\xe2\xcd\xf9\xc9\x01\xf0\xd8\xe2\xc4\xa3\x82\x48\xa2\xb6\x6d\x14\x5e\xdf\xa1\x3f\x3a\xc2\x07\xd1\x1e\x3d\x50\xbc\xac\xeb\x88\xcc\xdf\x55\x9a\x99\x0e\xdd\x7c\x77\x2d\x73\x35\x4e\x48\x9a\x54\xab\x38\x4e\x71\xb9\xdc\x98\xa3\x42\x63\xb5\xf1\x10\x61\x1e\xbc\x66\x69\x66\x0e\x2d\x7e\x3d\x6c\xff\x77\x9b\xaa\xed\xb4\x24\x42\x25\x3a\xf0\xa7\xcf\xef\x5d\xfb\xdd\xec\x7f\x8f\xef\xa9\x38\x45\x98\x20\x61\x0d\x7c\x07\xf6\xf5\xb7\xc4\x9f\xdb\xf1\xfb\x80\xa0\x69\x57\x8c\x06\xa8\x3b\xf0\xe9\xf3\x0f\x98\x6d\x82\x99\x0b\xb2\x7f\x2f\xc8\xb2\x7c\xed\xd5\xc2\x79\x16\xd5\x7b\xc1\x05\xd8\x7a\x27\xbf\x75\x8f\x7b\x07\xc3\xee\xd9\xd1\xf9\xeb\xc3\x93\x41\x89\x39\xcf\xe0\x8b\x16\xc2\x33\x3c\x37\x28\x14\xbb\x98\x66\x34\xb7\x8d\xa5\x05\x26\x5e\xe5\x2c\xa9\x1e\x54\x0c\xa3\xdb\xc2\xd4\xc9\xfa\x7d\xc0\xf4\x47\xa5\x2c\x9e\xaf\x00\xe1\xdc\xfa\xfd\xfb\x81\xf0\x7d\x36\xd8\x4e\x2e\x39\xfa\x80\x21\x2d\x7d\xf2\x2a\x43\xcd\x8d\xce\x84\xaf\x99\xbe\xac\x7f\x5b\xa3\xac\x7b\x6a\xbe\x8a\x39\x26\x11\xa4\x4c\x5f\xc2\x8c\xd3\xc4\xba\x42\x37\x7b\xaa\x50\x7e\x61\xaa\xa6\xfd\xb7\x00\x4b\x83\x64\xc5\x61\x02\x52\xd4\x9a\x8d\xd1\x9c\xaf\x1b\xb2\x48\x70\xbe\x24\xe3\xbd\x1f\x39\x16\x4a\x19\xa2\x42\x2f\x47\x6f\x6f\x93\x47\x79\xdc\x15\x37\x0c\x1a\x1c\xdc\xe4\xd8\x9d\x9f\x0d\xe1\x8e\x6f\xcd\x06\x2f\xb2\x28\xe2\xc6\x38\x2c\x39\xad\xb7\x0d\x37\xf0\xbd\xe3\xd6\xa1\x8c\xb0\xbe\x6f\xfd\x86\xa3\xe9\x7e\x03\x4a\xef\x6c\x10\xdc\xb8\x96\x18\x4f\x74\x9d\x8e\x29\xc5\x2a\x97\x90\x84\xe9\x52\xc4\xaf\x8b\x27\xcf\xe4\x2e\x9a\x2a\x01\x76\x47\x53\xd8\xd4\xb6\x49\x93\xf5\x57\x5f\x06\x4f\x0a\xb5\xcc\x55\xb8\x32\x09\x56\x01\xe5\x89\x6b\x17\x68\x98\xb0\x29\xda\x35\xc6\xe4\x70\x51\x49\x74\x9f\xbc\x5f\x43\x1e\x7d\xbe\x08\x6a\xdb\xdb\x5d\xb9\x06\x3e\x16\x52\x61\x04\xb3\x09\x0a\x37\x25\x70\x37\xa8\x8d\x92\xb8\x29\xc2\x80\xdf\xca\x00\x65\x28\x18\xe4\xed\x12\xf7\x2a\x81\xcb\x18\x5f\xcc\x26\xe2\x3a\x4b\xd8\xfc\xe4\x36\xfe\x70\xb3\x9e\xcd\xf1\xb7\xf0\xd9\x26\xda\x84\x8d\xb0\x29\x54\x6b\x69\xba\x11\x8f\x9b\xeb\x4e\x24\xb4\x75\xf4\x56\x60\x68\xe4\x78\x89\xf3\x6e\x32\x96\x8a\xd3\x24\xf5\xc9\xd7\x67\xe2\x57\xde\xaa\x1d\x9f\x57\x9f\x7f\xfc\x82\x94\x10\xf1\x31\x6a\xda\x42\x9e\x83\xea\xc2\x85\x48\x2c\x27\x79\x86\x02\x67\x75\xa1\x46\x52\x26\xc8\xca\x91\xc2\x52\x87\xe8\x43\x2b\x08\x82\x32\x3f\xac\xb8\xb6\xba\x6b\xde\x6c\x2e\x82\x77\x2e\x7e\xdb\x14\x3d\xa7\x42\xa9\xd0\x41\xb3\xc1\x1b\x22\x05\x45\x9e\xfa\xa5\xed\xa0\x77\x74\xd8\x1f\x0c\xbb\xc7\x47\x6f\xce\x7a\x83\x97\xaf\x87\xe7\x27\xfd\xd3\xc3\xe7\xbd\x17\xbd\xc3\x03\x8f\xac\xff\xb2\xbb\x5f\xfd\xf9\xf4\xff\x3f\xdd\x88\xef\xda\xdc\xcd\xbc\xaa\x01\x77\x07\x29\x5f\x1d\xfe\xb1\x51\xc4\xb3\x7e\x77\x59\xa0\xf5\xcb\x56\x8f\xff\xb6\x8f\x83\xaf\x5f\xde\x56\xb6\x4b\xb5\x26\x2e\xe1\x9a\x4c\xad\xa9\x8c\x95\x17\x95\x0d\xaf\xe9\xb4\x9c\xbf\x7d\x61\x89\x2b\xe7\x72\xde\xa5\x97\xe5\xbf\x3c\x9a\xab\x56\xa6\x53\xa6\xb5\x9b\xbd\xb9\xa1\x1b\x17\x95\xd3\x26\x34\x0f\xde\x2c\x1a\x82\x6d\x46\x6e\xb5\x95\x95\xad\x5c\xcb\xeb\x64\x00\x9d\x8f\xb4\xa1\x17\xd4\x3c\x68\xab\x68\xea\x46\x29\xd7\xb4\x74\x8a\x68\xd4\x7c\x09\xda\x2e\xbc\x36\x61\xfb\xb8\xb8\xe9\x2a\x5b\xd1\xbe\x09\x85\x32\xb4\xbc\x5e\xb4\x12\xa5\x13\xa2\xac\x6c\x61\x2d\x7d\xa7\x20\x2d\x5e\xba\x1f\x2f\x8a\x7c\xfd\xeb\xef\x83\xd6\xdf\x01\x00\x00\xff\xff\xf2\xcc\xac\x02\x3a\x21\x00\x00")

func powersslApiserverV1CertificateYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1CertificateYaml,
		"powerssl/apiserver/v1/certificate.yaml",
	)
}

func powersslApiserverV1CertificateYaml() (*asset, error) {
	bytes, err := powersslApiserverV1CertificateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/certificate.yaml", size: 8506, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1Certificate_issueYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x53\xdb\xc6\x13\x7f\xf7\x5f\xb1\x93\x6f\x66\x98\xc9\xb7\x58\x90\xbc\xe9\xa9\x6e\x68\x18\x3a\x89\x93\x01\xd3\x3e\x94\x96\x9c\x75\x6b\xfb\x82\x74\x77\xdc\xad\x6c\x5c\xca\xff\xde\xb9\x93\x84\x4f\x3f\x30\x98\x86\xb6\x40\xfc\x00\x96\x6e\x6f\xb5\xbf\x3e\x9f\xdd\x93\x95\x46\xc9\xb4\x88\xe1\x4d\x7f\xa7\xbf\xd3\x13\x72\xa2\xe2\x1e\x00\x09\x4a\x31\x06\xad\x16\x68\xac\x4d\x23\xa6\x85\x45\x33\x47\x13\xcd\x77\xa3\x04\x0d\x89\x89\x48\x18\xe1\xa9\xb0\x36\xc7\xbe\x36\x8a\x54\x0f\x60\x8e\xc6\x0a\x25\x63\x98\xef\xf6\x88\x4d\xad\x53\xb5\x0d\x92\x65\x18\xc3\xdb\xd5\xae\x03\xb7\xe9\x08\xcd\x5c\x24\xd8\xd3\x8c\x66\x5e\xd0\xa9\xbe\x74\xb2\x57\xee\x0a\x60\x8a\x54\x7c\x01\xb0\x79\x96\x31\xb3\x8c\x61\x1f\xc9\x02\x83\xc0\x82\x3e\x1c\x22\xe5\x46\x5a\x18\x7e\x1c\x9d\xbe\xfb\x78\x3c\xdc\x03\x31\x01\x9a\x61\x28\x05\x5c\xa1\x05\xa9\x08\xf0\x42\x58\xea\x97\x7a\x95\x46\xc3\x48\x28\x79\xc0\x6f\x34\xf0\x74\x1f\xa9\x14\x37\x68\xb5\x92\x16\x6d\x65\x17\xc0\x8b\xd7\x3b\x3b\x2f\x56\x97\x00\x1c\x6d\x62\x84\x26\x1f\x86\x01\xd8\x3c\x49\xd0\xda\x49\x9e\x5e\xef\xee\x07\xd2\x89\x92\x84\x92\x42\x05\x00\x4c\xeb\xd4\x99\x21\x94\x8c\xbe\x58\x25\xeb\xab\x00\x36\x99\x61\xc6\x9a\x77\x01\x5e\x1a\x9c\xc4\xb0\xf5\xbf\x28\x51\x99\x56\x12\x25\xd9\xa8\x90\xb5\xd1\x7c\xb7\xe9\xde\x56\x6f\x65\xf2\x84\xe5\x29\xdd\xec\x85\x84\x5c\xe2\x85\xc6\x84\x90\x03\x1a\xa3\xcc\xbf\xeb\x8c\xd1\xc9\x11\x31\xca\x6d\xe5\x83\x66\x86\x65\x48\x68\x82\xcc\x54\x75\xe7\xfe\x06\xda\x85\x8c\xc1\x95\x5c\x70\xcb\xe0\x79\x2e\x0c\xf2\x18\xc8\xe4\xa1\x2c\x5e\xb0\x4c\x3b\x1c\x04\x95\x64\xa3\x57\x91\x2f\x7a\x1b\xbd\xea\xad\x77\x83\x96\x1a\x63\xb0\x64\x84\x9c\xd6\x16\x34\x23\x42\x23\x63\xf8\x3d\x54\x7c\x12\x9d\x2c\xfe\x7f\x52\x2a\xf7\x17\x2f\xcb\x5d\x15\x94\x2a\xc7\x6e\x82\x52\x69\x0a\x26\xb9\x11\xb4\x0c\x77\x8c\x91\x19\x34\x83\x9c\x66\x31\xfc\xfa\x5b\xaf\x48\x71\x8a\x84\x2d\x84\xed\xf9\xdb\xff\x38\xc8\x8a\xc7\x3e\x0e\x9c\x69\xe3\x5c\x22\x81\x36\x86\xcb\xab\x6f\x30\x82\x2a\x6b\xcf\x11\x46\x3a\x6f\x77\xa9\x3f\xb7\xaf\xf7\x1c\x6b\xce\xd6\xc0\xe9\x60\xf8\xf3\xe0\xfd\xc1\xde\xe9\xe0\x70\xff\xf8\xc3\x8f\xc3\x51\x85\x2a\x17\x6d\x50\xfe\xfb\xb5\xaa\x10\x69\xc2\xe1\x4c\x6e\x63\xa6\x69\x09\x4c\xf2\x02\x7a\x78\x9e\xb3\xd4\xef\xd7\x06\xe7\x42\xe5\xd6\x2b\xda\x08\x88\x85\xc1\x8f\x03\x88\xdf\x1a\xde\x13\x45\xaa\x33\x10\x2d\xfd\xa0\x78\x00\xbf\x8e\x68\xaf\x8f\x75\x77\xa4\x0b\x23\xd5\xf8\x0b\x26\xd4\x58\x0a\x88\xbd\x95\x9e\xdc\xe3\xe2\x03\xb3\x67\xed\xb5\x35\x9e\x43\x1d\xb8\xbe\x10\xbb\x14\xdc\xb7\x94\x3b\x53\xf9\x00\x44\xe7\x87\x73\xcd\x0c\x4a\xba\x2a\x33\x76\xf3\x94\x1e\xf0\xdf\x7b\x61\xc9\xd6\xca\xa9\x0f\xa3\x19\x82\x32\x1c\x8d\xa3\xb1\x5c\x5a\x8d\x89\x98\x08\xe4\x30\xce\x09\xb8\xab\xea\x4c\x48\x61\x49\x24\x7d\x18\xe2\x22\x5d\xae\x4a\xc0\x20\x73\x90\x0c\xf5\xc1\x42\xa4\xa9\x9f\x3a\x24\x3a\xe6\x61\x46\xa4\x4b\x18\x23\x30\xce\x91\x03\x29\x4f\x88\x28\x79\xc1\xa7\xc2\x42\xba\xe9\x70\xe2\x9c\x78\x0a\x8c\xe8\xfc\x68\xfa\x68\x0f\x4b\x9b\x9e\x0b\x3d\x16\x45\xfc\x75\x09\xf2\x01\x78\xf1\x65\x87\xe1\x53\x3c\x12\x7f\x34\xb9\xfd\x3c\x47\xb3\xec\xb4\x7d\xc2\x52\x8b\x77\x32\x4d\x48\xc2\x29\x9a\xda\xca\x44\x99\x8c\x91\x5f\x7b\xf3\xba\xd3\x98\x91\x3a\x43\xf9\x00\xd6\xd4\x02\xf5\x30\x43\x9b\xb2\x6d\xd6\x7a\xeb\xc9\xa5\x31\xaa\x7d\xe7\xa7\x2b\x53\x8e\x6b\x7e\x34\xc3\x45\xcb\x88\x8d\xd8\xa4\x78\xce\x53\xe0\x93\xe7\x3a\x61\x3d\x32\x0a\xf9\x0f\x4e\x53\x8f\x7f\x24\x5a\x19\xe5\x84\x4a\xbb\x0a\x79\xff\x36\x74\x9c\x4f\x06\xf2\x5a\x41\x47\x98\xba\xc2\xb3\xf5\xbd\x13\xdc\x0a\xa3\xd1\x91\x78\xc6\xb9\x70\x49\x62\xe9\xa7\xf6\x9b\x88\xeb\x42\xde\xf0\xd1\x89\xe2\xd8\x7e\x6e\xbb\x31\x74\xb7\x85\xcc\x0d\x5e\xd3\x0e\x05\x8d\x8a\xe5\x48\x4c\xa4\xb6\x2d\xc7\x8c\x61\x61\xdf\x10\x84\x59\xa3\x6e\xd6\xd5\x43\x10\xf2\xa2\x10\xda\x05\xb2\x61\x3c\x3c\xd2\x6f\x73\xa7\xc1\x6a\xc1\xdc\xeb\x3e\x6e\xce\x35\x68\x55\x6e\x92\xda\x89\xbe\x71\x92\x0f\xfa\x47\xf1\x69\x5a\xee\xf7\x5a\x98\xb1\x39\xfa\xed\x2e\x05\xb5\x0d\x9f\x6b\x54\x72\x59\x7b\x3f\xcf\xab\x71\x3d\xba\xf4\xff\xdd\x9d\xcf\xc5\x0c\xee\x4d\x12\x16\xc4\x54\x2a\x83\x1c\x16\xb3\x5a\x3b\x2f\xc7\x6d\x21\xa7\xf5\x96\xd8\x34\xb9\x18\xca\x47\xe2\x4e\xf1\xaa\xca\xc7\x1d\xa6\xb6\x49\x04\x27\xd5\xe2\x80\xf5\xb7\xd5\x70\x61\x75\xca\x96\xc3\xbb\xa4\xaf\xf8\x95\xe3\xf6\x9a\x5d\xa5\xf8\x36\xd9\x94\x8d\xb1\xab\xbc\x5b\x04\xd9\x89\xe1\xdb\x19\x9f\x4b\xeb\x8b\xe1\x5e\x00\xea\xd4\x78\x86\xcb\x41\x3a\x55\x46\xd0\x2c\xbb\xd5\xbd\x33\x5c\xba\x09\xf4\xfe\x3c\xc1\xc5\x14\x2d\xdd\xf5\x81\x8d\xc1\xa7\x85\x8b\x7e\xbf\x5f\x82\x7d\xed\xc9\x66\x53\x26\x6c\xea\xf9\xea\x6c\xb5\xae\x7b\x49\xbc\xa0\x4f\xd5\x70\xbd\x26\x3e\x55\x8b\x3a\x72\x3a\x2b\x1b\x83\x1e\x55\xf3\x79\x46\xa4\xab\xd6\xe6\xe5\xe3\x52\xb4\xbc\x59\x5c\xbc\x2b\x53\xf6\xd3\x2f\xa3\xde\x5f\x01\x00\x00\xff\xff\xdc\x72\xb4\x19\x18\x1c\x00\x00")

func powersslApiserverV1Certificate_issueYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1Certificate_issueYaml,
		"powerssl/apiserver/v1/certificate_issue.yaml",
	)
}

func powersslApiserverV1Certificate_issueYaml() (*asset, error) {
	bytes, err := powersslApiserverV1Certificate_issueYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/certificate_issue.yaml", size: 7192, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _powersslApiserverV1UserYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x73\xd3\xc6\x13\x7f\xcf\x5f\xb1\xc3\x97\x99\xcc\x7c\x4b\xe4\x04\xde\xf4\xd4\xb4\x14\x26\x1d\x08\x4c\xe2\xb4\x0f\x40\x93\x8b\x6e\x65\x1f\x91\xee\x8e\xdb\x95\x1d\x43\xf9\xdf\x3b\x77\x27\x39\x92\xa5\x24\x76\x21\xd3\x92\xe2\x07\x88\x75\x7b\xfb\xf3\xb3\x3f\xb4\x36\x16\xb5\xb0\x2a\x85\x27\xc9\x6e\xb2\xbb\xa5\x74\x6e\xd2\x2d\x00\x56\x5c\x60\x0a\xd6\xcc\xd1\x11\x15\x23\x61\x15\xa1\x9b\xa1\x1b\xcd\xf6\x46\x15\xa1\x4b\xac\x33\x6c\xb6\x00\x66\xe8\x48\x19\x9d\xc2\x6c\x6f\x8b\xc5\x84\xfc\xed\x1d\xd0\xa2\xc4\x14\x4e\x08\xdd\x31\xba\x99\xca\x70\xcb\x0a\x9e\x86\xc3\x86\x43\xf8\x02\x30\x41\x8e\x7f\x00\x50\x55\x96\xc2\x2d\x52\xf8\x73\xa7\x7e\x02\xf0\x42\x11\x13\x04\xfa\x04\xc6\x53\x04\xe3\x24\x3a\x50\x04\x95\x26\x8b\x99\xca\x15\x4a\x38\xaf\x18\x24\x32\xba\x52\x69\x45\xac\xb2\x04\x0e\x71\x5e\x2c\x20\x73\x28\x18\xe5\x92\x5d\x60\x04\x73\x55\x14\xa0\x0d\x83\xc6\x0c\x89\x84\x53\xc5\x02\xce\x11\x84\x94\x28\x81\x0d\xf0\x14\x01\xb5\x04\x93\x03\x4f\x15\x41\xa1\x88\x93\x9a\x89\xb1\xe8\x04\x2b\xa3\x0f\x64\xc7\xc2\x53\xaf\x6a\x4d\xe3\x90\xac\xd1\x84\x94\x2e\x25\x3f\x78\xbc\xbb\xfb\xe0\xea\x2b\x80\x44\xca\x9c\xb2\x1c\x9c\xb7\x0f\x54\x65\x5e\x97\xbc\x2a\x96\xb7\x93\x16\x75\x66\x34\xa3\xe6\x36\x03\x00\x61\x6d\xa1\xb2\xa0\xcc\xe8\x3d\x19\xdd\x3d\x05\xa0\x6c\x8a\xa5\x58\x7d\x0a\xf0\xd0\x61\x9e\xc2\xf6\xff\x46\x99\x29\xad\xd1\xa8\x99\x46\x91\x96\x46\xb3\x3d\x6f\x87\xb7\x8b\x8e\x6a\x3d\xb6\xb7\xae\x74\xce\x45\x55\xf0\xf5\x66\x68\xa8\x34\x5e\x5a\xcc\x18\x25\xa0\x73\xc6\xfd\xb3\xd6\x38\x9b\x1d\xb3\xe0\x8a\x1a\x1b\xac\x70\xa2\xf4\x48\x69\x85\xa6\x81\xab\x15\x13\x3c\x56\x1f\xf1\x3a\xeb\x5a\xb0\xf4\x9f\x23\xfc\x50\x21\x79\x43\xfd\x45\x20\xf5\x11\x13\x38\x0e\x59\x02\xa5\x58\x80\x43\xae\x9c\x86\x1c\xe7\xe8\x6a\xe0\xf1\x54\x68\x70\xcd\xbd\xa4\xc3\xee\x20\x6f\x43\xfa\x11\xc4\x7c\x8b\x58\xb5\x2a\xbb\x00\xa1\xbd\x8b\x9c\xb1\x4e\x09\xc6\x26\x16\x6d\x26\x4a\xa7\xf0\xa1\x42\xb7\x68\x3d\xf3\xd2\x94\x43\x99\x42\x2e\x0a\x6a\xdb\x36\xe4\x4f\x5e\x58\x4c\x41\x69\xc6\x09\xba\xce\x49\x6e\x5c\x29\x38\x9c\x3d\x79\x3c\xe8\xba\xb1\xb9\x40\xbd\xa6\xef\xf6\x81\x3d\x35\x28\x89\x9a\x55\xbe\x50\x7a\x02\x22\xfa\xd1\xe4\x1e\x32\x55\xc1\x14\xd2\xb0\x76\x03\x4d\x4d\x55\xc8\xda\xa7\x5d\xc7\x8d\x17\x56\x65\xa2\x28\x16\x8f\x62\xb2\xaa\x78\x71\x26\x8a\xca\x73\xeb\xd0\xbe\xe9\x81\x3b\xd1\x78\xc9\xa7\x5e\xf2\x69\x50\xe9\xdd\x9b\xa6\xe8\x25\xcb\xa2\x97\xcc\xf6\x92\xdb\x2f\x76\xb5\x8a\x9a\xa2\x84\xdc\x99\x32\x28\x64\x1d\xce\x94\xa9\x08\xbc\xb2\xbe\xca\x9c\x79\x9e\x67\x50\x22\x4f\x8d\xbc\x8b\x38\x12\x3b\xa5\x27\xf5\x41\x53\x9c\x9b\xc0\xb5\x8b\x73\xcd\x08\xb3\xca\x29\x5e\xb4\xa9\xce\x51\x38\x74\xfb\x15\x4f\x53\x78\xf3\x2e\x1c\x58\x43\xfd\x92\xfd\x73\x28\xb4\x04\x22\x20\xfd\x11\x08\xdd\x04\x2b\x46\x43\xe3\x3c\x48\xbc\xb5\x8a\x46\x46\xf7\xa1\x8e\x7a\xab\xee\x53\xe9\xac\xeb\xd6\x4f\x46\xb6\x10\x32\xa0\xce\xcd\xca\x0c\xab\x72\xb3\x27\x23\x26\xbc\x3f\xeb\x9a\x7b\xe5\xd6\xab\xb4\x60\x57\xe1\xd7\x85\xba\x9f\x54\x3e\xf9\xfa\xf6\xf9\xfa\x51\xe5\x39\x72\x03\xfa\x04\x8e\x6a\xc0\x1f\xbe\x1a\x9f\x3e\x7b\x75\x72\xf8\x14\x54\x1e\xd0\xef\x8f\x41\x1a\xa4\x30\x75\xe0\xe5\x3a\xe3\xc4\x73\xbc\x17\xd3\xc4\x7d\xcb\x82\x9b\x06\x08\xff\xef\x75\x96\xf9\xd9\xd5\x9f\xc7\x99\xb2\x86\x04\x1b\x5f\x24\x9d\xc2\x19\xae\xd6\x7f\x3f\x2f\x0f\x96\xff\x16\xce\xfd\x07\x2f\x45\x69\xfd\xac\x1e\x26\x8c\xd1\xff\x37\x6f\x0c\x8d\x5d\xcc\xe8\x74\x0a\x7f\x04\x46\x6f\x47\x6f\xe7\x3f\x3c\xfc\xda\xad\x43\x62\x81\x8c\xbd\x24\x7a\x1a\x1e\xdf\x51\x1e\x45\xe6\xdf\x46\x2a\xf9\xe9\x0e\x1d\x2b\xa4\x14\x3e\x7d\xfe\x9e\x35\xd7\x66\x4d\x04\xd2\x7f\x22\x67\x6c\x75\xe3\x0b\xf2\x89\x95\x62\x28\x77\x0e\x0e\x7f\xdb\x7f\x71\xf0\xf4\x74\xff\xe8\xf9\xc9\xcb\x5f\x0e\xc7\x4d\x0a\xad\x7a\x73\xc9\x48\xf9\xa4\xd2\x3b\x58\x5a\x5e\x84\xf1\x2d\xe4\x19\x7e\xa8\x44\xd1\x1d\x5f\x3d\x87\x5b\xb3\x2e\xaa\xf5\x6d\x64\xdd\xf7\x06\xf6\x25\xa9\x58\x85\x48\xff\x9b\x53\xf1\x2e\x07\xd7\xa8\x90\x39\x7f\x8f\x19\xaf\x1c\xb5\x8a\x79\x2f\x62\xd1\x69\x2f\x05\x5d\xf4\xcf\x6e\xb0\x32\x7e\x7a\x61\xc9\x15\x16\x12\x4a\x41\x17\x30\x57\x3c\x0d\xce\xa7\xe1\xd8\xd4\xe2\x09\xdd\x90\xe0\x4d\x32\x61\x40\x97\x7a\x3a\x87\x12\x89\xfc\xab\x7c\x6e\x5c\xbb\x28\x24\x27\x2b\xea\xdc\xdd\xf0\x7e\xa5\xbf\x27\xaa\x4d\x88\xf4\x61\x71\x79\x5e\xe5\xfb\x7a\xc9\x60\x20\x88\x43\xc1\xdb\xfe\xd1\x13\x6e\xb7\x1d\x37\x10\x29\x21\xa5\xf2\xee\x10\xc5\xeb\x7e\x37\x5f\x66\xe3\x86\xa2\x33\x23\xb1\x2f\xb7\xbf\xa7\x19\xde\xd2\xd4\xf1\xb8\x45\x71\x1f\x4c\x16\xaa\xa0\x3e\x9d\x70\x4e\xb4\x97\x11\x8a\xb1\x5c\x41\xf5\x4d\xd0\x69\xb9\x3c\xe2\x67\xe0\x95\x6e\x43\x87\xac\x22\x78\x7d\xe4\x6e\x84\xd8\xa8\x66\x52\x2b\xdd\xdb\x01\xfd\x0d\xa5\xbf\xbe\x77\xfb\x89\xd9\x2b\x10\x85\x22\xf6\x75\x3b\xee\xd1\x97\x94\x1a\x2f\xf9\x75\xb3\xb9\xbb\x15\x1d\xeb\x6d\xf4\x5a\xaf\x34\x81\xff\xea\x52\xaf\x5b\x8c\x5e\x0b\xa2\xb8\xb5\x8b\xeb\x3a\xa5\x7d\x6f\xe9\x90\xb4\x57\x76\x21\x58\xc9\x46\xcb\xba\xde\x95\x0e\xf3\x58\x39\xa3\x54\xa0\xea\x9c\x3c\xbd\xe6\xe1\x15\x5d\xc7\xb6\xb8\xd4\xba\xe4\x95\x2e\x34\x68\xeb\x0a\xe4\x22\x76\xae\xc5\xdc\x8b\xe5\x5b\x4d\x8c\xec\x86\x20\x0b\x9d\xfc\xcb\x62\xe9\x21\xe3\x90\x4c\xe5\xb2\x7e\xcf\xef\x06\xd0\x2b\x18\x48\x08\xa6\xa2\x76\x8b\x2f\x42\x70\x16\x1b\xfa\x27\xff\xdf\xa9\x92\x9f\xcf\x92\x9e\x88\xc0\x59\x11\xa8\x89\x36\x0e\x25\xcc\xa7\xa8\xe3\x2f\x36\x71\x1d\xdc\x95\x16\x7f\xca\x19\xab\xb5\xac\x6b\xea\xa0\xef\x37\x3b\xac\x5a\x53\x4d\x6c\x89\x5f\xcc\x46\x2a\xb2\x85\x58\x1c\xae\xe3\x6c\x6f\xc7\x1a\x84\x2b\x13\x70\xf0\x6c\x92\x78\x07\x34\x0d\xef\xd8\x67\x7c\x13\xeb\x56\xc7\xeb\x00\x64\xca\x6c\x9b\x46\x19\xe8\xd3\x9a\xb4\x7e\x18\xbf\x3c\xab\x2d\xfb\xf5\xf7\xf1\xd6\x5f\x01\x00\x00\xff\xff\x1a\xd2\x03\xcc\x04\x1c\x00\x00")

func powersslApiserverV1UserYamlBytes() ([]byte, error) {
	return bindataRead(
		_powersslApiserverV1UserYaml,
		"powerssl/apiserver/v1/user.yaml",
	)
}

func powersslApiserverV1UserYaml() (*asset, error) {
	bytes, err := powersslApiserverV1UserYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "powerssl/apiserver/v1/user.yaml", size: 7172, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"powerssl/apiserver/v1/acme_account.yaml":      powersslApiserverV1Acme_accountYaml,
	"powerssl/apiserver/v1/acme_server.yaml":       powersslApiserverV1Acme_serverYaml,
	"powerssl/apiserver/v1/certificate.yaml":       powersslApiserverV1CertificateYaml,
	"powerssl/apiserver/v1/certificate_issue.yaml": powersslApiserverV1Certificate_issueYaml,
	"powerssl/apiserver/v1/user.yaml":              powersslApiserverV1UserYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"powerssl": &bintree{nil, map[string]*bintree{
		"apiserver": &bintree{nil, map[string]*bintree{
			"v1": &bintree{nil, map[string]*bintree{
				"acme_account.yaml":      &bintree{powersslApiserverV1Acme_accountYaml, map[string]*bintree{}},
				"acme_server.yaml":       &bintree{powersslApiserverV1Acme_serverYaml, map[string]*bintree{}},
				"certificate.yaml":       &bintree{powersslApiserverV1CertificateYaml, map[string]*bintree{}},
				"certificate_issue.yaml": &bintree{powersslApiserverV1Certificate_issueYaml, map[string]*bintree{}},
				"user.yaml":              &bintree{powersslApiserverV1UserYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
