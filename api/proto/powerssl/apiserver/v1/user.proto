syntax = "proto3";

package powerssl.apiserver.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "powerssl.dev/api/apiserver/v1;api";

// The UserService ...
service UserService {
  // Creates a user, and returns the new User.
  rpc Create(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  // Deletes a user. Returns NOT_FOUND if the user does not exist.
  rpc Delete(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=users/*}"
    };
  }

  // Gets a user. Returns NOT_FOUND if the user does not exist.
  rpc Get(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/{name=users/*}"
    };
  }

  // Lists users. The order is unspecified but deterministic. Newly created
  // users will not necessarily be added to the end of this list.
  rpc List(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // Updates a user. Returns INVALID_ARGUMENT if the name of the user
  // is non-empty and does equal the previous name.
  rpc Update(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      put: "/v1/{name=users/*}"
      body: "*"
    };
  }
}

// A User ...
message User {
  // The resource name of the user.
  // User names have the form `users/{user_id}`.
  // The name is ignored when creating a user.
  string name = 1;

  google.protobuf.Timestamp create_time = 2;
  google.protobuf.Timestamp update_time = 3;
  string display_name = 4;

  string user_name = 5;
}

// Request message for UserService.Create.
message CreateUserRequest {
  // The user to create.
  User user = 1;
}

// Request message for UserService.Delete.
message DeleteUserRequest {
  // The name of the user to delete.
  string name = 1;
}

// Request message for UserService.Get.
message GetUserRequest {
  // The name of the user to retrieve.
  string name = 1;
}

// Request message for UserService.List.
message ListUsersRequest {
  // Requested page size. Server may return fewer users than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListUsersResponse.next_page_token][powerssl.apiserver.v1.ListUsersResponse.next_page_token].
  // returned from the previous call to `List` method.
  string page_token = 2;
}

// Response message for UserService.List.
message ListUsersResponse {
  // The list of users.
  repeated User users = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListUsersRequest.page_token][powerssl.apiserver.v1.ListUsersRequest.page_token]
  // field in the subsequent call to `List` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for UserService.Update.
message UpdateUserRequest {
  // The name of the user to update.
  string name = 1;

  // The field mask with paths to update.
  google.protobuf.FieldMask update_mask = 2;

  // The user to update with. The name must match or be empty.
  User user = 3;
}
