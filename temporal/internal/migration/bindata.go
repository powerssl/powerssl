// Code generated for package migration by go-bindata DO NOT EDIT. (@generated)
// sources:
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/database.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/schema.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.0/manifest.json
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.0/schema.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.1/cluster_metadata.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.1/manifest.json
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.2/manifest.json
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.2/queue.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.3/manifest.json
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/temporal/versioned/v1.3/visibility_tasks.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/visibility/database.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/visibility/schema.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/visibility/versioned/v1.0/manifest.json
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/visibility/versioned/v1.0/schema.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/visibility/versioned/v1.1/index.sql
// go.temporal.io/server@v1.6.4/schema/postgresql/v96/visibility/versioned/v1.1/manifest.json
package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _schemaPostgresqlV96TemporalDatabaseSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x70\x71\x0c\x71\x74\x72\x0c\x76\x55\x28\x49\xcd\x2d\xc8\x2f\x4a\xcc\xb1\x06\x04\x00\x00\xff\xff\xcc\xb2\xc9\x69\x19\x00\x00\x00")

func schemaPostgresqlV96TemporalDatabaseSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalDatabaseSql,
		"schema/postgresql/v96/temporal/database.sql",
	)
}

func schemaPostgresqlV96TemporalDatabaseSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalDatabaseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/database.sql", size: 25, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x4f\xe3\x38\x10\x7f\xef\xa7\x98\xb7\x6d\xa5\x54\xa2\xdc\xb2\xa7\x5b\x4e\x27\x85\xdd\xdc\x5e\x75\xa5\xec\x95\x82\x8e\xa7\xc8\x4d\xa6\x8d\x45\x62\x07\xdb\x01\xfa\xed\x4f\x4e\x1a\x12\x53\x27\x2d\x2d\x47\x59\x69\x2b\x1e\x4a\x3c\x19\xff\xfe\x8c\xff\xf6\xcb\xc4\x73\xa7\x1e\x4c\xdd\xb3\x91\x07\x8c\x24\x28\x53\x12\xa0\xec\x76\x00\x52\x22\x14\x55\x94\x33\x9f\x86\x30\x1c\x4f\xbd\x6f\xde\x04\xc6\x17\x53\x18\x5f\x8d\x46\x4e\x07\x80\x86\x70\x76\x33\xf5\x5c\xe3\xa1\xce\x01\xd7\xee\xe4\xcb\x5f\xee\xa4\x7b\x7c\x72\xd2\x83\xab\xf1\xf0\x9f\x2b\xcf\x0c\xe2\x8a\xce\x69\x40\xf2\xec\xf7\x28\x24\xe5\x0c\xce\x86\xdf\x86\xe3\xa9\x11\xd7\xef\x77\x00\x42\xa2\x88\xa5\x23\xfd\xd8\x47\x16\xf0\x90\xb2\xc5\x53\x8f\x83\x4f\x3d\x13\xa3\xf4\x17\x31\x9f\x91\x18\xce\x2e\x2e\x46\x9e\x3b\x36\x5a\xbf\x4f\x86\xe7\xee\xe4\x06\xfe\xf6\x6e\xba\x75\xba\x0e\xd0\xb0\xd7\xe9\x9d\x76\x3a\x76\x7d\xfc\x04\x15\xc9\x71\x6d\x25\xd4\xb6\x74\x9b\xe0\x14\x50\x86\xe3\x4b\x6f\x32\xd5\x1d\x5c\x58\x91\x98\x04\x6c\x7d\xf6\xe0\xda\x1d\x5d\x79\x97\xd0\x3d\xf9\xf8\xcb\xf1\xc0\x81\xc1\x1a\x45\x19\x11\x11\xca\x9c\x56\xfe\xb5\x89\x52\xee\x8c\x20\x6c\x81\x3a\xc2\xc2\x65\x2f\xd7\x6a\x42\x40\xb7\xc4\x61\x31\x04\x1f\x31\xc8\x34\x43\xb9\x11\x70\xa5\x98\xb5\x6c\x1f\xb8\xb8\x9d\xc7\xfc\x41\xb7\x1a\xd5\x5b\x0f\x12\x19\xb3\xbf\x9d\xab\xc1\xf0\x51\xf9\x78\x8f\x4c\x35\x48\x12\x13\xa9\xfc\x07\x41\x15\xb6\x15\xc1\x5e\xc2\x49\x45\x14\x5a\xde\xce\x9f\xef\xa8\xbb\x63\x68\xe7\xd4\xa5\x72\x56\x92\x58\xac\x09\x32\x21\xb4\x14\x6f\x6c\x51\x51\x97\x4d\x3e\x05\x02\xb5\x0e\x02\xef\x32\x94\xaa\x9e\xe8\xd3\x47\x9b\x90\x36\x94\xba\x25\x93\x4d\x4d\x42\xb5\x79\xbb\x5d\x05\xbc\xd4\x05\x8b\xfa\xb3\x6c\x3e\x47\x81\x61\x51\x8f\x5b\x8c\xe7\xff\x75\x78\x14\xc3\xe1\xd2\x9b\x0c\xdd\xd1\x53\xc3\x6a\x5d\x78\x9d\x69\x7e\xd7\xc2\x6d\x98\xe8\x15\x91\xb7\x85\x68\xc5\x14\x17\x11\x19\xd9\x9c\xd2\x71\xfe\x5d\x86\x59\x83\x6c\x79\xbb\x7d\x32\x78\x65\xce\x15\x4e\xc7\x44\xe5\x94\x20\x1a\x68\x16\x81\xaf\x41\xf6\x0d\x97\x84\x46\xb6\x36\x92\x82\x30\x39\x47\xe1\xe7\xa6\x6e\x1c\x08\x6f\x67\x59\x55\xa6\x2d\x0e\xd1\xa4\x44\xbe\x79\x0c\xdf\x53\x49\x67\x34\xa6\x6a\xe9\xeb\xf7\xa4\x22\x49\x0a\xd3\xe1\xb9\x77\x39\x75\xcf\xbf\x1f\x9c\xa5\x0d\x5e\x1b\x77\x81\x69\x5c\x6e\x60\xb6\x54\xe0\x7d\x99\xb7\x46\xc0\x0f\xe3\xbb\x82\x04\xcf\x44\x80\x7e\x10\x67\x52\xa1\xf0\xd7\xf7\xcc\xc6\xaa\xf2\x4e\x18\xaf\x63\x76\x60\x1b\x19\xea\xbe\xff\x80\x43\x90\x04\x8a\xde\x6b\xf0\x94\xcd\xb9\x9f\x90\x54\xd7\x61\xbf\x0f\x48\x82\x08\x04\x7f\x80\x80\x0b\x81\x32\xe5\x2c\x94\xa0\x38\x70\x86\x70\x8b\x4b\xe0\xf3\xfc\x6b\x42\xd2\xdf\xa5\x12\x94\x2d\x1c\x70\x57\xa9\x86\x6c\xce\xff\x38\xe8\x8a\x2c\x83\x08\xc3\x2c\xb6\xcf\xd4\x3b\x89\xbc\xdf\x2a\x5c\xc3\xd3\x38\x0b\xd6\xf5\x3f\xa4\x76\x2b\x34\x8d\xaf\x1e\x40\xbe\x12\x92\x6d\x1f\x1e\xd1\x38\xac\x76\xe1\xef\x46\x45\xca\xa8\xa2\x44\x61\xf8\x5e\x4a\xb0\x0e\xc8\x3a\x99\x17\x67\x86\x80\xb0\x00\xe3\x9f\x32\xee\x28\xa3\xa4\x0b\x46\x7e\xca\xb7\x9f\x7c\xb2\x3c\xc1\x62\xe8\x4b\x3c\xf8\xf1\xae\xf4\xb4\xf9\x34\x9d\x0b\xb9\xc7\xea\x50\x76\x50\x28\xd2\xef\x43\x44\xa5\xe2\x62\x09\xc5\xf1\xf6\xfa\xf8\x73\xf9\xc4\x67\x3c\x44\xd0\x5f\x51\x9a\x51\xb9\x63\xa6\x9a\xc6\x3b\x86\x86\xc5\xc7\xba\x39\x11\x88\x55\x84\x45\x8d\x99\x20\x2c\x88\x9e\x42\x2c\x37\xa4\x3c\x34\x32\x58\x4e\x5a\x8f\xac\x16\xd0\xbe\x0f\xaa\x3e\x9b\x6a\xf4\xc5\x5b\xa2\x82\xa9\x53\x31\x72\x4a\xec\xce\x0a\xe2\x16\x7e\xe8\x2c\xa5\x1f\x45\x22\x28\xaf\x2c\xed\x66\xe4\x2f\xbc\x99\x19\x87\x11\xd2\x32\xb2\xf3\x13\x6c\xce\xbb\x38\xcb\xaa\x65\x8a\xd0\x42\x3d\x41\x29\xc9\x62\x43\x21\x95\x41\x29\x59\xc6\x9c\x84\x56\x6e\x65\xcc\x8b\xe8\x75\x2b\x90\x4e\x0d\x4a\x13\x2f\xf3\xbe\xfc\x19\x41\x1b\xbb\xda\xa4\xab\x3f\xfb\x79\x51\x03\x6b\xdb\x20\xad\x0e\x34\x06\xc4\xf2\x1f\xff\xe9\x52\xbd\xcd\x8b\x67\xf5\xf3\x92\x52\xaa\x7d\x1a\x7f\xc2\x48\x92\x4c\x91\x59\x8c\xfe\xf3\x7e\x2c\xeb\x99\x11\x5b\xef\xa7\x29\x7b\x79\x0f\x69\xc1\xde\xfe\x03\xc5\xba\x44\xad\xe2\x26\x33\x14\x32\xa2\x69\x47\xcb\xab\x05\x2e\x1f\xd4\x24\xb6\x69\x0b\x10\xf1\xe2\xaa\x76\x83\xb0\x00\x22\x0d\x7c\x12\x86\x02\xa5\xb4\xa8\xfa\x6c\x35\x2b\xc2\x53\x2e\x94\x91\xf7\xf2\xdc\x1d\x8d\x9e\xd3\x06\x10\x3c\xc6\x35\x81\x1a\x62\x25\x4a\xad\xa8\x9f\xdf\x06\x97\xb1\xd5\x35\xcc\x57\xef\x4f\xf7\x6a\x34\x85\x0f\x83\xdf\x7e\x3d\xea\x1f\x0d\xfa\x47\x03\x38\x3a\xfa\xac\xff\x06\x1f\x8a\x0c\xf9\x35\x71\x84\x44\xa8\x19\x12\xb5\x4b\x06\x81\x01\x17\x7a\xdb\x9f\x52\xb1\xdc\x09\x83\x31\x97\xd9\xdc\x72\x4a\x63\x0c\xdb\x57\x3f\xf6\x0d\xc7\x5f\xbd\x7f\x21\x48\x7c\x1a\x3e\xfa\x5a\x3c\x1d\x0b\x17\x63\x4b\x41\x40\x57\xb7\x57\xd9\x4e\xcb\x54\x6b\x39\xb4\x2c\xd1\xac\x3d\x8b\x29\x5d\x53\xb2\x34\x68\xc5\x53\xd5\x91\x93\x3b\xdf\x90\xa6\x1d\xcf\x76\x48\x72\x9f\x56\x36\x35\xc1\xa9\x7b\xd9\x3b\xfd\x2f\x00\x00\xff\xff\x41\xd0\xb3\x97\xb2\x1d\x00\x00")

func schemaPostgresqlV96TemporalSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalSchemaSql,
		"schema/postgresql/v96/temporal/schema.sql",
	)
}

func schemaPostgresqlV96TemporalSchemaSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/schema.sql", size: 7602, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV10ManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x31\xcb\xc2\x30\x10\x87\xf1\xfd\x3e\xc5\x9f\x9b\x5f\x42\xbb\x76\xcd\x8b\x9b\x93\xe8\x22\x0e\x69\x3d\xf1\x20\x6d\xd2\x5c\x74\x11\xbf\xbb\x68\x1c\xdc\x1e\x1e\x7e\x0f\x02\xd8\xdf\x4a\x39\x48\x31\x4d\x0b\x0f\xe0\xde\x75\xfc\xf7\xfe\x5b\x5d\x7c\x9a\x73\xa8\x3a\x46\xf9\x01\x9d\xeb\x1b\xf8\x17\x9b\x8a\xe6\xfa\xfd\x63\x30\xc1\xbd\x39\xa4\x0b\x6c\xba\xca\x1c\x1a\xdd\x7d\x7a\x9f\xcf\xa1\x8a\x5f\xe3\x46\xa3\x18\x0f\x38\x12\x00\x70\x93\xce\xd6\xc8\x04\x9c\xe8\x49\xaf\x00\x00\x00\xff\xff\xca\xe4\x5c\x63\x99\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV10ManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV10ManifestJson,
		"schema/postgresql/v96/temporal/versioned/v1.0/manifest.json",
	)
}

func schemaPostgresqlV96TemporalVersionedV10ManifestJson() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV10ManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.0/manifest.json", size: 153, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV10SchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\xb7\xda\x80\x0c\xc4\x59\xd3\x61\xcd\x30\x40\x69\xb5\xce\x98\xe3\x74\x8e\x12\x2c\x4f\x02\x2d\x9d\x23\x22\x12\xa9\x90\x54\x12\x7f\xfb\x81\x92\x15\x89\x31\x25\xbb\xf6\x1a\xa7\x40\x8d\x3e\xa8\xe2\xe9\xf8\xfb\xc3\x3f\x47\xe6\xd3\xcc\x73\x7d\x0f\x7c\xf7\x6c\xe2\x01\x23\x29\xca\x8c\x84\x28\xfb\x3d\x80\x8c\x08\x45\x15\xe5\x2c\xa0\x11\x8c\xa7\xbe\xf7\xc5\x9b\xc1\xf4\xc2\x87\xe9\xd5\x64\xe2\xf4\x00\x68\x04\x67\x37\xbe\xe7\x1a\x2f\x75\x0e\xb8\x76\x67\x9f\xfe\x72\x67\xfd\xe3\x93\x93\x01\x5c\x4d\xc7\xff\x5c\x79\x66\x10\x57\x74\x41\x43\x52\x64\x7f\x40\x21\x29\x67\x70\x36\xfe\x32\x9e\xfa\x46\xdc\x70\xd8\x03\x88\x88\x22\x96\x8e\xf4\xeb\x00\x59\xc8\x23\xca\x6e\x9f\x7b\x1c\x7d\x18\x98\x18\x65\x70\x9b\xf0\x39\x49\xe0\xec\xe2\x62\xe2\xb9\x53\xa3\xf5\xeb\x6c\x7c\xee\xce\x6e\xe0\x6f\xef\xa6\xdf\xa4\xeb\x00\x8d\x06\xbd\xc1\x69\xaf\x67\xd7\x27\x48\x51\x91\x02\xd7\x56\x42\x6d\x4b\xb7\x0d\x4e\x09\x65\x3c\xbd\xf4\x66\xbe\xee\xe0\xc2\x8a\xc4\x24\x60\xeb\x73\x00\xd7\xee\xe4\xca\xbb\x84\xfe\xc9\xfb\x5f\x8e\x47\x0e\x8c\xd6\x28\xca\x98\x88\x48\x16\xb4\x8a\xc7\x36\x4a\x85\x33\x82\xb0\x5b\xd4\x11\x16\x2e\x7b\xb9\xd6\x10\x02\xfa\x15\x0e\x8b\x21\x4a\x10\x26\x17\x28\x02\x45\xe4\x9d\xdc\x08\x5a\x47\xb5\xc0\xdd\x7f\xa4\x59\x31\x3b\x55\x9f\x16\xf0\xf8\x84\x61\xae\xed\xd9\x0c\xbc\xb6\xdb\x3a\xe7\x1e\xb9\xb8\x5b\x24\xfc\x51\xb7\x1a\x53\xaf\x19\x24\x72\x66\xff\xba\xa0\xce\xf0\x49\x05\xf8\x80\x4c\xb5\x08\x94\x10\xa9\x82\x47\x41\x15\x76\x8d\xe0\xbd\x14\x94\x8a\x28\xb4\x7c\x5d\xbc\xdf\xd9\x80\xa6\x76\x4e\x53\x2a\x67\x25\x89\xc5\x9a\x30\x17\x42\x4b\xf1\xca\x16\x95\x93\xaa\xcd\xa7\x50\xa0\xd6\x41\xe0\x7d\x8e\x52\x35\x13\x7d\x78\x6f\x13\xd2\x86\x52\xb7\xe4\xb2\xad\x49\xa8\x2e\x6f\xb7\x1b\x01\xdf\xea\x82\x45\xfd\x79\xbe\x58\xa0\xc0\xa8\x1c\x8f\x5b\x2c\x46\xdf\x75\x7a\x94\xd3\xe1\xd2\x9b\x8d\xdd\xc9\x73\xc3\x6a\x53\xfb\xae\x2b\xc7\xc6\x81\xdb\xb2\x4b\x15\x6b\x61\x21\x5a\xb9\x3e\xc7\x44\xc6\x36\xa7\x8a\x95\xe9\x3e\xc7\xbc\x45\xb6\xd7\x5b\x2d\x6b\x9c\x8e\x89\xaa\x6b\xf9\xac\x03\xff\x0f\xb2\xaf\xb8\x9f\xb5\xb2\xb5\x90\x14\x98\x25\xd5\x26\x5e\xfb\xfa\x03\x6d\x72\x6b\x04\x82\x28\xb9\x2f\x49\xf0\x5c\x84\x18\x84\x49\x2e\x15\x8a\x60\xbd\x6e\x34\x16\xa7\x37\xc2\x78\x1d\xb3\x03\xdb\xc8\xa0\x68\x5a\x55\x29\x9b\x1d\x7c\xa0\x92\xce\x69\x42\xd5\x32\xd0\xdf\x49\x45\xd2\x0c\xfc\xf1\xb9\x77\xe9\xbb\xe7\x5f\x0f\x6e\xb6\x0d\x5e\x17\x77\x12\x2a\xfa\xa0\xa3\x29\x5b\xf0\x20\x25\x99\x96\x60\x38\x04\x24\x61\x0c\x82\x3f\x42\xc8\x85\x40\x99\x71\x16\x49\x50\x1c\x38\x43\xb8\xc3\x25\xf0\x45\xf1\x98\x92\xec\x77\xa9\x04\x65\xb7\x0e\xb8\xab\x54\x63\xb6\xe0\x7f\x1c\x74\x57\x90\x61\x8c\x51\x9e\xd8\x57\x8b\x9d\xa4\xdf\x6f\x27\x68\xe0\x69\x1d\x7e\x4d\xfd\x0f\xa9\xdd\x0a\x4d\xeb\xa7\x07\x90\xaf\x82\x64\xab\x05\x63\x9a\x44\x75\x25\xf8\x66\x54\xa4\x8c\x2a\x4a\x14\x46\x6f\x65\x08\x36\x01\x59\x77\x82\xb2\x6e\x0d\x09\x0b\x31\xf9\x29\xe3\x8e\x32\x4a\x7a\xcb\xc8\x4f\xf9\xf6\x93\x4f\x56\xa7\x28\x8c\x02\x89\x07\x3f\x62\x54\x9e\xb6\x9f\xe8\x0a\x21\xf7\xd8\x1d\xaa\x0e\x4a\x45\x86\x43\x88\xa9\x54\x5c\x2c\xa1\x3c\x62\x5d\x1f\x7f\xac\xde\x04\x8c\x47\x08\xfa\x11\xa5\x19\x55\x38\x66\xaa\x69\x7c\x63\x68\x58\xfe\xac\xd5\x9a\x40\xac\x23\x2c\x6a\xcc\x05\x61\x61\xfc\x1c\x62\xb9\x62\xe4\x91\x91\xc1\x52\xed\x3f\xb1\x46\x40\x77\x75\x54\xff\x36\x8d\xd1\x6f\xae\x8a\x4b\xa6\x4e\xcd\xc8\xa9\xb0\x3b\x2b\x88\x5b\xf8\xa1\xb3\x54\x7e\x94\x89\xa0\xba\xf3\xb3\x9b\x51\x7c\xf0\x6a\x66\x1c\x46\x48\xcb\xcc\x2e\x4e\x51\x05\xef\xf2\x3c\xa5\x96\x99\xfd\x0e\x24\x45\x29\x49\xeb\x39\xaf\x6a\xcd\xc8\x32\xe1\xc4\x36\x5b\x9b\xb7\xb4\x75\x57\x4e\x23\x6f\x1b\x3a\xf3\xda\x78\x03\xcc\x96\x65\xd3\xde\xbb\xad\x6e\x59\x1d\x52\x8c\x3e\xab\xff\x04\xcf\x97\xc5\xd0\x31\x3a\x68\x9a\xe6\x8a\xcc\x13\x0c\x5e\x18\x6c\xdb\x08\x8c\xd8\x86\xd7\xdb\x98\xdd\x5f\xc7\xd5\xc9\x28\x9d\xa3\x90\x31\xcd\x7a\x9a\x93\x66\x55\xbd\x68\xf0\xb2\x11\x02\x88\x79\x79\x75\x06\xdd\x6c\x00\x44\x16\x06\x24\x8a\x04\x4a\x59\x07\x3e\x53\x79\xb1\xb2\x97\xe1\x19\x17\xca\xc8\x7b\x79\xee\x4e\x26\x2f\x07\x18\x80\xe0\x09\xc2\xcb\x5f\x4b\xac\x44\x29\x75\xd5\x59\xdc\xce\x55\xb1\xf5\x59\xf0\xb3\xf7\xa7\x7b\x35\xf1\xe1\xdd\xe8\xb7\x5f\x8f\x86\x47\xa3\xe1\xd1\x08\x8e\x8e\x3e\xea\x7f\xa3\x77\x65\x86\xe2\xda\x2e\x46\x22\xd4\x1c\x89\xda\x25\x83\xc0\x90\x0b\x5d\x02\x67\x54\x2c\x77\xc2\x60\xcc\x6b\x9b\x5b\x4e\x65\x8c\x61\xfb\xea\x2f\x47\xe3\xe9\x67\xef\x5f\x08\xd3\x80\x46\x4f\x81\x16\x4f\xc7\xc2\xc5\xd4\x32\x20\xa0\xaf\xdb\xeb\x6c\xa7\x55\xaa\xb5\x1c\x5a\x96\x78\xde\x9d\xc5\x94\xae\x2d\x59\x16\x76\xe2\xa9\xc7\x91\x53\x38\xdf\x92\xa6\x1b\xcf\x76\x48\x0a\x9f\x56\x36\xb5\xc1\x69\x7a\x39\x38\xfd\x2f\x00\x00\xff\xff\xe0\xde\x5e\x65\xff\x1b\x00\x00")

func schemaPostgresqlV96TemporalVersionedV10SchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV10SchemaSql,
		"schema/postgresql/v96/temporal/versioned/v1.0/schema.sql",
	)
}

func schemaPostgresqlV96TemporalVersionedV10SchemaSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV10SchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.0/schema.sql", size: 7167, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xce\x29\x2d\x2e\x49\x2d\x8a\xcf\x4d\x2d\x49\x4c\x49\x2c\x49\x54\x70\x74\x71\x51\x00\x33\x9c\x22\x43\x5c\x1d\x15\xfc\xfc\x43\x14\xfc\x42\x7d\x7c\x14\x5c\x5c\xdd\x1c\x43\x7d\x42\x14\xd4\xd5\xad\xb9\x88\x32\x20\x3e\x35\x2f\x39\x3f\x25\x33\x2f\x5d\x21\xcc\x31\xc8\xd9\xc3\x31\x48\xc3\xd0\x4c\x13\x8b\x79\x01\x45\xf9\x25\xf9\xc6\xc4\x98\x5a\x96\x5a\x54\x9c\x99\x9f\xa7\xe0\xe4\xe9\xee\xe9\x17\x82\x69\x94\xa1\x35\x20\x00\x00\xff\xff\x49\x60\x36\x4e\xda\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSql,
		"schema/postgresql/v96/temporal/versioned/v1.1/cluster_metadata.sql",
	)
}

func schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.1/cluster_metadata.sql", size: 218, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV11ManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\xbb\x0a\xc2\x40\x10\x46\xe1\x7e\x9f\xe2\x67\x6a\x09\xa6\x4d\x1b\xb1\xb3\x12\x6d\x44\x64\x4c\x46\x5c\xd8\xdc\x66\x66\x2b\xf1\xdd\xc5\x24\x16\xb6\x87\xef\xbc\x02\x40\x75\x56\x3d\x8b\x5a\x1c\x7a\xaa\x40\x65\x51\xd2\xe6\xdb\x0f\xb1\xaf\x87\x6e\x64\x8f\xf7\x24\x7f\x60\xbb\x80\x9d\x58\xa3\x71\xf4\xb5\x5b\xf3\x94\x8e\x91\xc7\x96\x5d\xf0\x18\x14\x4d\xca\xe6\xa2\xe8\xc4\xb9\x65\xe7\x65\x3b\xce\xee\x34\xb3\x7a\x4a\xfb\x98\xc4\xa8\xc2\x25\x00\x00\xad\xcf\xed\xf7\x14\x36\x25\x0a\xc0\x35\xbc\xc3\x27\x00\x00\xff\xff\x5b\xe4\x50\xc9\xaf\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV11ManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV11ManifestJson,
		"schema/postgresql/v96/temporal/versioned/v1.1/manifest.json",
	)
}

func schemaPostgresqlV96TemporalVersionedV11ManifestJson() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV11ManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.1/manifest.json", size: 175, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV12ManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\xb1\xaa\x02\x31\x10\x46\xe1\x3e\x4f\xf1\x33\xf5\x65\xb9\x5a\x6e\x1b\xb1\x13\x44\xd1\x46\x2c\x62\x1c\x71\x20\xbb\x49\x26\x49\x25\xbe\xbb\x18\x6d\x6c\x0f\xdf\x79\x18\x80\x6c\x53\x3d\xb2\x16\x89\x33\x8d\xa0\xc5\xb0\xa4\xbf\x77\xdf\xc8\x6c\xe3\x94\x5c\x95\x4b\xe0\x1f\xf0\xff\x01\x2b\x2e\x5e\x25\xd5\x6f\x2f\xfe\xce\x93\x43\x4b\x57\x57\x19\xb7\xa8\xd8\x6d\x2d\x94\x53\x10\xef\x3a\xea\xd7\xbe\xb3\x43\x57\x36\x87\xb5\x04\x2e\x34\xe2\x64\x00\x80\x72\xe3\xc6\x43\xc9\x81\x0c\x70\x36\x4f\xf3\x0a\x00\x00\xff\xff\x5f\x68\x44\x12\xa3\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV12ManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV12ManifestJson,
		"schema/postgresql/v96/temporal/versioned/v1.2/manifest.json",
	)
}

func schemaPostgresqlV96TemporalVersionedV12ManifestJson() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV12ManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.2/manifest.json", size: 163, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV12QueueSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2c\x4d\x2d\x4d\x55\x70\x74\x71\x51\xc8\x4d\x2d\x2e\x4e\x4c\x4f\x8d\x4f\xcd\x4b\xce\x4f\xc9\xcc\x4b\x57\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x34\xd3\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\xf7\x2a\xce\xcf\x53\xb7\xe6\xc2\x30\x2b\x3e\x37\xb5\x24\x31\x25\xb1\x24\x11\x6c\x28\x88\x41\xa2\x89\x80\x00\x00\x00\xff\xff\x63\x03\xdd\x28\x9e\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV12QueueSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV12QueueSql,
		"schema/postgresql/v96/temporal/versioned/v1.2/queue.sql",
	)
}

func schemaPostgresqlV96TemporalVersionedV12QueueSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV12QueueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.2/queue.sql", size: 158, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV13ManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\xb1\xaa\xc2\x40\x10\x46\xe1\x7e\x9f\xe2\x67\xea\x4b\xb8\x62\x97\x36\x62\x67\x25\xda\x88\xc8\x24\x99\xe0\x90\x4d\xb2\xd9\xd9\x08\x22\xbe\xbb\xb8\xda\xd8\x1e\xbe\xf3\x70\x00\x55\x4b\x8c\x47\x89\xa6\xd3\x48\x25\x68\x55\xac\xe9\xef\xdd\x77\x3a\x56\xd3\x10\x38\x69\xed\xe5\x07\xfc\x7f\xc0\x46\xac\x89\x1a\xd2\xb7\x5b\x73\x95\x81\xb1\x84\x96\x93\xa0\x9b\x22\x7a\xee\x7a\x46\x2b\x21\x4a\xc3\x99\xe5\x6f\x9f\xe1\x21\xbb\x6a\xf6\x5b\xf5\x62\x54\xe2\xe4\x00\x80\x6e\x6a\x5a\xab\xd7\x74\xbf\x24\xb6\xde\x0a\x9b\x3d\x39\xe0\xec\x9e\xaf\x00\x00\x00\xff\xff\x19\x80\x05\xbf\xaf\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV13ManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV13ManifestJson,
		"schema/postgresql/v96/temporal/versioned/v1.3/manifest.json",
	)
}

func schemaPostgresqlV96TemporalVersionedV13ManifestJson() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV13ManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.3/manifest.json", size: 175, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x0a\xc2\x30\x10\xc6\xf1\x3d\x4f\xf1\x8d\x2d\xb4\x83\x8b\x8b\x53\x5a\x8e\x1a\xac\x51\x8e\x53\xe8\x54\xa2\x11\x3d\x94\x0a\xa6\x08\xbe\xbd\x74\xe8\xd0\xf5\x7e\x7f\xb8\xaf\x66\xb2\x42\x10\x5b\xb5\x84\xaf\x26\xbd\xe8\x4b\xc7\x5f\x3f\x86\xf4\x4c\x99\x01\xd2\x23\x7c\x62\xaf\x11\xce\x0b\x35\xc4\xf0\x07\x81\x3f\xb5\x6d\x61\x80\xa9\x9a\xac\x72\x8d\xf3\xb2\xa0\xb2\x34\x40\x0c\x63\x40\xd5\x09\xd9\x85\x4d\xe7\xfe\x36\x5c\xdf\x51\x87\x3b\xce\x96\xeb\xad\xe5\x6c\xb5\xce\x17\xd5\x91\xdd\xde\x72\x87\x1d\x75\xc8\xe6\x19\xc5\xfc\x33\x37\xf9\xe6\x1f\x00\x00\xff\xff\x8d\x1d\x5c\xb3\xbd\x00\x00\x00")

func schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSql,
		"schema/postgresql/v96/temporal/versioned/v1.3/visibility_tasks.sql",
	)
}

func schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/temporal/versioned/v1.3/visibility_tasks.sql", size: 189, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96VisibilityDatabaseSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x70\x71\x0c\x71\x74\x72\x0c\x76\x55\x28\x49\xcd\x2d\xc8\x2f\x4a\xcc\x89\x2f\xcb\x2c\xce\x4c\xca\xcc\xc9\x2c\xa9\xb4\x06\x04\x00\x00\xff\xff\xad\x34\x7c\xb2\x24\x00\x00\x00")

func schemaPostgresqlV96VisibilityDatabaseSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96VisibilityDatabaseSql,
		"schema/postgresql/v96/visibility/database.sql",
	)
}

func schemaPostgresqlV96VisibilityDatabaseSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96VisibilityDatabaseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/visibility/database.sql", size: 36, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96VisibilitySchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x72\xda\x30\x10\xbd\xeb\x2b\xf6\x16\x98\x71\x2e\x9d\xa6\x97\x9c\x84\xbd\xa1\x9a\xda\x32\x23\xe4\xa6\x9c\x34\x0e\x51\x13\x4d\xb0\x9d\x22\xb9\x29\xd3\xe9\xbf\x77\x6c\x0c\x08\x42\x98\xb8\x54\x17\xc4\xec\xd3\xbe\xb7\x6f\x9f\x43\x81\x54\x22\x48\x3a\x8a\x11\xf4\x2f\x3d\xaf\x9d\xa9\x4a\xab\x7e\x1a\x6b\xee\xcc\xc2\xb8\x15\x0c\x08\x40\x99\x17\xda\x3e\xe7\x73\xad\xcc\x3d\x6c\x4e\xf8\x99\x8a\xc1\xa7\x8f\x43\xe0\xa9\x04\x9e\xc5\x71\x40\x00\x96\x75\xe9\x63\x4e\x20\xad\xcb\x97\x4e\x39\x53\x68\x0f\x29\x59\x82\x53\x49\x93\xc9\x1e\x74\x2b\xcc\x87\x1f\x87\xbe\x54\xcb\xa7\xef\x8b\xea\x65\x4f\xc4\x57\x2a\x5a\x09\x1f\xae\xae\x86\xc7\xd1\x6e\xf5\xac\x55\x33\xe5\x29\xb4\x75\xb9\xab\xed\xc1\x6c\x8c\x4b\x1c\xa3\xd8\x01\x01\x2e\x2f\x41\x97\x75\x01\xb7\x5d\x77\xdc\xc8\x9f\xae\x1b\xfc\x16\x19\xe7\x8c\x8f\x03\x08\xd3\x64\x12\xa3\xc4\x28\x80\x1b\xca\xe2\xe6\x37\xa4\x3c\xc4\xf6\x26\x51\x24\x8c\xd3\xb6\x1a\xa6\x5c\x32\x9e\x61\xa4\xe8\x54\x71\xbc\x0d\xda\xf1\x23\x95\x66\xf2\x0f\x01\x98\x2f\x2a\xab\x4f\x78\xd9\x0d\xf0\x68\xac\xab\x96\x2b\xb5\xd0\xe5\x83\x7b\xec\x60\x23\x36\x66\x5c\x36\xe5\x42\x17\x15\x1c\x9e\xd1\x4c\x22\x6d\x97\x50\xce\xab\x7b\x53\x3e\xec\x55\x37\x5e\x1d\x2e\xd7\xe5\xf6\x49\xfd\xa8\x75\xad\x8f\x80\x5b\x63\x23\xbc\xa1\x59\x2c\xe1\xe2\xc2\x7b\x48\x00\x26\x82\x25\x54\xcc\xe0\x0b\xce\x00\x06\x7e\xf0\x82\x2e\x5c\x43\x32\xbc\x26\xa4\x4b\x2e\xe3\x11\x7e\x83\xbb\xd5\x7a\x83\x5e\xa6\x52\xfe\x56\x9e\xf7\x7b\xbe\x8e\x40\xd0\x2d\x3a\xf0\x23\x1a\xe1\x34\xdc\x0a\xb8\x7e\xc5\xee\xc5\xee\x2c\x11\xcd\x9f\xfe\xec\xeb\x17\x6a\x7d\xeb\xcb\xdd\x9f\xae\x75\xca\x8b\xdc\xff\xb0\xda\x6b\xd7\xc3\xea\x73\x44\xf8\xb3\xbf\x9f\x7d\x67\xf5\x3f\x70\xf7\xa7\xdb\x21\xd5\x96\xfc\xdd\x74\x6f\xd0\x6c\x74\x34\x5f\x11\xf9\x1b\x00\x00\xff\xff\x98\x13\x1a\x66\x01\x06\x00\x00")

func schemaPostgresqlV96VisibilitySchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96VisibilitySchemaSql,
		"schema/postgresql/v96/visibility/schema.sql",
	)
}

func schemaPostgresqlV96VisibilitySchemaSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96VisibilitySchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/visibility/schema.sql", size: 1537, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96VisibilityVersionedV10ManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xb1\xca\xc2\x30\x14\xc5\xf1\x3d\x4f\x71\xb8\xf3\x47\x68\xd7\xae\xf9\x70\x73\x12\x5d\xc4\x21\xa9\x57\xbc\x90\x36\x69\x6e\x2c\x88\xf8\xee\xa2\x71\x70\x3b\xfc\xf9\x9d\x87\x01\xc8\xdd\x4a\x39\x70\x51\x49\x33\x0d\xa0\xde\x76\xf4\xf7\xee\x5b\x99\x5d\x9a\xb2\xaf\x12\x22\xff\x80\xce\xf6\x0d\xfc\xb3\x8e\x45\x72\xfd\xf6\xe0\x95\xb1\x36\x87\x74\xc1\x2a\x2a\x41\xa2\xd4\x3b\x74\xbc\xf2\xe4\xdb\x6b\xf7\xd9\xfb\x7c\xf6\x95\xdd\x12\x37\x12\x59\x69\xc0\xd1\x00\x00\x35\x69\x75\x89\x64\x80\x93\x79\xbe\x02\x00\x00\xff\xff\x70\xa6\xc5\x65\xa3\x00\x00\x00")

func schemaPostgresqlV96VisibilityVersionedV10ManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96VisibilityVersionedV10ManifestJson,
		"schema/postgresql/v96/visibility/versioned/v1.0/manifest.json",
	)
}

func schemaPostgresqlV96VisibilityVersionedV10ManifestJson() (*asset, error) {
	bytes, err := schemaPostgresqlV96VisibilityVersionedV10ManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/visibility/versioned/v1.0/manifest.json", size: 163, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96VisibilityVersionedV10SchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x72\x9b\x30\x10\xbd\xeb\x2b\xf6\x16\x7b\x86\x5c\x3a\x4d\x2f\x39\xc9\xb0\x71\x35\x05\xe1\x91\x45\x53\x9f\x34\xc4\x51\x13\x4d\x0c\xa4\x96\x68\xea\xe9\xf4\xdf\x3b\x06\x9c\x08\xc7\x75\x4b\x1d\x5d\x10\xb3\x4f\xfb\xde\xbe\x7d\xa1\x40\x2a\x11\x24\x9d\xc4\x08\xfa\x87\x5e\xd6\xce\x54\xa5\x55\xdf\x8d\x35\x37\x66\x65\xdc\x06\x46\x04\xa0\xcc\x0b\x6d\x1f\xf3\xa5\x56\xe6\x16\x76\x27\xfc\x48\xc5\xe8\xc3\xfb\x31\xf0\x54\x02\xcf\xe2\x38\x20\x00\xeb\xba\xf4\x31\x47\x90\xd6\xe5\x6b\xa7\x9c\x29\xb4\x87\x94\x2c\xc1\xb9\xa4\xc9\xac\x07\x7d\x16\xe6\xc3\x0f\x43\x9f\xaa\xf5\xc3\xd7\x55\xf5\xd4\x13\xf1\x99\x8a\x46\xc2\xbb\x8b\x8b\xf1\x61\xb4\xdb\x3c\x6a\xb5\x9d\xf2\x18\xda\xba\xdc\xd5\x76\x6f\x36\xc6\x25\x4e\x51\xbc\x00\x01\xce\xcf\x41\x97\x75\x01\xd7\x5d\x77\xdc\xc9\x9f\xb7\x0d\x7e\x8a\x8c\x73\xc6\xa7\x01\x84\x69\x32\x8b\x51\x62\x14\xc0\x15\x65\xf1\xf6\x1b\x52\x1e\x62\x73\x93\x28\x12\xc6\x69\x53\x0d\x53\x2e\x19\xcf\x30\x52\x74\xae\x38\x5e\x07\xcd\xf8\x91\x4a\x33\xf9\x8b\x00\x2c\x57\x95\xd5\x47\xbc\xec\x06\xb8\x37\xd6\x55\xeb\x8d\x5a\xe9\xf2\xce\xdd\x77\xb0\x09\x9b\x32\x2e\xb7\xe5\x42\x17\x15\xec\x9f\xc9\x42\x22\x6d\x96\x50\x2e\xab\x5b\x53\xde\xf5\xaa\x3b\xaf\xf6\x97\xeb\x72\xfb\xa0\xbe\xd5\xba\xd6\x07\xc0\x8d\xb1\x11\x5e\xd1\x2c\x96\x70\x76\xe6\x3d\x24\x00\x33\xc1\x12\x2a\x16\xf0\x09\x17\x00\x23\x3f\x78\x41\x17\xae\x31\x19\x5f\x12\xd2\x25\x97\xf1\x08\xbf\xc0\xcd\xa6\xdd\xa0\x97\xa9\x94\xff\x29\xcf\xfd\x9e\xaf\x23\x10\x74\x8b\x0e\xfc\x88\x46\x38\x0f\x9f\x05\x5c\xbe\x62\xf7\x62\x77\x92\x88\xed\xcf\x70\xf6\xf6\x85\x6a\x6f\x43\xb9\x87\xd3\x35\x4e\x79\x91\x7b\x0b\xab\xbd\x76\x03\xac\x3e\x45\x84\x3f\xfb\xbf\xb3\xbf\x58\xfd\x1f\xdc\x7f\xa7\x23\xe4\x77\x00\x00\x00\xff\xff\x69\x11\x7d\x2f\x92\x05\x00\x00")

func schemaPostgresqlV96VisibilityVersionedV10SchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96VisibilityVersionedV10SchemaSql,
		"schema/postgresql/v96/visibility/versioned/v1.0/schema.sql",
	)
}

func schemaPostgresqlV96VisibilityVersionedV10SchemaSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96VisibilityVersionedV10SchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/visibility/versioned/v1.0/schema.sql", size: 1426, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96VisibilityVersionedV11IndexSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\x48\xaa\x8c\x4f\xce\xc9\x2f\x4e\x8d\x2f\xc9\xcc\x4d\x8d\x4f\xaa\x8c\x2f\x2e\x49\x2c\x29\x2d\x56\xf0\xf7\x53\x48\xad\x48\x4d\x2e\x2d\xc9\xcc\xcf\x2b\x8e\x2f\xcb\x2c\xce\x4c\xca\xcc\xc9\x2c\xa9\x54\xd0\xc8\x4b\xcc\x4d\x2d\x2e\x48\x4c\x4e\x8d\xcf\x4c\xd1\x51\x40\x68\x56\x70\x71\x0d\x76\xd6\x51\x28\x2a\xcd\x03\x4b\x40\xcc\xd1\xb4\xe6\x02\x04\x00\x00\xff\xff\xd7\x23\xc4\xa9\x6f\x00\x00\x00")

func schemaPostgresqlV96VisibilityVersionedV11IndexSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96VisibilityVersionedV11IndexSql,
		"schema/postgresql/v96/visibility/versioned/v1.1/index.sql",
	)
}

func schemaPostgresqlV96VisibilityVersionedV11IndexSql() (*asset, error) {
	bytes, err := schemaPostgresqlV96VisibilityVersionedV11IndexSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/visibility/versioned/v1.1/index.sql", size: 111, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaPostgresqlV96VisibilityVersionedV11ManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\xbb\xaa\xc2\x40\x10\x87\xf1\x7e\x9f\xe2\xcf\x14\xa7\x3a\x04\xd3\xa6\x8d\xd8\x59\x89\x36\x62\xb1\x66\x07\x1c\xd8\x5b\x76\x26\x20\x88\xef\x2e\xde\xc0\xf6\xe3\xf7\xdd\x1c\x40\xe3\xd2\xda\x81\x9b\x4a\xc9\x34\x80\xfa\xae\xa7\xff\x67\xdf\x4a\x1e\x4b\xaa\xde\xe4\x1c\xf9\x07\xac\xbe\x60\xcd\x3a\x35\xa9\xf6\xe9\x3e\x04\x4c\xb1\x28\xc3\x24\x31\xfe\xa0\xe6\x6d\x51\x48\x0e\x7c\x7d\x1f\xbb\xe9\xc2\xc9\xef\x6b\xf0\xc6\xe3\x1c\x37\x12\x59\x69\xc0\xd1\x01\x00\xbd\x60\xa7\x73\x24\x07\x9c\xdc\xfd\x11\x00\x00\xff\xff\x39\xef\x40\x9c\x9e\x00\x00\x00")

func schemaPostgresqlV96VisibilityVersionedV11ManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaPostgresqlV96VisibilityVersionedV11ManifestJson,
		"schema/postgresql/v96/visibility/versioned/v1.1/manifest.json",
	)
}

func schemaPostgresqlV96VisibilityVersionedV11ManifestJson() (*asset, error) {
	bytes, err := schemaPostgresqlV96VisibilityVersionedV11ManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/postgresql/v96/visibility/versioned/v1.1/manifest.json", size: 158, mode: os.FileMode(292), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/postgresql/v96/temporal/database.sql":                        schemaPostgresqlV96TemporalDatabaseSql,
	"schema/postgresql/v96/temporal/schema.sql":                          schemaPostgresqlV96TemporalSchemaSql,
	"schema/postgresql/v96/temporal/versioned/v1.0/manifest.json":        schemaPostgresqlV96TemporalVersionedV10ManifestJson,
	"schema/postgresql/v96/temporal/versioned/v1.0/schema.sql":           schemaPostgresqlV96TemporalVersionedV10SchemaSql,
	"schema/postgresql/v96/temporal/versioned/v1.1/cluster_metadata.sql": schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSql,
	"schema/postgresql/v96/temporal/versioned/v1.1/manifest.json":        schemaPostgresqlV96TemporalVersionedV11ManifestJson,
	"schema/postgresql/v96/temporal/versioned/v1.2/manifest.json":        schemaPostgresqlV96TemporalVersionedV12ManifestJson,
	"schema/postgresql/v96/temporal/versioned/v1.2/queue.sql":            schemaPostgresqlV96TemporalVersionedV12QueueSql,
	"schema/postgresql/v96/temporal/versioned/v1.3/manifest.json":        schemaPostgresqlV96TemporalVersionedV13ManifestJson,
	"schema/postgresql/v96/temporal/versioned/v1.3/visibility_tasks.sql": schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSql,
	"schema/postgresql/v96/visibility/database.sql":                      schemaPostgresqlV96VisibilityDatabaseSql,
	"schema/postgresql/v96/visibility/schema.sql":                        schemaPostgresqlV96VisibilitySchemaSql,
	"schema/postgresql/v96/visibility/versioned/v1.0/manifest.json":      schemaPostgresqlV96VisibilityVersionedV10ManifestJson,
	"schema/postgresql/v96/visibility/versioned/v1.0/schema.sql":         schemaPostgresqlV96VisibilityVersionedV10SchemaSql,
	"schema/postgresql/v96/visibility/versioned/v1.1/index.sql":          schemaPostgresqlV96VisibilityVersionedV11IndexSql,
	"schema/postgresql/v96/visibility/versioned/v1.1/manifest.json":      schemaPostgresqlV96VisibilityVersionedV11ManifestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"postgresql": &bintree{nil, map[string]*bintree{
			"v96": &bintree{nil, map[string]*bintree{
				"temporal": &bintree{nil, map[string]*bintree{
					"database.sql": &bintree{schemaPostgresqlV96TemporalDatabaseSql, map[string]*bintree{}},
					"schema.sql":   &bintree{schemaPostgresqlV96TemporalSchemaSql, map[string]*bintree{}},
					"versioned": &bintree{nil, map[string]*bintree{
						"v1.0": &bintree{nil, map[string]*bintree{
							"manifest.json": &bintree{schemaPostgresqlV96TemporalVersionedV10ManifestJson, map[string]*bintree{}},
							"schema.sql":    &bintree{schemaPostgresqlV96TemporalVersionedV10SchemaSql, map[string]*bintree{}},
						}},
						"v1.1": &bintree{nil, map[string]*bintree{
							"cluster_metadata.sql": &bintree{schemaPostgresqlV96TemporalVersionedV11Cluster_metadataSql, map[string]*bintree{}},
							"manifest.json":        &bintree{schemaPostgresqlV96TemporalVersionedV11ManifestJson, map[string]*bintree{}},
						}},
						"v1.2": &bintree{nil, map[string]*bintree{
							"manifest.json": &bintree{schemaPostgresqlV96TemporalVersionedV12ManifestJson, map[string]*bintree{}},
							"queue.sql":     &bintree{schemaPostgresqlV96TemporalVersionedV12QueueSql, map[string]*bintree{}},
						}},
						"v1.3": &bintree{nil, map[string]*bintree{
							"manifest.json":        &bintree{schemaPostgresqlV96TemporalVersionedV13ManifestJson, map[string]*bintree{}},
							"visibility_tasks.sql": &bintree{schemaPostgresqlV96TemporalVersionedV13Visibility_tasksSql, map[string]*bintree{}},
						}},
					}},
				}},
				"visibility": &bintree{nil, map[string]*bintree{
					"database.sql": &bintree{schemaPostgresqlV96VisibilityDatabaseSql, map[string]*bintree{}},
					"schema.sql":   &bintree{schemaPostgresqlV96VisibilitySchemaSql, map[string]*bintree{}},
					"versioned": &bintree{nil, map[string]*bintree{
						"v1.0": &bintree{nil, map[string]*bintree{
							"manifest.json": &bintree{schemaPostgresqlV96VisibilityVersionedV10ManifestJson, map[string]*bintree{}},
							"schema.sql":    &bintree{schemaPostgresqlV96VisibilityVersionedV10SchemaSql, map[string]*bintree{}},
						}},
						"v1.1": &bintree{nil, map[string]*bintree{
							"index.sql":     &bintree{schemaPostgresqlV96VisibilityVersionedV11IndexSql, map[string]*bintree{}},
							"manifest.json": &bintree{schemaPostgresqlV96VisibilityVersionedV11ManifestJson, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
