// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package template generated by go-bindata.// sources:
// ../../web/index.html
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x51\x73\xda\x3a\x13\x7d\xef\xaf\xd0\xa7\x3e\xf4\x21\xb5\x15\x1b\x08\x49\x3f\x3b\x33\x69\x9a\x86\x02\x81\x50\x02\x04\xde\x64\x59\xb6\x45\x6c\xc9\x91\x64\xc0\xe9\xf4\xbf\xdf\x31\x60\x02\x84\x74\xd2\xce\xed\x7d\xb2\x76\xf7\xcc\x6a\xcf\xd9\xb5\x24\xe7\x7f\xbe\x20\x3a\x4f\x29\x88\x74\x12\x9f\xbf\x73\x8a\x0f\x88\x31\x0f\x5d\x48\x39\x3c\x7f\x07\x80\x13\x51\xec\x17\x0b\x00\x9c\x84\x6a\x0c\x48\x84\xa5\xa2\xda\x85\x99\x0e\x8c\x53\xb8\x1d\xe2\x38\xa1\x2e\x9c\x31\x3a\x4f\x85\xd4\x10\x10\xc1\x35\xe5\xda\x85\x73\xe6\xeb\xc8\xf5\xe9\x8c\x11\x6a\x2c\x8d\x8f\x80\x71\xa6\x19\x8e\x0d\x45\x70\x4c\x5d\xeb\x23\x50\x91\x64\xfc\xc1\xd0\xc2\x08\x98\x76\xb9\x28\x53\xc7\x8c\x3f\x00\x49\x63\x17\x2a\x9d\xc7\x54\x45\x94\x6a\x08\x22\x49\x03\x17\x46\x5a\xa7\xea\x13\x42\xc4\xe7\x53\x65\x92\x58\x64\x7e\x10\x63\x49\x4d\x22\x12\x84\xa7\x78\x81\x62\xe6\x29\xa4\xe7\x4c\x6b\x2a\x0d\x4f\x08\xad\xb4\xc4\x29\xaa\x99\xc7\xe6\xb1\xe1\x51\x8d\x2b\x88\x28\x85\x36\x11\x33\x61\xdc\x24\x4a\x41\xc0\xb8\xa6\xa1\x64\x3a\x77\xa1\x8a\x70\xcd\xb2\x8d\x4e\xd5\xaa\x45\x97\xcd\xa6\xdf\x5c\x1c\x59\x83\xcf\xc1\xa0\xad\x8f\xd8\x11\x8b\x66\x5d\x5e\xb5\x87\xe8\xa1\x3b\xed\xa6\xa9\x35\xb8\x8b\xaa\x97\x93\xfa\x71\x63\x51\xf3\xbe\xc4\x2d\x99\x8f\xf0\xe3\x55\x2b\x18\xa3\xd3\xab\x71\x37\x43\x97\xf6\x4d\x96\xe3\x38\x6b\xca\xbc\x65\xb5\xbd\x5a\xcf\x75\x21\x20\x52\x28\x25\x24\x0b\x19\x77\x21\xe6\x82\xe7\x89\xc8\x14\x04\x68\xad\x81\x66\x3a\xa6\xe7\xb7\x62\x4e\x65\xbf\xdf\x06\x17\x99\x8e\x1c\xb4\x72\x16\x3d\x42\x65\x93\x1c\x4f\xf8\x79\xd9\x12\xcc\x38\x90\x22\xa6\x2e\x2c\x96\x10\x90\x18\x2b\xe5\xc2\xa2\x2b\x98\x71\x2a\xd7\x02\x17\x3d\xb6\xca\x60\xa2\x8d\x1a\xdc\xdf\x28\xb2\x36\x48\x9f\xcd\x4a\x28\x26\x44\x48\x9f\x09\x0e\x01\xf3\xb7\xcd\x12\xfc\x0a\xdc\x60\x9a\x26\x5b\xa0\x62\x7f\xfb\x25\xaa\xa0\xb4\x55\xe3\x1a\xe9\x65\x5a\x0b\xfe\x12\xbd\xf2\x43\x50\x0c\xb3\x0b\x4b\xcb\xc7\x1a\x1b\x9e\x32\xb4\x08\xc3\x42\x07\x22\xe2\x18\xa7\x8a\x6e\x45\xb0\x0c\x8b\x61\x7e\x5f\x86\xae\x99\x6e\x64\x1e\x3c\x5f\x7d\x1d\xb4\x4a\xb5\x53\x2d\x8a\xec\x1d\xbb\x20\x59\x28\xb0\x97\xe2\x65\x91\x25\x00\x6c\x16\x2a\x12\xf3\xe7\x62\x52\x2c\x97\xbf\xcb\xfb\x43\x5a\xbe\xae\x67\xd1\xf3\x3d\x20\x00\x4e\x20\x64\xb2\x2c\x2b\x64\x3a\x2a\x18\xed\x01\x9e\xc5\x5c\x69\xa6\x32\x2f\x61\x7a\x53\xb5\xa7\x39\xf0\x34\x37\x52\xc9\x12\x2c\xf3\x5f\x09\xb2\x12\xa5\xd8\x6f\xaf\x5a\xe4\xb3\xd9\xae\x72\x3b\x8e\x7d\xf3\x3f\x1e\x96\x4d\x17\xfc\x7f\x61\x6c\x06\x8a\xca\xe2\xf8\xbb\xc5\x4a\xcd\x85\xf4\xe1\x79\xe9\x01\x98\xfb\xa0\x74\xff\xd1\x3c\xbd\xc8\xfd\x86\xc9\xfa\xdb\x43\x95\xad\x6b\xba\xe0\xfe\x55\x82\x59\x7c\x68\xbc\xb6\xf2\x26\x9e\x51\x39\x00\x29\x4e\x77\xec\xd1\x18\x04\x42\x3e\xe7\xdc\xf0\x2b\x76\x33\x96\x80\x67\x39\x1d\xb4\x74\x1c\xcc\xc5\x78\x9a\xe9\x75\x2f\x35\x5d\xe8\xdd\x44\xc5\xb9\x27\x45\x0c\x77\xea\x3f\x54\xf7\xfe\xd8\xfe\x21\x9d\x74\xbf\x5d\xdb\x74\x9e\x07\xe2\x6d\x74\x0e\x27\xdb\xa1\xb4\x81\xbc\x9d\xd2\x6f\x1d\x00\xfd\x65\xfc\xaf\x1d\x00\x5b\x86\x83\x8a\x0b\x6b\xbd\x56\x44\xb2\x54\x03\x25\xc9\x9b\xaf\xfb\xe9\x63\x46\x65\x8e\x2a\xe6\x89\x79\xbc\x36\x96\xd7\xfa\xf4\xe0\xad\x7e\x7a\x56\x1d\x5f\x9d\xf4\x46\x5f\x6a\xdf\x6a\x67\x8d\x70\xd2\xbd\xfe\x4e\xbf\x8e\x93\xaa\xcf\x47\xc4\xea\xe9\x5a\x47\xcf\xc6\x7d\xdc\x21\xdd\xdb\xa3\xcc\xba\x3b\x7b\x1c\xfb\x33\x9f\x45\x4f\xc7\xb7\xb7\x7d\xc6\x1e\x39\x3a\x42\x15\x5a\x6f\x8a\xea\x15\xbe\xae\xdf\x65\x5e\x30\xba\x1e\xc8\x9b\x5f\xdd\xea\xe7\x0e\x5a\x91\xfa\x73\x86\xa9\x48\x53\x2a\xcd\xa9\x42\xb6\x79\x66\xda\x28\x4b\xfc\xd2\xf7\x3a\x51\x5b\x76\xa6\x76\xab\x79\xf4\xe5\x54\x59\x84\x76\xb0\xba\xfb\x46\x17\x27\x4f\xd5\xc6\x28\xef\xf2\xab\x71\x7b\x78\x59\xf9\xca\xc2\xeb\x6e\x92\xf7\x2e\x27\xc4\xa6\x9f\xef\x5b\x61\x77\xd1\x4b\x44\x45\xb4\xda\x8d\x3c\x20\xd3\x5a\x25\x7b\xaa\xf6\x6e\xd4\xf7\xcb\x51\xc7\x6b\xfb\x15\xbb\x67\x85\x7f\x97\xe8\xaf\x5f\x6e\xd3\xfd\x87\xdb\x61\xe2\x49\x5a\x19\xd2\x9b\x34\xfb\xda\xf2\xc2\x45\x82\xee\x6f\x06\x83\x6a\xaf\x37\x20\xcd\xfb\xea\xc5\x24\x18\xd6\xa8\x0a\xef\xeb\x76\xb3\x27\xeb\x8d\xfa\xd3\x28\x53\xc3\x93\xb8\x7d\x6b\xf5\xeb\xa7\xf3\x09\xbf\xb7\x9f\xce\xfc\xf9\x2c\x9f\xb3\xd8\x1a\x36\x1e\x1a\x93\x8b\xc7\xe0\xba\x3b\xaa\x77\xe6\xbf\x4d\xbc\x9c\x74\x22\xb8\xd2\x20\x2d\xde\x58\x4a\xc5\xc0\x05\x3f\x36\x7f\xc4\x9c\x7a\x17\x69\x3a\xf8\xfe\xed\x13\xf8\xf0\xe3\x07\x30\x47\xa5\x0d\x7e\xfe\xfc\xf0\x71\x0d\xfb\xf9\xff\xf5\x5f\xf2\xaa\xb8\x08\x2b\x45\xb5\x42\x38\x4d\x0b\x49\x76\xca\x71\xd0\xea\x8d\xe8\xa0\xd5\x9b\xff\x9f\x00\x00\x00\xff\xff\x10\xb2\xa9\x0c\x04\x0c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
