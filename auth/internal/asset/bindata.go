// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../web/assets/app.js
// ../../web/assets/favicon.ico
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x26\x68\xb0\xa4\x10\x83\x4d\xaf\x76\x75\x08\xb6\x39\x2c\xb0\x45\x0b\x07\x39\x15\x3d\xd0\xd4\x58\x62\x42\x93\x2a\x49\x45\x0d\xba\x7e\xf7\x82\x3f\xa2\xb4\xa9\x83\xb6\x58\x01\x49\xa4\xe1\xfc\x7e\x33\xdf\x30\x93\xd4\xad\x99\x18\x6f\xdb\xfb\x17\xd4\xfe\xb3\x74\x1e\x35\x5a\x4a\x4e\xe8\x1c\xef\x90\x6c\xe0\x38\x6a\xe1\xa5\xd1\x40\x31\xa8\xd4\xf0\x57\x05\x20\x8f\xf9\x93\x19\x2b\x3b\xa9\xe1\xaa\x69\x60\x30\x13\x5a\xe7\x14\x9b\xf0\x70\x37\x0c\x8f\xfb\x4f\x35\x58\xf4\xa3\xd5\xbb\x6c\xe2\x5f\x07\x34\x47\x48\x96\x2d\xf7\x1c\xae\x1a\x20\xe6\xf0\x84\xc2\x13\xf8\xf2\x65\x7d\xd2\x34\x0d\xe8\x51\xa9\xb5\x0f\x61\xb4\x33\x0a\x99\x32\x1d\x5d\x54\xeb\x70\xe4\x26\xe9\x45\x0f\x2b\x31\xe3\x31\xef\x94\x30\x80\xe0\x0e\x81\x28\xd3\x99\xd1\x93\x6d\x14\x01\x5c\xb3\xc1\x38\x4f\xc9\xf7\x59\x5e\xb3\xd6\x68\xa4\x4b\xcd\xb3\x75\x78\x9e\x26\xff\x80\x9e\xc6\xa4\xb2\xf0\x1c\x63\x87\xe7\x60\x91\x3f\x87\x8f\x73\x15\x84\xd5\x35\x6d\x8d\x18\x4f\x01\x31\x66\x91\xb7\xaf\xc5\x69\xf6\x19\x6a\xf1\xf0\xc7\x88\xf6\xf5\xc1\x5b\xa9\x3b\x68\x20\xb7\x43\x19\xc1\x83\x26\x73\xc8\xad\xe8\x77\x45\x7b\xb4\xea\x57\x6e\xf9\xc9\x41\x03\x1a\x27\x78\xdc\x7f\x7e\x88\x2a\x49\x4a\x57\xde\x62\x62\x0a\x3d\x8c\x0e\xad\xe6\x27\x84\x06\x3a\xf4\x1f\x8d\x79\x96\x48\xc9\x2c\x25\xf5\xdc\x9b\xa2\x17\x5a\x49\x08\x7c\xf8\x00\x57\x25\x1e\xeb\xb9\xa3\x33\x78\xf5\x0c\xca\x35\xeb\x30\x80\xf7\x34\x79\xb2\x29\x40\xb9\xf1\xb0\x2d\x51\x37\x55\x82\x29\xe1\x9a\x10\xac\x13\x4c\x15\xc0\x35\x25\xdf\xcd\x9a\x77\xba\xbd\x3f\x71\xa9\x48\xcd\xdc\x78\x38\x49\xbf\x00\xb6\x1a\x3c\xc8\x23\x32\xd8\xf8\xf7\x27\x3c\xf2\x51\x79\x1a\x10\x0f\x87\x6f\x0a\x5e\xfb\x27\x35\x7b\xe1\x8a\xe6\x86\x05\xc5\x81\x3b\x37\x19\xdb\x66\xc5\xf9\x73\x51\x4c\x45\x5e\xce\xd1\x5b\xd9\x75\x81\x29\x16\x1d\x7a\x52\xb4\x57\x03\x25\xf5\x0a\x95\xd9\xc5\x5b\x68\xa0\xa4\xb1\x2d\x6f\xef\x83\x96\xc2\x84\x94\x3a\xe9\xfb\xf1\xf0\x4d\x60\xbd\x9b\xeb\x60\xcd\x8b\x6c\xd1\x6e\x81\xe4\x30\x5f\x67\xb4\xd0\x23\xd2\xaf\xd8\xad\x28\x7e\x89\xdc\xef\xd2\x3a\x4e\x4d\xe6\xef\x05\xe6\x2e\xec\xb5\xd8\x4a\x1b\xdc\x6d\xcb\x01\x40\xef\xfd\xb0\xcf\x07\xb4\xec\x83\xf9\x29\xbc\x4c\x4f\x9b\x30\x58\xdb\xcf\x4b\x05\xad\x35\xf6\x5f\x1c\x9c\xab\x85\xf5\xe1\x77\x6c\x48\x98\xa5\x75\x12\xd0\x94\xa5\xb9\x02\x28\x68\xe5\xad\x0a\x4d\xae\x2c\xd5\xb9\x05\x12\xcc\x59\xa9\x2e\xa1\x3d\x5a\xb5\x8d\x98\xb1\xd1\xaa\x20\x3a\x87\xa8\xa1\x65\x3f\x27\x37\x34\xbb\x0b\x79\xe4\x34\xd2\xac\x40\x03\xff\x3b\x03\x3e\xfa\x9e\x79\xf3\x8c\x3a\x87\x7f\x9a\x7c\x0a\xff\x1f\x42\x97\x81\x58\x36\x8c\x08\x23\xbe\xc4\xcd\x84\x8c\x52\xb8\x01\xd2\x90\x79\x3f\xb5\x28\x4c\x8b\x6d\x32\x83\x26\x7f\x3f\xee\x3f\x7d\x34\xa7\xc1\x68\xd4\xbe\x6c\x52\x26\xa2\x52\x59\x6d\x82\x17\xfd\x6c\xcf\xdc\xa0\xa4\xa7\x64\x97\xf6\xda\xd1\x58\x1a\x14\x25\x34\x70\xbb\x03\x09\x3f\x0a\xce\x14\xea\xce\xf7\x3b\x90\x37\x37\xf3\x84\x45\x67\x21\x3d\xfe\x9b\xfc\x3d\xf5\x7a\xea\xa5\x42\xa0\x82\x89\x9e\xdb\x3b\x4f\x6f\xeb\x38\xba\x04\xc8\x32\x96\xd1\x24\x10\xd0\xc5\x95\x4b\x7f\xc8\x83\x93\xa6\x24\xb0\x41\x30\xa9\x5b\xfc\xf3\x97\x23\x4d\x70\x04\x17\xb7\x8b\x83\x44\x81\xaf\x7c\x04\xbd\x9c\xe2\x06\x44\x7e\x5b\xf9\x0d\x3f\xd9\x8c\x90\x5d\x75\x5e\x81\x7f\xa9\x3f\x31\x94\xb7\xaf\x39\x64\xbe\x60\x06\x6e\xe3\x5e\xf8\xa7\xc1\xe6\xd2\x2d\x1e\xa7\x1d\x04\x4f\x17\xec\x9c\x7e\xfc\x1f\x80\xa5\xc6\x06\x64\xf6\x5c\x77\x78\x1f\x48\xb4\x82\xe8\xed\x8d\x66\x71\x50\x5c\x20\x7d\x27\x4a\x88\x83\xca\x61\xb1\xf7\xbd\x35\x13\xe0\xba\xfe\x73\xf5\x77\x00\x00\x00\xff\xff\xc4\x38\xea\x1f\xb6\x08\x00\x00")

func appJsBytes() ([]byte, error) {
	return bindataRead(
		_appJs,
		"app.js",
	)
}

func appJs() (*asset, error) {
	bytes, err := appJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.js", size: 2230, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x6f\x4c\x13\x77\x18\xc7\x9f\x0a\x91\xe0\x96\x05\xbb\x50\xdd\x6c\x7b\xd5\xcd\x0e\x31\xc6\x6c\xaf\x96\x98\x66\x64\x26\x7b\x41\x5c\xa2\xdb\xde\xec\xcf\x2b\x93\x89\xfb\xe3\x5e\x00\xc3\xb0\x12\x69\xcb\x7a\x57\x38\xa9\xb8\x0e\xd8\x14\xab\x58\x41\xa5\x7f\x7e\xd7\xde\xdd\xef\xd7\x02\xfd\xb5\x20\x50\x81\x89\x62\x34\x8d\x59\x96\x90\x21\x8b\x22\x99\xc6\x19\x4a\x29\xba\xe5\xda\x1a\xcc\x96\x2d\x7b\x92\x6f\x2e\xcf\xdd\xf7\xf3\xe4\xfe\x7c\x9f\x03\x50\x81\x0a\x4a\x4a\x94\xa3\x01\x0e\x16\x02\x68\x00\xa0\x0c\x00\x4a\x00\xc0\x00\xb9\xf3\xd9\x2a\x04\x50\x3f\x97\xd3\xdf\x8b\xca\x01\x88\xca\x7e\x55\x8c\xa0\x62\x4a\x50\x29\x25\x48\x7b\x0d\x7b\xb6\xff\x84\x7b\x5f\x1b\x24\xc1\x4d\x31\x82\x4a\x95\x6b\x8a\x87\xe2\xc0\x2a\x27\xfa\x41\xe9\x29\x0e\x14\x44\x89\xa0\xee\x27\x21\x6d\x8c\xa0\xcd\x33\xf8\x87\x8a\x87\xf2\x51\xdb\x03\xb9\xb5\x3a\x89\x4f\xbf\x11\x25\x41\x66\x80\x84\xb4\x94\x20\xb5\xe2\xa5\x04\x01\x45\x17\x81\x62\x04\xf9\x5e\x93\xc0\x17\xb7\xfe\x2a\x77\x98\x16\xe4\xb6\x4f\x52\xb8\xa5\xf7\x61\x88\x3d\xf9\x48\x72\x74\x2f\x62\xfe\xc4\x6f\xb2\xab\x72\x46\xee\xdc\x75\x89\xf8\xb6\x28\xde\x2c\x83\x11\x0c\x4a\xd9\x7b\x56\x47\x88\xa4\x5f\x90\x8e\xbd\xbf\x28\x72\xf6\xfb\xb8\xed\xd3\xd9\xee\x9a\xe0\xd9\x0f\xcb\x87\x03\x55\x6f\xd2\x05\xef\x91\x0b\xf3\xd8\xb5\x2f\x25\xb2\xce\x39\xc9\xb5\xbb\x9f\x88\x7a\x85\xc9\xb3\xc5\x31\x82\xf4\x51\x22\x30\x7f\x48\xcd\xd5\x8b\x12\x67\xbb\x13\xe9\x7c\xfb\xc6\xf7\x9f\xd7\x4d\x58\xdf\x0b\x4c\x36\x7d\xe0\xfd\xd9\x5d\x57\x35\xdf\xdf\xb9\x3b\x25\xb1\xfc\x03\x89\xdf\x1f\xc9\xf1\x7a\x9a\x63\x4b\x29\x11\x0c\x93\xe4\xbc\x31\x25\x71\xf6\x25\x64\x9d\x9c\xed\x6a\x88\xdc\xbb\x60\xab\x5f\x21\x2d\xc7\x33\x84\x3f\x3a\xdf\x63\x69\x9c\x73\x37\x0c\xa7\x05\xeb\xd8\x23\xa9\xb9\xf6\x52\xd8\xbf\x25\x46\x90\x21\xff\x4e\x75\x34\x1c\x64\xae\xf8\x4f\xec\xc8\xc8\xf6\xe3\x9e\xaa\x9a\xa4\xa5\xf2\xcb\x9b\x77\xdd\xf5\xde\x45\xb9\xf9\x9b\x94\xdc\x6c\xb9\xfd\xe3\x61\xbf\xf9\x9d\x43\x49\xdf\x57\x35\x37\x96\x31\x67\x1b\xf1\x9f\x31\xc6\xc2\x82\xc2\xeb\x94\x39\xc3\x43\x11\xbd\xd3\xf8\xea\xa1\x2b\x75\x1f\xb5\xdf\x6c\x33\x87\xee\x9d\xb3\xfa\x57\x24\xd6\xb3\x24\x72\xfc\x92\xc8\x1d\x5b\x91\xd8\x73\x77\xba\x2d\x81\xe4\x77\x66\x61\xe4\xb3\xbd\xed\xce\xf2\xb2\xfd\xa3\x97\x63\xca\x33\x18\xe2\x03\x22\x23\xf0\xf6\x6d\xb6\xa2\xa2\x11\xe7\xc6\x17\xaf\xde\xef\x31\x9f\x7a\x2c\xb3\xbe\xb4\xc8\x76\x2c\x8b\xac\x7b\x59\x64\x4f\xa5\x45\xf6\xe4\x63\xcc\xf9\xee\x76\xd5\xba\xf9\xf5\x2f\xdc\x6a\x5a\xb7\x4e\x0a\x7b\xba\x5e\x89\x47\x82\x4c\xe2\x5a\xe2\xa5\x8e\xb7\x4c\x7b\xac\x6b\xd6\xfc\xde\x08\x90\x39\x6f\xda\x29\xa5\x43\x76\x77\x5a\xe4\x5c\x19\xd1\xee\xcb\x88\xf6\xbe\xb4\xc4\xb9\x52\xa8\xe9\xcc\xe9\xd7\x8d\xd1\x46\x80\x27\xd6\x82\x82\xb9\xae\x7d\xef\x56\x8c\x8e\xc7\x5f\x9e\x48\x4e\xa9\x1d\x1b\x37\x38\x2c\x00\x7f\x5a\x00\x56\x9a\xd6\xae\xfd\x65\xfc\xeb\x8f\x8f\xa4\x71\x0b\xab\xcc\xc8\x8a\xf0\xdf\xc6\x0f\xec\x65\x6d\x85\x85\xb7\x15\x8f\x05\xe0\x09\xcf\xe8\x0f\x4f\xcd\xde\x5a\xef\xb7\x37\x3e\xdf\xa2\xdd\x54\xeb\xd8\xa0\x71\x38\xcb\x8c\x07\x3a\x2a\x4c\x95\xc8\x66\xde\x31\x1d\xe9\xdd\x36\x8d\x3d\xe5\xd3\xf8\xec\xf6\xeb\x91\x9e\x72\x5f\x7d\xf5\xce\x76\xd3\xae\x3d\xad\xc6\xad\x07\x1d\x9a\x52\x9e\xdf\xcc\x7c\x11\x0d\xf5\x15\x7b\x6d\x0d\xaa\xf8\x80\xa8\x4e\x5c\x1d\xd3\x5d\xbe\x3e\xae\x1d\x1d\x1f\xd2\xc5\x07\x25\x86\x12\x81\x89\x3e\xa3\xa1\xa8\xcc\x8c\x4d\x0c\x65\x3d\x89\xa9\x51\x5d\x2c\x2c\xa8\x51\x2b\xa7\x7a\x9a\xfd\x18\x41\x9a\xfc\x37\xfd\x3f\xd2\x50\x82\xb2\xf9\xa5\x21\x2f\x3c\x33\x43\xad\xe4\xea\x3f\xb8\x6c\x6e\x73\xd9\x0f\x00\x15\xfa\x56\xf7\x10\xe7\xf6\x97\xe2\x5c\x26\x9f\x66\x23\x2f\x5d\x36\xa7\x38\xb7\xbf\x51\x79\x75\x7f\x67\x8a\x00\xe2\x05\x00\x16\xd5\x3f\xff\x09\xff\x56\x8a\x57\x61\x14\xf6\xaf\x00\x00\x00\xff\xff\xe5\x5d\x7c\x9a\x7e\x04\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 1150, mode: os.FileMode(420), modTime: time.Unix(726710400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.js":      appJs,
	"favicon.ico": faviconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app.js":      &bintree{appJs, map[string]*bintree{}},
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
