/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var api_v1_meta_pb = require('../../api/v1/meta_pb.js');
goog.exportSymbol('proto.powerssl.api.v1.Certificate', null, global);
goog.exportSymbol('proto.powerssl.api.v1.CertificateSpec', null, global);
goog.exportSymbol('proto.powerssl.api.v1.CertificateStatus', null, global);
goog.exportSymbol('proto.powerssl.api.v1.CreateCertificateRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.DeleteCertificateRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.DigestAlgorithm', null, global);
goog.exportSymbol('proto.powerssl.api.v1.GetCertificateRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.KeyAlgorithm', null, global);
goog.exportSymbol('proto.powerssl.api.v1.ListCertificatesRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.ListCertificatesResponse', null, global);
goog.exportSymbol('proto.powerssl.api.v1.UpdateCertificateRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.CreateCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.CreateCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.CreateCertificateRequest.displayName = 'proto.powerssl.api.v1.CreateCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.CreateCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.CreateCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.CreateCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CreateCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificate: (f = msg.getCertificate()) && proto.powerssl.api.v1.Certificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.CreateCertificateRequest}
 */
proto.powerssl.api.v1.CreateCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.CreateCertificateRequest;
  return proto.powerssl.api.v1.CreateCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.CreateCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.CreateCertificateRequest}
 */
proto.powerssl.api.v1.CreateCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.api.v1.Certificate;
      reader.readMessage(value,proto.powerssl.api.v1.Certificate.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.CreateCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.CreateCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.CreateCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CreateCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.api.v1.Certificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Certificate certificate = 1;
 * @return {?proto.powerssl.api.v1.Certificate}
 */
proto.powerssl.api.v1.CreateCertificateRequest.prototype.getCertificate = function() {
  return /** @type{?proto.powerssl.api.v1.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.api.v1.Certificate, 1));
};


/** @param {?proto.powerssl.api.v1.Certificate|undefined} value */
proto.powerssl.api.v1.CreateCertificateRequest.prototype.setCertificate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.CreateCertificateRequest.prototype.clearCertificate = function() {
  this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.CreateCertificateRequest.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.DeleteCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.DeleteCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.DeleteCertificateRequest.displayName = 'proto.powerssl.api.v1.DeleteCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.DeleteCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.DeleteCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.DeleteCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.DeleteCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.DeleteCertificateRequest}
 */
proto.powerssl.api.v1.DeleteCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.DeleteCertificateRequest;
  return proto.powerssl.api.v1.DeleteCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.DeleteCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.DeleteCertificateRequest}
 */
proto.powerssl.api.v1.DeleteCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.DeleteCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.DeleteCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.DeleteCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.DeleteCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.api.v1.DeleteCertificateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.api.v1.DeleteCertificateRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.GetCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.GetCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.GetCertificateRequest.displayName = 'proto.powerssl.api.v1.GetCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.GetCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.GetCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.GetCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.GetCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.GetCertificateRequest}
 */
proto.powerssl.api.v1.GetCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.GetCertificateRequest;
  return proto.powerssl.api.v1.GetCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.GetCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.GetCertificateRequest}
 */
proto.powerssl.api.v1.GetCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.GetCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.GetCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.GetCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.GetCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.api.v1.GetCertificateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.api.v1.GetCertificateRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.ListCertificatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.ListCertificatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.ListCertificatesRequest.displayName = 'proto.powerssl.api.v1.ListCertificatesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.ListCertificatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.ListCertificatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.ListCertificatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.ListCertificatesRequest}
 */
proto.powerssl.api.v1.ListCertificatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.ListCertificatesRequest;
  return proto.powerssl.api.v1.ListCertificatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.ListCertificatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.ListCertificatesRequest}
 */
proto.powerssl.api.v1.ListCertificatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.ListCertificatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.ListCertificatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.ListCertificatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.ListCertificatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.api.v1.ListCertificatesResponse.repeatedFields_, null);
};
goog.inherits(proto.powerssl.api.v1.ListCertificatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.ListCertificatesResponse.displayName = 'proto.powerssl.api.v1.ListCertificatesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.api.v1.ListCertificatesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.ListCertificatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.ListCertificatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeMeta: (f = msg.getTypeMeta()) && api_v1_meta_pb.TypeMeta.toObject(includeInstance, f),
    listMeta: (f = msg.getListMeta()) && api_v1_meta_pb.ListMeta.toObject(includeInstance, f),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.powerssl.api.v1.Certificate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.ListCertificatesResponse}
 */
proto.powerssl.api.v1.ListCertificatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.ListCertificatesResponse;
  return proto.powerssl.api.v1.ListCertificatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.ListCertificatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.ListCertificatesResponse}
 */
proto.powerssl.api.v1.ListCertificatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_v1_meta_pb.TypeMeta;
      reader.readMessage(value,api_v1_meta_pb.TypeMeta.deserializeBinaryFromReader);
      msg.setTypeMeta(value);
      break;
    case 2:
      var value = new api_v1_meta_pb.ListMeta;
      reader.readMessage(value,api_v1_meta_pb.ListMeta.deserializeBinaryFromReader);
      msg.setListMeta(value);
      break;
    case 3:
      var value = new proto.powerssl.api.v1.Certificate;
      reader.readMessage(value,proto.powerssl.api.v1.Certificate.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.ListCertificatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.ListCertificatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_v1_meta_pb.TypeMeta.serializeBinaryToWriter
    );
  }
  f = message.getListMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      api_v1_meta_pb.ListMeta.serializeBinaryToWriter
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.powerssl.api.v1.Certificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional TypeMeta type_meta = 1;
 * @return {?proto.powerssl.api.v1.TypeMeta}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.getTypeMeta = function() {
  return /** @type{?proto.powerssl.api.v1.TypeMeta} */ (
    jspb.Message.getWrapperField(this, api_v1_meta_pb.TypeMeta, 1));
};


/** @param {?proto.powerssl.api.v1.TypeMeta|undefined} value */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.setTypeMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.ListCertificatesResponse.prototype.clearTypeMeta = function() {
  this.setTypeMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.hasTypeMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListMeta list_meta = 2;
 * @return {?proto.powerssl.api.v1.ListMeta}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.getListMeta = function() {
  return /** @type{?proto.powerssl.api.v1.ListMeta} */ (
    jspb.Message.getWrapperField(this, api_v1_meta_pb.ListMeta, 2));
};


/** @param {?proto.powerssl.api.v1.ListMeta|undefined} value */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.setListMeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.powerssl.api.v1.ListCertificatesResponse.prototype.clearListMeta = function() {
  this.setListMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.hasListMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Certificate items = 3;
 * @return {!Array<!proto.powerssl.api.v1.Certificate>}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.powerssl.api.v1.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.api.v1.Certificate, 3));
};


/** @param {!Array<!proto.powerssl.api.v1.Certificate>} value */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.powerssl.api.v1.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.api.v1.Certificate}
 */
proto.powerssl.api.v1.ListCertificatesResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.powerssl.api.v1.Certificate, opt_index);
};


proto.powerssl.api.v1.ListCertificatesResponse.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.UpdateCertificateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.UpdateCertificateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.UpdateCertificateRequest.displayName = 'proto.powerssl.api.v1.UpdateCertificateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.UpdateCertificateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.UpdateCertificateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.UpdateCertificateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.UpdateCertificateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificate: (f = msg.getCertificate()) && proto.powerssl.api.v1.Certificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.UpdateCertificateRequest}
 */
proto.powerssl.api.v1.UpdateCertificateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.UpdateCertificateRequest;
  return proto.powerssl.api.v1.UpdateCertificateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.UpdateCertificateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.UpdateCertificateRequest}
 */
proto.powerssl.api.v1.UpdateCertificateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.api.v1.Certificate;
      reader.readMessage(value,proto.powerssl.api.v1.Certificate.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.UpdateCertificateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.UpdateCertificateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.UpdateCertificateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.UpdateCertificateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.api.v1.Certificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Certificate certificate = 1;
 * @return {?proto.powerssl.api.v1.Certificate}
 */
proto.powerssl.api.v1.UpdateCertificateRequest.prototype.getCertificate = function() {
  return /** @type{?proto.powerssl.api.v1.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.api.v1.Certificate, 1));
};


/** @param {?proto.powerssl.api.v1.Certificate|undefined} value */
proto.powerssl.api.v1.UpdateCertificateRequest.prototype.setCertificate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.UpdateCertificateRequest.prototype.clearCertificate = function() {
  this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.UpdateCertificateRequest.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.Certificate.displayName = 'proto.powerssl.api.v1.Certificate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.Certificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeMeta: (f = msg.getTypeMeta()) && api_v1_meta_pb.TypeMeta.toObject(includeInstance, f),
    objectMeta: (f = msg.getObjectMeta()) && api_v1_meta_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && proto.powerssl.api.v1.CertificateSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.powerssl.api.v1.CertificateStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.Certificate}
 */
proto.powerssl.api.v1.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.Certificate;
  return proto.powerssl.api.v1.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.Certificate}
 */
proto.powerssl.api.v1.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_v1_meta_pb.TypeMeta;
      reader.readMessage(value,api_v1_meta_pb.TypeMeta.deserializeBinaryFromReader);
      msg.setTypeMeta(value);
      break;
    case 2:
      var value = new api_v1_meta_pb.ObjectMeta;
      reader.readMessage(value,api_v1_meta_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setObjectMeta(value);
      break;
    case 3:
      var value = new proto.powerssl.api.v1.CertificateSpec;
      reader.readMessage(value,proto.powerssl.api.v1.CertificateSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 4:
      var value = new proto.powerssl.api.v1.CertificateStatus;
      reader.readMessage(value,proto.powerssl.api.v1.CertificateStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_v1_meta_pb.TypeMeta.serializeBinaryToWriter
    );
  }
  f = message.getObjectMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      api_v1_meta_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.powerssl.api.v1.CertificateSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.powerssl.api.v1.CertificateStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional TypeMeta type_meta = 1;
 * @return {?proto.powerssl.api.v1.TypeMeta}
 */
proto.powerssl.api.v1.Certificate.prototype.getTypeMeta = function() {
  return /** @type{?proto.powerssl.api.v1.TypeMeta} */ (
    jspb.Message.getWrapperField(this, api_v1_meta_pb.TypeMeta, 1));
};


/** @param {?proto.powerssl.api.v1.TypeMeta|undefined} value */
proto.powerssl.api.v1.Certificate.prototype.setTypeMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.Certificate.prototype.clearTypeMeta = function() {
  this.setTypeMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.Certificate.prototype.hasTypeMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ObjectMeta object_meta = 2;
 * @return {?proto.powerssl.api.v1.ObjectMeta}
 */
proto.powerssl.api.v1.Certificate.prototype.getObjectMeta = function() {
  return /** @type{?proto.powerssl.api.v1.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, api_v1_meta_pb.ObjectMeta, 2));
};


/** @param {?proto.powerssl.api.v1.ObjectMeta|undefined} value */
proto.powerssl.api.v1.Certificate.prototype.setObjectMeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.powerssl.api.v1.Certificate.prototype.clearObjectMeta = function() {
  this.setObjectMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.Certificate.prototype.hasObjectMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CertificateSpec spec = 3;
 * @return {?proto.powerssl.api.v1.CertificateSpec}
 */
proto.powerssl.api.v1.Certificate.prototype.getSpec = function() {
  return /** @type{?proto.powerssl.api.v1.CertificateSpec} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.api.v1.CertificateSpec, 3));
};


/** @param {?proto.powerssl.api.v1.CertificateSpec|undefined} value */
proto.powerssl.api.v1.Certificate.prototype.setSpec = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.powerssl.api.v1.Certificate.prototype.clearSpec = function() {
  this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.Certificate.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CertificateStatus status = 4;
 * @return {?proto.powerssl.api.v1.CertificateStatus}
 */
proto.powerssl.api.v1.Certificate.prototype.getStatus = function() {
  return /** @type{?proto.powerssl.api.v1.CertificateStatus} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.api.v1.CertificateStatus, 4));
};


/** @param {?proto.powerssl.api.v1.CertificateStatus|undefined} value */
proto.powerssl.api.v1.Certificate.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.powerssl.api.v1.Certificate.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.Certificate.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.CertificateSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.api.v1.CertificateSpec.repeatedFields_, null);
};
goog.inherits(proto.powerssl.api.v1.CertificateSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.CertificateSpec.displayName = 'proto.powerssl.api.v1.CertificateSpec';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.api.v1.CertificateSpec.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.CertificateSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.CertificateSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CertificateSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    dnsnamesList: jspb.Message.getRepeatedField(msg, 1),
    keyAlgorithm: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keySize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    digestAlgorithm: jspb.Message.getFieldWithDefault(msg, 4, 0),
    autoRenew: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.CertificateSpec}
 */
proto.powerssl.api.v1.CertificateSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.CertificateSpec;
  return proto.powerssl.api.v1.CertificateSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.CertificateSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.CertificateSpec}
 */
proto.powerssl.api.v1.CertificateSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDnsnames(value);
      break;
    case 2:
      var value = /** @type {!proto.powerssl.api.v1.KeyAlgorithm} */ (reader.readEnum());
      msg.setKeyAlgorithm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeySize(value);
      break;
    case 4:
      var value = /** @type {!proto.powerssl.api.v1.DigestAlgorithm} */ (reader.readEnum());
      msg.setDigestAlgorithm(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoRenew(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.CertificateSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.CertificateSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CertificateSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDnsnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getKeyAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKeySize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDigestAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAutoRenew();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated string dnsnames = 1;
 * @return {!Array<string>}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.getDnsnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.powerssl.api.v1.CertificateSpec.prototype.setDnsnamesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.powerssl.api.v1.CertificateSpec.prototype.addDnsnames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.powerssl.api.v1.CertificateSpec.prototype.clearDnsnamesList = function() {
  this.setDnsnamesList([]);
};


/**
 * optional KeyAlgorithm key_algorithm = 2;
 * @return {!proto.powerssl.api.v1.KeyAlgorithm}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.getKeyAlgorithm = function() {
  return /** @type {!proto.powerssl.api.v1.KeyAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.powerssl.api.v1.KeyAlgorithm} value */
proto.powerssl.api.v1.CertificateSpec.prototype.setKeyAlgorithm = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 key_size = 3;
 * @return {number}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.getKeySize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.powerssl.api.v1.CertificateSpec.prototype.setKeySize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DigestAlgorithm digest_algorithm = 4;
 * @return {!proto.powerssl.api.v1.DigestAlgorithm}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.getDigestAlgorithm = function() {
  return /** @type {!proto.powerssl.api.v1.DigestAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.powerssl.api.v1.DigestAlgorithm} value */
proto.powerssl.api.v1.CertificateSpec.prototype.setDigestAlgorithm = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool auto_renew = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.powerssl.api.v1.CertificateSpec.prototype.getAutoRenew = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.powerssl.api.v1.CertificateSpec.prototype.setAutoRenew = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.CertificateStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.CertificateStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.CertificateStatus.displayName = 'proto.powerssl.api.v1.CertificateStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.CertificateStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.CertificateStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.CertificateStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CertificateStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.CertificateStatus}
 */
proto.powerssl.api.v1.CertificateStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.CertificateStatus;
  return proto.powerssl.api.v1.CertificateStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.CertificateStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.CertificateStatus}
 */
proto.powerssl.api.v1.CertificateStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.CertificateStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.CertificateStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.CertificateStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CertificateStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string phase = 1;
 * @return {string}
 */
proto.powerssl.api.v1.CertificateStatus.prototype.getPhase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.api.v1.CertificateStatus.prototype.setPhase = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.powerssl.api.v1.KeyAlgorithm = {
  KEYALGORITHMUNKNOWN: 0,
  RSA: 1
};

/**
 * @enum {number}
 */
proto.powerssl.api.v1.DigestAlgorithm = {
  DIGESTALGORITHMUNKNOWN: 0,
  SHA1: 1,
  SHA256: 2
};

goog.object.extend(exports, proto.powerssl.api.v1);
