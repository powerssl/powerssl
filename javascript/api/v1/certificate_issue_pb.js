/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var api_v1_meta_pb = require('../../api/v1/meta_pb.js');
goog.exportSymbol('proto.powerssl.api.v1.CertificateIssue', null, global);
goog.exportSymbol('proto.powerssl.api.v1.CreateCertificateIssueRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.DeleteCertificateIssueRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.GetCertificateIssueRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.ListCertificateIssuesRequest', null, global);
goog.exportSymbol('proto.powerssl.api.v1.ListCertificateIssuesResponse', null, global);
goog.exportSymbol('proto.powerssl.api.v1.UpdateCertificateIssueRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.CreateCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.CreateCertificateIssueRequest.displayName = 'proto.powerssl.api.v1.CreateCertificateIssueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.CreateCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.CreateCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateIssue: (f = msg.getCertificateIssue()) && proto.powerssl.api.v1.CertificateIssue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.CreateCertificateIssueRequest}
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.CreateCertificateIssueRequest;
  return proto.powerssl.api.v1.CreateCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.CreateCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.CreateCertificateIssueRequest}
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.api.v1.CertificateIssue;
      reader.readMessage(value,proto.powerssl.api.v1.CertificateIssue.deserializeBinaryFromReader);
      msg.setCertificateIssue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.CreateCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.CreateCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateIssue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.api.v1.CertificateIssue.serializeBinaryToWriter
    );
  }
};


/**
 * optional CertificateIssue certificate_issue = 1;
 * @return {?proto.powerssl.api.v1.CertificateIssue}
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.prototype.getCertificateIssue = function() {
  return /** @type{?proto.powerssl.api.v1.CertificateIssue} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.api.v1.CertificateIssue, 1));
};


/** @param {?proto.powerssl.api.v1.CertificateIssue|undefined} value */
proto.powerssl.api.v1.CreateCertificateIssueRequest.prototype.setCertificateIssue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.CreateCertificateIssueRequest.prototype.clearCertificateIssue = function() {
  this.setCertificateIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.CreateCertificateIssueRequest.prototype.hasCertificateIssue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.DeleteCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.DeleteCertificateIssueRequest.displayName = 'proto.powerssl.api.v1.DeleteCertificateIssueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.DeleteCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.DeleteCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.DeleteCertificateIssueRequest}
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.DeleteCertificateIssueRequest;
  return proto.powerssl.api.v1.DeleteCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.DeleteCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.DeleteCertificateIssueRequest}
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.DeleteCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.DeleteCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.api.v1.DeleteCertificateIssueRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.GetCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.GetCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.GetCertificateIssueRequest.displayName = 'proto.powerssl.api.v1.GetCertificateIssueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.GetCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.GetCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.GetCertificateIssueRequest}
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.GetCertificateIssueRequest;
  return proto.powerssl.api.v1.GetCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.GetCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.GetCertificateIssueRequest}
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.GetCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.GetCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powerssl.api.v1.GetCertificateIssueRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.powerssl.api.v1.GetCertificateIssueRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.ListCertificateIssuesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.ListCertificateIssuesRequest.displayName = 'proto.powerssl.api.v1.ListCertificateIssuesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.ListCertificateIssuesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.ListCertificateIssuesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.ListCertificateIssuesRequest}
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.ListCertificateIssuesRequest;
  return proto.powerssl.api.v1.ListCertificateIssuesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.ListCertificateIssuesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.ListCertificateIssuesRequest}
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.ListCertificateIssuesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.ListCertificateIssuesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificateIssuesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powerssl.api.v1.ListCertificateIssuesResponse.repeatedFields_, null);
};
goog.inherits(proto.powerssl.api.v1.ListCertificateIssuesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.ListCertificateIssuesResponse.displayName = 'proto.powerssl.api.v1.ListCertificateIssuesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.ListCertificateIssuesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.ListCertificateIssuesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeMeta: (f = msg.getTypeMeta()) && api_v1_meta_pb.TypeMeta.toObject(includeInstance, f),
    listMeta: (f = msg.getListMeta()) && api_v1_meta_pb.ListMeta.toObject(includeInstance, f),
    certificateIssuesList: jspb.Message.toObjectList(msg.getCertificateIssuesList(),
    proto.powerssl.api.v1.CertificateIssue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.ListCertificateIssuesResponse}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.ListCertificateIssuesResponse;
  return proto.powerssl.api.v1.ListCertificateIssuesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.ListCertificateIssuesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.ListCertificateIssuesResponse}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_v1_meta_pb.TypeMeta;
      reader.readMessage(value,api_v1_meta_pb.TypeMeta.deserializeBinaryFromReader);
      msg.setTypeMeta(value);
      break;
    case 2:
      var value = new api_v1_meta_pb.ListMeta;
      reader.readMessage(value,api_v1_meta_pb.ListMeta.deserializeBinaryFromReader);
      msg.setListMeta(value);
      break;
    case 3:
      var value = new proto.powerssl.api.v1.CertificateIssue;
      reader.readMessage(value,proto.powerssl.api.v1.CertificateIssue.deserializeBinaryFromReader);
      msg.addCertificateIssues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.ListCertificateIssuesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.ListCertificateIssuesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      api_v1_meta_pb.TypeMeta.serializeBinaryToWriter
    );
  }
  f = message.getListMeta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      api_v1_meta_pb.ListMeta.serializeBinaryToWriter
    );
  }
  f = message.getCertificateIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.powerssl.api.v1.CertificateIssue.serializeBinaryToWriter
    );
  }
};


/**
 * optional TypeMeta type_meta = 1;
 * @return {?proto.powerssl.api.v1.TypeMeta}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.getTypeMeta = function() {
  return /** @type{?proto.powerssl.api.v1.TypeMeta} */ (
    jspb.Message.getWrapperField(this, api_v1_meta_pb.TypeMeta, 1));
};


/** @param {?proto.powerssl.api.v1.TypeMeta|undefined} value */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.setTypeMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.clearTypeMeta = function() {
  this.setTypeMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.hasTypeMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListMeta list_meta = 2;
 * @return {?proto.powerssl.api.v1.ListMeta}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.getListMeta = function() {
  return /** @type{?proto.powerssl.api.v1.ListMeta} */ (
    jspb.Message.getWrapperField(this, api_v1_meta_pb.ListMeta, 2));
};


/** @param {?proto.powerssl.api.v1.ListMeta|undefined} value */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.setListMeta = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.clearListMeta = function() {
  this.setListMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.hasListMeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CertificateIssue certificate_issues = 3;
 * @return {!Array<!proto.powerssl.api.v1.CertificateIssue>}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.getCertificateIssuesList = function() {
  return /** @type{!Array<!proto.powerssl.api.v1.CertificateIssue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powerssl.api.v1.CertificateIssue, 3));
};


/** @param {!Array<!proto.powerssl.api.v1.CertificateIssue>} value */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.setCertificateIssuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.powerssl.api.v1.CertificateIssue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powerssl.api.v1.CertificateIssue}
 */
proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.addCertificateIssues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.powerssl.api.v1.CertificateIssue, opt_index);
};


proto.powerssl.api.v1.ListCertificateIssuesResponse.prototype.clearCertificateIssuesList = function() {
  this.setCertificateIssuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.UpdateCertificateIssueRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.UpdateCertificateIssueRequest.displayName = 'proto.powerssl.api.v1.UpdateCertificateIssueRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.UpdateCertificateIssueRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.UpdateCertificateIssueRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateIssue: (f = msg.getCertificateIssue()) && proto.powerssl.api.v1.CertificateIssue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.UpdateCertificateIssueRequest}
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.UpdateCertificateIssueRequest;
  return proto.powerssl.api.v1.UpdateCertificateIssueRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.UpdateCertificateIssueRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.UpdateCertificateIssueRequest}
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powerssl.api.v1.CertificateIssue;
      reader.readMessage(value,proto.powerssl.api.v1.CertificateIssue.deserializeBinaryFromReader);
      msg.setCertificateIssue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.UpdateCertificateIssueRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.UpdateCertificateIssueRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateIssue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powerssl.api.v1.CertificateIssue.serializeBinaryToWriter
    );
  }
};


/**
 * optional CertificateIssue certificate_issue = 1;
 * @return {?proto.powerssl.api.v1.CertificateIssue}
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.prototype.getCertificateIssue = function() {
  return /** @type{?proto.powerssl.api.v1.CertificateIssue} */ (
    jspb.Message.getWrapperField(this, proto.powerssl.api.v1.CertificateIssue, 1));
};


/** @param {?proto.powerssl.api.v1.CertificateIssue|undefined} value */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.prototype.setCertificateIssue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.powerssl.api.v1.UpdateCertificateIssueRequest.prototype.clearCertificateIssue = function() {
  this.setCertificateIssue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.powerssl.api.v1.UpdateCertificateIssueRequest.prototype.hasCertificateIssue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powerssl.api.v1.CertificateIssue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powerssl.api.v1.CertificateIssue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.powerssl.api.v1.CertificateIssue.displayName = 'proto.powerssl.api.v1.CertificateIssue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powerssl.api.v1.CertificateIssue.prototype.toObject = function(opt_includeInstance) {
  return proto.powerssl.api.v1.CertificateIssue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powerssl.api.v1.CertificateIssue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CertificateIssue.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powerssl.api.v1.CertificateIssue}
 */
proto.powerssl.api.v1.CertificateIssue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powerssl.api.v1.CertificateIssue;
  return proto.powerssl.api.v1.CertificateIssue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powerssl.api.v1.CertificateIssue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powerssl.api.v1.CertificateIssue}
 */
proto.powerssl.api.v1.CertificateIssue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powerssl.api.v1.CertificateIssue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powerssl.api.v1.CertificateIssue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powerssl.api.v1.CertificateIssue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powerssl.api.v1.CertificateIssue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.powerssl.api.v1);
