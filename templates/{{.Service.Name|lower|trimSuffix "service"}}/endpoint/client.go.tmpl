// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package endpoint

import (
	"context"

	"powerssl.io/pkg/api"
)

{{range .Service.Method}}

{{if eq (.Name | concat) "Create"}}
func (e Endpoints) {{.Name}}(ctx context.Context, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
{{- else if eq (.Name | concat) "Delete"}}
func (e Endpoints) {{.Name}}(ctx context.Context, name string) error {
{{- else if eq (.Name | concat) "Get"}}
func (e Endpoints) {{.Name}}(ctx context.Context, name string) (*api.{{$resourceName}}, error) {
{{- else if eq (.Name | concat) "List"}}
func (e Endpoints) {{.Name}}(ctx context.Context) ([]*api.{{$resourceName}}, error) {
{{- else if eq (.Name | concat) "Update"}}
func (e Endpoints) {{.Name}}(ctx context.Context, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
{{- else}}
{{- end}}
{{- if eq (.Name | concat) "Create"}}
	resp, err := e.{{.Name}}Endpoint(ctx, {{.Name}}Request{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	})
	if err != nil {
		return nil, err
	}
	response := resp.({{.Name}}Response)
	return response.{{$resourceName}}, nil
{{- else if eq (.Name | concat) "Delete"}}
	_, err := e.{{.Name}}Endpoint(ctx, {{.Name}}Request{
		Name: name,
	})
	if err != nil {
		return err
	}
	return nil
{{- else if eq (.Name | concat) "Get"}}
	resp, err := e.{{.Name}}Endpoint(ctx, {{.Name}}Request{
		Name: name,
	})
	if err != nil {
		return nil, err
	}
	response := resp.({{.Name}}Response)
	return response.{{$resourceName}}, nil
{{- else if eq (.Name | concat) "List"}}
	resp, err := e.{{.Name}}Endpoint(ctx, {{.Name}}Request{
	})
	if err != nil {
		return nil, err
	}
	response := resp.({{.Name}}Response)
	return response.{{$resourceNamePlural}}, nil
{{- else if eq (.Name | concat) "Update"}}
	resp, err := e.{{.Name}}Endpoint(ctx, {{.Name}}Request{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	})
	if err != nil {
		return nil, err
	}
	response := resp.({{.Name}}Response)
	return response.{{$resourceName}}, nil
{{- else}}
{{- end}}
}
{{- end}}
