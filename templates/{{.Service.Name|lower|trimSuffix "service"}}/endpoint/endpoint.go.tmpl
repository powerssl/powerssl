// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package endpoint // import "powerssl.io/pkg/resource/generated/{{$resourceName | lower}}/endpoint"

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"

	"powerssl.io/pkg/api"
	service "powerssl.io/pkg/resource/{{$resourceName | lower}}"
	resource "powerssl.io/pkg/resource"
)

type Endpoints struct {
{{- range .Service.Method}}
	{{.Name}}Endpoint endpoint.Endpoint
{{- end}}
}

func NewEndpoints(svc service.Service, logger log.Logger, duration metrics.Histogram) Endpoints {
{{- range .Service.Method}}
	var {{.Name | lowerCamelCase}}Endpoint endpoint.Endpoint
	{
		{{.Name | lowerCamelCase}}Endpoint = make{{.Name}}Endpoint(svc)
		{{.Name | lowerCamelCase}}Endpoint = resource.LoggingMiddleware(log.With(logger, "method", "{{.Name}}"))({{.Name | lowerCamelCase }}Endpoint)
		{{.Name | lowerCamelCase}}Endpoint = resource.InstrumentingMiddleware(duration.With("method", "{{.Name}}"))({{.Name | lowerCamelCase}}Endpoint)
	}
{{end}}
	return Endpoints{
{{- range .Service.Method}}
		{{.Name}}Endpoint: {{.Name | lowerCamelCase}}Endpoint,
{{- end}}
	}
}

{{range .Service.Method}}

{{if eq (.Name | concat) "Create"}}
func (e Endpoints) Create(ctx context.Context, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	resp, err := e.{{.Name}}Endpoint(ctx, {{.Name}}Request{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	})
	if err != nil {
		return nil, err
	}
	response := resp.(CreateResponse)
	return response.{{$resourceName}}, nil
}
{{- else if eq (.Name | concat) "Delete"}}
func (e Endpoints) Delete(ctx context.Context, name string) error {
	_, err := e.DeleteEndpoint(ctx, DeleteRequest{
		Name: name,
	})
	if err != nil {
		return err
	}
	return nil
}
{{- else if eq (.Name | concat) "Get"}}
func (e Endpoints) Get(ctx context.Context, name string) (*api.{{$resourceName}}, error) {
	resp, err := e.GetEndpoint(ctx, GetRequest{
		Name: name,
	})
	if err != nil {
		return nil, err
	}
	response := resp.(GetResponse)
	return response.{{$resourceName}}, nil
}
{{- else if eq (.Name | concat) "List"}}
func (e Endpoints) List(ctx context.Context, pageSize int, pageToken string) ([]*api.{{$resourceName}}, string, error) {
	resp, err := e.ListEndpoint(ctx, ListRequest{
		PageSize:  pageSize,
		PageToken: pageToken,
	})
	if err != nil {
		return nil, "", err
	}
	response := resp.(ListResponse)
	return response.{{$resourceNamePlural}}, response.NextPageToken, nil
}
{{- else if eq (.Name | concat) "Update"}}
func (e Endpoints) Update(ctx context.Context, name string, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	resp, err := e.UpdateEndpoint(ctx, UpdateRequest{
		Name: name,
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	})
	if err != nil {
		return nil, err
	}
	response := resp.(UpdateResponse)
	return response.{{$resourceName}}, nil
}
{{- end}}
{{- end}}

{{- range .Service.Method}}
{{- if eq (.Name | concat) "Create"}}
type CreateRequest struct {
	{{$resourceName}} *api.{{$resourceName}}
}
{{- else if eq (.Name | concat) "Delete"}}
type DeleteRequest struct {
	Name string
}
{{- else if eq (.Name | concat) "Get"}}
type GetRequest struct {
	Name string
}
{{- else if eq (.Name | concat) "List"}}
type ListRequest struct {
	PageSize  int
	PageToken string
}
{{- else if eq (.Name | concat) "Update"}}
type UpdateRequest struct {
	Name string
	{{$resourceName}} *api.{{$resourceName}}
}
{{- end}}

{{if eq (.Name | concat) "Create"}}
type CreateResponse struct {
	{{$resourceName}} *api.{{$resourceName}}
}
{{- else if eq (.Name | concat) "Delete"}}
type DeleteResponse struct {}
{{- else if eq (.Name | concat) "Get"}}
type GetResponse struct {
	{{$resourceName}} *api.{{$resourceName}}
}
{{- else if eq (.Name | concat) "List"}}
type ListResponse struct {
	{{$resourceNamePlural}} []*api.{{$resourceName}}
	NextPageToken string
}
{{- else if eq (.Name | concat) "Update"}}
type UpdateResponse struct {
	{{$resourceName}} *api.{{$resourceName}}
}
{{- end}}

{{- if eq (.Name | concat) "Create"}}
func makeCreateEndpoint(s service.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateRequest)
		{{$resourceName | lowerCamelCase}}, err := s.Create(ctx, req.{{$resourceName}})
		if err != nil {
			return nil, err
		}
		return CreateResponse{
			{{$resourceName}}: {{$resourceName | lowerCamelCase}},
		}, nil
	}
}
{{- else if eq (.Name | concat) "Delete"}}
func makeDeleteEndpoint(s service.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteRequest)
		if err := s.Delete(ctx, req.Name); err != nil {
			return nil, err
		}
		return DeleteResponse{}, nil
	}
}
{{- else if eq (.Name | concat) "Get"}}
func makeGetEndpoint(s service.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetRequest)
		{{$resourceName | lowerCamelCase}}, err := s.Get(ctx, req.Name)
		if err != nil {
			return nil, err
		}
		return GetResponse{
			{{$resourceName}}: {{$resourceName | lowerCamelCase}},
		}, nil
	}
}
{{- else if eq (.Name | concat) "List"}}
func makeListEndpoint(s service.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ListRequest)
		{{$resourceNamePlural | lowerCamelCase}}, nextPageToken, err := s.List(ctx, req.PageSize, req.PageToken)
		if err != nil {
			return nil, err
		}
		return ListResponse{
			{{$resourceNamePlural}}: {{$resourceNamePlural | lowerCamelCase}},
			NextPageToken: nextPageToken,
		}, nil
	}
}
{{- else if eq (.Name | concat) "Update"}}
func makeUpdateEndpoint(s service.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(UpdateRequest)
		{{$resourceName | lowerCamelCase}}, err := s.Update(ctx, req.Name, req.{{$resourceName}})
		if err != nil {
			return nil, err
		}
		return UpdateResponse{
			{{$resourceName}}: {{$resourceName | lowerCamelCase}},
		}, nil
	}
}
{{- end}}
{{- end}}
