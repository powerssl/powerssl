// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package endpoint

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"

	"powerssl.io/pkg/api"
	"powerssl.io/pkg/gen/{{$resourceName | lower}}/service"
	"powerssl.io/pkg/resources/endpoints"
)

type Endpoints struct {
{{- range .Service.Method}}
	{{.Name}}Endpoint endpoint.Endpoint
{{- end}}
}

func New(svc service.Service, logger log.Logger, duration metrics.Histogram) Endpoints {
{{- range .Service.Method}}
	var {{.Name | lower}}Endpoint endpoint.Endpoint
	{
		{{.Name | lower}}Endpoint = make{{.Name}}Endpoint(svc)
		{{.Name | lower}}Endpoint = endpoints.LoggingMiddleware(log.With(logger, "method", "{{.Name}}"))({{.Name | lower }}Endpoint)
		{{.Name | lower}}Endpoint = endpoints.InstrumentingMiddleware(duration.With("method", "{{.Name}}"))({{.Name | lower}}Endpoint)
	}
{{end}}
	return Endpoints{
{{- range .Service.Method}}
		{{.Name}}Endpoint: {{.Name | lower}}Endpoint,
{{- end}}
	}
}

{{- range .Service.Method}}
type {{.Name}}Request struct {
{{- if eq (.Name | concat) "Create"}}
	{{$resourceName}} *api.{{$resourceName}}
{{- else if eq (.Name | concat) "Delete"}}
	Name string
{{- else if eq (.Name | concat) "Get"}}
	Name string
{{- else if eq (.Name | concat) "List"}}
{{- else if eq (.Name | concat) "Update"}}
	{{$resourceName}} *api.{{$resourceName}}
{{- else}}
	// TODO
{{- end}}
}

type {{.Name}}Response struct {
{{- if eq (.Name | concat) "Create"}}
	{{$resourceName}} *api.{{$resourceName}}
{{- else if eq (.Name | concat) "Delete"}}
{{- else if eq (.Name | concat) "Get"}}
	{{$resourceName}} *api.{{$resourceName}}
{{- else if eq (.Name | concat) "List"}}
	{{$resourceNamePlural}} []*api.{{$resourceName}}
{{- else if eq (.Name | concat) "Update"}}
	{{$resourceName}} *api.{{$resourceName}}
{{- else}}
	// TODO
{{- end}}
}

func make{{.Name}}Endpoint(s service.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
		req := request.({{.Name}}Request)
		{{$resourceName | lowerCamelCase}}, err := s.{{.Name}}(ctx, req.{{$resourceName}})
		if err != nil {
			return nil, err
		}
{{- else if eq (.Name | concat) "Delete"}}
		req := request.({{.Name}}Request)
		if err := s.{{.Name}}(ctx, req.Name); err != nil {
			return nil, err
		}
{{- else if eq (.Name | concat) "Get"}}
		req := request.({{.Name}}Request)
		{{$resourceName | lowerCamelCase}}, err := s.{{.Name}}(ctx, req.Name)
		if err != nil {
			return nil, err
		}
{{- else if eq (.Name | concat) "List"}}
		{{$resourceNamePlural | lowerCamelCase}}, err := s.List(ctx)
		if err != nil {
			return nil, err
		}
{{- else if eq (.Name | concat) "Update"}}
		req := request.({{.Name}}Request)
		{{$resourceName | lowerCamelCase}}, err := s.{{.Name}}(ctx, req.{{$resourceName}})
		if err != nil {
			return nil, err
		}
{{- else}}
		// TODO
{{- end}}
		return {{.Name}}Response{
{{- if eq (.Name | concat) "Create"}}
			{{$resourceName}}: {{$resourceName | lowerCamelCase}},
{{- else if eq (.Name | concat) "Delete"}}
{{- else if eq (.Name | concat) "Get"}}
			{{$resourceName}}: {{$resourceName | lowerCamelCase}},
{{- else if eq (.Name | concat) "List"}}
			{{$resourceNamePlural}}: {{$resourceNamePlural | lowerCamelCase}},
{{- else if eq (.Name | concat) "Update"}}
			{{$resourceName}}: {{$resourceName | lowerCamelCase}},
{{- else}}
			// TODO
{{- end}}
		}, nil
	}
}
{{- end}}
