// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package transport // import "powerssl.io/pkg/resource/generated/{{$resourceName | lower}}/transport"

import (
	"context"

	"powerssl.io/pkg/api"
	apiv1 "powerssl.io/pkg/api/v1"
	resource "powerssl.io/pkg/resource"
	"powerssl.io/pkg/resource/generated/{{$resourceName | lower}}/endpoint"
)

func decodeGRPC{{$resourceNamePlural}}({{$resourceNamePlural | lowerCamelCase}} []*apiv1.{{$resourceName}}) ([]*api.{{$resourceName}}, error) {
	items := make([]*api.{{$resourceName}}, len({{$resourceNamePlural | lowerCamelCase}}))
	for i, {{$resourceName | lowerCamelCase}} := range {{$resourceNamePlural | lowerCamelCase}} {
		item, err := decodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}})
		if err != nil {
			return nil, err
		}
		items[i] = item
	}
	return items, nil
}

func decodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}} *apiv1.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	typeMeta, err := resource.DecodeGRPCTypeMeta({{$resourceName | lowerCamelCase}}.GetTypeMeta())
	if err != nil {
		return nil, err
	}
	objectMeta, err := resource.DecodeGRPCObjectMeta({{$resourceName | lowerCamelCase}}.GetObjectMeta())
	if err != nil {
		return nil, err
	}
	return &api.{{$resourceName}}{
		TypeMeta:   typeMeta,
		ObjectMeta: objectMeta,
		// TODO
	}, nil
}

func encodeGRPC{{$resourceNamePlural}}({{$resourceNamePlural | lowerCamelCase}} []*api.{{$resourceName}}) ([]*apiv1.{{$resourceName}}, error) {
	items := make([]*apiv1.{{$resourceName}}, len({{$resourceNamePlural | lowerCamelCase}}))
	for i, {{$resourceName | lowerCamelCase}} := range {{$resourceNamePlural | lowerCamelCase}} {
		item, err := encodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}})
		if err != nil {
			return nil, err
		}
		items[i] = item
	}
	return items, nil
}

func encodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*apiv1.{{$resourceName}}, error) {
	typeMeta, err := resource.EncodeGRPCTypeMeta({{$resourceName | lowerCamelCase}}.TypeMeta)
	if err != nil {
		return nil, err
	}
	objectMeta, err := resource.EncodeGRPCObjectMeta({{$resourceName | lowerCamelCase}}.ObjectMeta)
	if err != nil {
		return nil, err
	}
	return &apiv1.{{$resourceName}}{
		TypeMeta:   typeMeta,
		ObjectMeta: objectMeta,
		// TODO
	}, nil
}

{{range .Service.Method}}
func decodeGRPC{{.Name}}Request(_ context.Context, grpcReq interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	req := grpcReq.(*apiv1.{{.Name}}{{$resourceName}}Request)
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(req.Get{{$resourceName}}())
	if err != nil {
		return nil, err
	}
	return endpoint.{{.Name}}Request{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Delete"}}
	req := grpcReq.(*apiv1.{{.Name}}{{$resourceName}}Request)
	return endpoint.{{.Name}}Request{
		Name: req.GetName(),
	}, nil
{{- else if eq (.Name | concat) "Get"}}
	req := grpcReq.(*apiv1.{{.Name}}{{$resourceName}}Request)
	return endpoint.{{.Name}}Request{
		Name: req.GetName(),
	}, nil
{{- else if eq (.Name | concat) "List"}}
	return endpoint.{{.Name}}Request{}, nil
{{- else if eq (.Name | concat) "Update"}}
	req := grpcReq.(*apiv1.{{.Name}}{{$resourceName}}Request)
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(req.Get{{$resourceName}}())
	if err != nil {
		return nil, err
	}
	return endpoint.{{.Name}}Request{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func decodeGRPC{{.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.{{.Name}}Response{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Delete"}}
	return endpoint.{{.Name}}Response{}, nil
{{- else if eq (.Name | concat) "Get"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.{{.Name}}Response{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "List"}}
	reply := grpcReply.(*apiv1.List{{$resourceNamePlural}}Response)
	{{$resourceNamePlural | lowerCamelCase}}, err := decodeGRPC{{$resourceNamePlural}}(reply.GetItems())
	if err != nil {
		return nil, err
	}
	return endpoint.{{.Name}}Response{
		{{$resourceNamePlural}}: {{$resourceNamePlural | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Update"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.{{.Name}}Response{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func encodeGRPC{{.Name}}Response(_ context.Context, response interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	resp := response.(endpoint.{{.Name}}Response)
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}})
{{- else if eq (.Name | concat) "Delete"}}
	return nil, nil
{{- else if eq (.Name | concat) "Get"}}
	resp := response.(endpoint.{{.Name}}Response)
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}})
{{- else if eq (.Name | concat) "List"}}
	resp := response.(endpoint.{{.Name}}Response)
	items, err := encodeGRPC{{$resourceNamePlural}}(resp.{{$resourceNamePlural}})
	if err != nil {
		return nil, err
	}
	return &apiv1.List{{$resourceNamePlural}}Response{
		Items: items,
	}, nil
{{- else if eq (.Name | concat) "Update"}}
	resp := response.(endpoint.{{.Name}}Response)
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}})
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func encodeGRPC{{.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	req := request.(endpoint.{{.Name}}Request)
	{{$resourceName | lowerCamelCase}}, err := encodeGRPC{{$resourceName}}(req.{{$resourceName}})
	if err != nil {
		return nil, err
	}
	return &apiv1.{{.Name}}{{$resourceName}}Request{
		{{$resourceName}}: {{$resourceName |lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Delete"}}
	req := request.(endpoint.{{.Name}}Request)

	return &apiv1.{{.Name}}{{$resourceName}}Request{
		Name: req.Name,
	}, nil
{{- else if eq (.Name | concat) "Get"}}
	req := request.(endpoint.{{.Name}}Request)

	return &apiv1.{{.Name}}{{$resourceName}}Request{
		Name: req.Name,
	}, nil
{{- else if eq (.Name | concat) "List"}}
	return &apiv1.List{{$resourceNamePlural}}Request{}, nil
{{- else if eq (.Name | concat) "Update"}}
	req := request.(endpoint.{{.Name}}Request)
	{{$resourceName | lowerCamelCase}}, err := encodeGRPC{{$resourceName}}(req.{{$resourceName}})
	if err != nil {
		return nil, err
	}
	return &apiv1.{{.Name}}{{$resourceName}}Request{
		{{$resourceName}}: {{$resourceName |lowerCamelCase}},
	}, nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}
{{end}}
