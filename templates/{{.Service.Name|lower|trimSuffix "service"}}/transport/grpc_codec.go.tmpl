// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
{{- $File := .File}}
package transport // import "powerssl.io/pkg/resource/generated/{{$resourceName | lower}}/transport"

import (
	"context"
	"errors"

	"github.com/gogo/protobuf/types"

	"powerssl.io/pkg/api"
	apiv1 "powerssl.io/pkg/api/v1"
	"powerssl.io/pkg/resource/generated/{{$resourceName | lower}}/endpoint"
)

// Avoid import errors
var _ = types.Timestamp{}

var UnknownError = errors.New("Unknown Error")

func decodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}} *apiv1.{{$resourceName}}) (*api.{{$resourceName}}, error) {
{{- range .File.MessageType}}
  {{- if eq (.Name | concat) $resourceName}}
    {{- range .Field}}
      {{- if isFieldMessageTimeStamp .}}
	{{.Name | lowerCamelCase}}, err := types.TimestampFromProto({{$resourceName | lowerCamelCase}}.Get{{.Name | camelCase}}())
	if err != nil {
		return nil, err
	}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
	return &api.{{$resourceName}}{
{{- range .File.MessageType}}
  {{- $MessageType := .Name | concat}}
  {{- if eq $MessageType $resourceName}}
    {{- range .Field}}
      {{- $FieldName := .Name | concat}}
      {{- $IsEnum := false}}
      {{- range $File.EnumType}}
	{{- if eq (.Name | concat) ($FieldName | camelCase)}}
          {{- $IsEnum = true}}
	{{- end}}
      {{- end}}
      {{- if $IsEnum}}
		{{.Name | camelCase}}: {{$resourceName | lowerCamelCase}}.Get{{.Name | camelCase}}().String(),
      {{- else if isFieldMessageTimeStamp .}}
		{{.Name | camelCase}}: {{.Name | lowerCamelCase}},
      {{- else}}
		{{.Name | camelCase}}: {{$resourceName | lowerCamelCase}}.Get{{.Name | camelCase}}(),
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
	}, nil
}

func encodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*apiv1.{{$resourceName}}, error) {
	if {{$resourceName | lowerCamelCase}} == nil {
		return nil, UnknownError
	}
{{- range .File.MessageType}}
  {{- if eq (.Name | concat) $resourceName}}
    {{- range .Field}}
      {{- if isFieldMessageTimeStamp .}}
	{{.Name | lowerCamelCase}}, err := types.TimestampProto({{$resourceName | lowerCamelCase}}.{{.Name | camelCase}})
	if err != nil {
		return nil, err
	}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
	return &apiv1.{{$resourceName}}{
{{- range .File.MessageType}}
  {{- $MessageType := .Name | concat}}
  {{- if eq $MessageType $resourceName}}
    {{- range .Field}}
      {{- $FieldName := .Name | concat}}
      {{- $IsEnum := false}}
      {{- range $File.EnumType}}
	{{- if eq (.Name | concat) ($FieldName | camelCase)}}
          {{- $IsEnum = true}}
	{{- end}}
      {{- end}}
      {{- if $IsEnum}}
		{{.Name | camelCase}}: apiv1.{{.Name | camelCase}}(apiv1.{{.Name | camelCase}}_value[{{$resourceName | lowerCamelCase}}.{{.Name | camelCase}}]),
      {{- else if isFieldMessageTimeStamp .}}
		{{.Name | camelCase}}: {{.Name | lowerCamelCase}},
      {{- else}}
		{{.Name | camelCase}}: {{$resourceName | lowerCamelCase}}.{{.Name | camelCase}},
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
	}, nil
}

func decodeGRPC{{$resourceNamePlural}}(grpc{{$resourceNamePlural}} []*apiv1.{{$resourceName}}) ([]*api.{{$resourceName}}, error) {
	{{$resourceNamePlural | lowerCamelCase}} := make([]*api.{{$resourceName}}, len(grpc{{$resourceNamePlural}}))
	for i, grpc{{$resourceName}} := range grpc{{$resourceNamePlural}} {
		{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(grpc{{$resourceName}})
		if err != nil {
			return nil, err
		}
		{{$resourceNamePlural | lowerCamelCase}}[i] = {{$resourceName | lowerCamelCase}}
	}
	return {{$resourceNamePlural | lowerCamelCase}}, nil
}

func encodeGRPC{{$resourceNamePlural}}({{$resourceNamePlural | lowerCamelCase}} []*api.{{$resourceName}}) ([]*apiv1.{{$resourceName}}, error) {
	grpc{{$resourceNamePlural}} := make([]*apiv1.{{$resourceName}}, len({{$resourceNamePlural | lowerCamelCase}}))
	for i, {{$resourceName | lowerCamelCase}} := range {{$resourceNamePlural | lowerCamelCase}} {
		grpc{{$resourceName}}, err := encodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}})
		if err != nil {
			return nil, err
		}
		grpc{{$resourceNamePlural}}[i] = grpc{{$resourceName}}
	}
	return grpc{{$resourceNamePlural}}, nil
}

{{range .Service.Method}}
func decodeGRPC{{.Name}}Request(_ context.Context, grpcReq interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	req := grpcReq.(*apiv1.Create{{$resourceName}}Request)
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(req.Get{{$resourceName}}())
	if err != nil {
		return nil, err
	}
	return endpoint.CreateRequest{
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat "Create" $resourceName "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
		Parent: req.GetParent(),
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Delete"}}
	req := grpcReq.(*apiv1.Delete{{$resourceName}}Request)
	return endpoint.DeleteRequest{
		Name: req.GetName(),
	}, nil
{{- else if eq (.Name | concat) "Get"}}
	req := grpcReq.(*apiv1.Get{{$resourceName}}Request)
	return endpoint.GetRequest{
		Name: req.GetName(),
	}, nil
{{- else if eq (.Name | concat) "List"}}
	req := grpcReq.(*apiv1.List{{$resourceNamePlural}}Request)
	return endpoint.ListRequest{
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat "List" $resourceNamePlural "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
		Parent: req.GetParent(),
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
		PageSize:  int(req.GetPageSize()),
		PageToken: req.GetPageToken(),
	}, nil
{{- else if eq (.Name | concat) "Update"}}
	req := grpcReq.(*apiv1.Update{{$resourceName}}Request)
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(req.Get{{$resourceName}}())
	if err != nil {
		return nil, err
	}
	return endpoint.UpdateRequest{
		Name: req.GetName(),
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func decodeGRPC{{.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.CreateResponse{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Delete"}}
	return endpoint.DeleteResponse{}, nil
{{- else if eq (.Name | concat) "Get"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.GetResponse{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "List"}}
	reply := grpcReply.(*apiv1.List{{$resourceNamePlural}}Response)
	{{$resourceNamePlural | lowerCamelCase}}, err := decodeGRPC{{$resourceNamePlural}}(reply.Get{{$resourceNamePlural}}())
	if err != nil {
		return nil, err
	}
	return endpoint.ListResponse{
		{{$resourceNamePlural}}: {{$resourceNamePlural | lowerCamelCase}},
		NextPageToken: reply.GetNextPageToken(),
	}, nil
{{- else if eq (.Name | concat) "Update"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
	{{$resourceName | lowerCamelCase}}, err := decodeGRPC{{$resourceName}}(reply)
	if err != nil {
		return nil, err
	}
	return endpoint.UpdateResponse{
		{{$resourceName}}: {{$resourceName | lowerCamelCase}},
	}, nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func encodeGRPC{{.Name}}Response(_ context.Context, response interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	resp := response.(endpoint.CreateResponse)
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}})
{{- else if eq (.Name | concat) "Delete"}}
	return &types.Empty{}, nil
{{- else if eq (.Name | concat) "Get"}}
	resp := response.(endpoint.GetResponse)
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}})
{{- else if eq (.Name | concat) "List"}}
	resp := response.(endpoint.ListResponse)
	{{$resourceNamePlural | lowerCamelCase}}, err := encodeGRPC{{$resourceNamePlural}}(resp.{{$resourceNamePlural}})
	if err != nil {
		return nil, err
	}
	return &apiv1.List{{$resourceNamePlural}}Response{
		{{$resourceNamePlural}}: {{$resourceNamePlural | lowerCamelCase}},
		NextPageToken: resp.NextPageToken,
	}, nil
{{- else if eq (.Name | concat) "Update"}}
	resp := response.(endpoint.UpdateResponse)
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}})
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func encodeGRPC{{.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	req := request.(endpoint.CreateRequest)
	{{$resourceName | lowerCamelCase}}, err := encodeGRPC{{$resourceName}}(req.{{$resourceName}})
	if err != nil {
		return nil, err
	}
	return &apiv1.Create{{$resourceName}}Request{
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat "Create" $resourceName "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
		Parent: req.Parent,
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
		{{$resourceName}}: {{$resourceName |lowerCamelCase}},
	}, nil
{{- else if eq (.Name | concat) "Delete"}}
	req := request.(endpoint.DeleteRequest)
	return &apiv1.Delete{{$resourceName}}Request{
		Name: req.Name,
	}, nil
{{- else if eq (.Name | concat) "Get"}}
	req := request.(endpoint.GetRequest)
	return &apiv1.Get{{$resourceName}}Request{
		Name: req.Name,
	}, nil
{{- else if eq (.Name | concat) "List"}}
	req := request.(endpoint.ListRequest)
	return &apiv1.List{{$resourceNamePlural}}Request{
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat "List" $resourceNamePlural "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
		Parent: req.Parent,
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
		PageSize:  int32(req.PageSize),
		PageToken: req.PageToken,
	}, nil
{{- else if eq (.Name | concat) "Update"}}
	req := request.(endpoint.UpdateRequest)
	{{$resourceName | lowerCamelCase}}, err := encodeGRPC{{$resourceName}}(req.{{$resourceName}})
	if err != nil {
		return nil, err
	}
	return &apiv1.Update{{$resourceName}}Request{
		Name: req.Name,
		{{$resourceName}}: {{$resourceName |lowerCamelCase}},
	}, nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}
{{end}}
