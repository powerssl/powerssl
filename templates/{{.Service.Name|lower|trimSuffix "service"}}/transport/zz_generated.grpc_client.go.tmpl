// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package transport // import "powerssl.io/pkg/gen/{{$resourceName | lower}}/transport"

import (
	kitendpoint "github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	types "github.com/gogo/protobuf/types"
	"google.golang.org/grpc"

	apiv1 "powerssl.io/pkg/api/v1"
	"powerssl.io/pkg/gen/{{$resourceName | lower}}/endpoint"
	"powerssl.io/pkg/gen/{{$resourceName | lower}}/service"
)

const serviceName = "{{.File.Package}}.{{.Service.Name}}"

func NewGRPCClient(conn *grpc.ClientConn, logger log.Logger) service.Service {
	options := []grpctransport.ClientOption{}
{{range .Service.Method}}

	var {{.Name | lowerCamelCase}}Endpoint kitendpoint.Endpoint
	{
		{{.Name | lowerCamelCase}}Endpoint = grpctransport.NewClient(
			conn,
			serviceName,
			"{{.Name}}",
			encodeGRPC{{.Name}}Request,
			decodeGRPC{{.Name}}Response,
{{- if eq (.Name | concat) "Delete"}}
			types.Empty{},
{{- else if eq (.Name | concat) "List"}}
			apiv1.{{.Name}}{{$resourceNamePlural}}Response{},
{{- else}}
			apiv1.{{$resourceName}}{},
{{- end}}
			options...,
		).Endpoint()
	}
{{- end}}

	return endpoint.Endpoints{
{{- range .Service.Method}}
		{{.Name}}Endpoint: {{.Name | lowerCamelCase}}Endpoint,
{{- end}}
	}
}
