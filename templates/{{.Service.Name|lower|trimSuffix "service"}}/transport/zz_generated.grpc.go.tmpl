// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package transport // import "powerssl.io/pkg/gen/{{$resourceName | lower}}/transport"

import (
	"context"

	"powerssl.io/pkg/api"
	apiv1 "powerssl.io/pkg/api/v1"
	"powerssl.io/pkg/gen/{{$resourceName | lower}}/endpoint"
	"powerssl.io/pkg/resources/transport"
)

func decodeGRPC{{$resourceNamePlural}}({{$resourceNamePlural | lowerCamelCase}} []*apiv1.{{$resourceName}}) []*api.{{$resourceName}} {
	items := make([]*api.{{$resourceName}}, len({{$resourceNamePlural | lowerCamelCase}}))
	for i, {{$resourceName | lowerCamelCase}} := range {{$resourceNamePlural | lowerCamelCase}} {
		items[i] = decodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}})
	}
	return items
}

func decodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}} *apiv1.{{$resourceName}}) *api.{{$resourceName}} {
	return &api.{{$resourceName}}{
		TypeMeta:   transport.DecodeGRPCTypeMeta({{$resourceName | lowerCamelCase}}.GetTypeMeta()),
		ObjectMeta: transport.DecodeGRPCObjectMeta({{$resourceName | lowerCamelCase}}.GetObjectMeta()),
		// TODO
	}
}

func encodeGRPC{{$resourceNamePlural}}({{$resourceNamePlural | lowerCamelCase}} []*api.{{$resourceName}}) []*apiv1.{{$resourceName}} {
	items := make([]*apiv1.{{$resourceName}}, len({{$resourceNamePlural | lowerCamelCase}}))
	for i, {{$resourceName | lowerCamelCase}} := range {{$resourceNamePlural | lowerCamelCase}} {
		items[i] = encodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}})
	}
	return items
}

func encodeGRPC{{$resourceName}}({{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) *apiv1.{{$resourceName}} {
	return &apiv1.{{$resourceName}}{
		TypeMeta:   transport.EncodeGRPCTypeMeta({{$resourceName | lowerCamelCase}}.TypeMeta),
		ObjectMeta: transport.EncodeGRPCObjectMeta({{$resourceName | lowerCamelCase}}.ObjectMeta),
		// TODO
	}
}

{{range .Service.Method}}
func decodeGRPC{{.Name}}Request(_ context.Context, grpcReq interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "List"}}
	// req := grpcReq.(*apiv1.List{{$resourceNamePlural}}Request)
{{- else}}
	req := grpcReq.(*apiv1.{{.Name}}{{$resourceName}}Request)
{{- end}}
	return endpoint.{{.Name}}Request{
{{- if eq (.Name | concat) "Create"}}
		{{$resourceName}}: decodeGRPC{{$resourceName}}(req.Get{{$resourceName}}()),
{{- else if eq (.Name | concat) "Delete"}}
		Name: req.GetName(),
{{- else if eq (.Name | concat) "Get"}}
		Name: req.GetName(),
{{- else if eq (.Name | concat) "List"}}
{{- else if eq (.Name | concat) "Update"}}
		{{$resourceName}}: decodeGRPC{{$resourceName}}(req.Get{{$resourceName}}()),
{{- else}}
		// TODO
{{- end}}
	}, nil
}

func decodeGRPC{{.Name}}Response(_ context.Context, grpcReply interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "Create"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
{{- else if eq (.Name | concat) "Delete"}}
{{- else if eq (.Name | concat) "Get"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
{{- else if eq (.Name | concat) "List"}}
	reply := grpcReply.(*apiv1.List{{$resourceNamePlural}}Response)
{{- else if eq (.Name | concat) "Update"}}
	reply := grpcReply.(*apiv1.{{$resourceName}})
{{- end}}
	return endpoint.{{.Name}}Response{
{{- if eq (.Name | concat) "Create"}}
		{{$resourceName}}: decodeGRPC{{$resourceName}}(reply),
{{- else if eq (.Name | concat) "Delete"}}
{{- else if eq (.Name | concat) "Get"}}
		{{$resourceName}}: decodeGRPC{{$resourceName}}(reply),
{{- else if eq (.Name | concat) "List"}}
		{{$resourceNamePlural}}: decodeGRPC{{$resourceNamePlural}}(reply.GetItems()),
{{- else if eq (.Name | concat) "Update"}}
		{{$resourceName}}: decodeGRPC{{$resourceName}}(reply),
{{- else}}
		// TODO
{{- end}}
	}, nil
}

func encodeGRPC{{.Name}}Response(_ context.Context, response interface{}) (interface{}, error) {
{{- if ne (.Name | concat) "Delete"}}
	resp := response.(endpoint.{{.Name}}Response)
{{- end}}

{{- if eq (.Name | concat) "Create"}}
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}}), nil
{{- else if eq (.Name | concat) "Delete"}}
	return nil, nil
{{- else if eq (.Name | concat) "Get"}}
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}}), nil
{{- else if eq (.Name | concat) "List"}}
	return encodeGRPC{{$resourceNamePlural}}(resp.{{$resourceNamePlural}}), nil
{{- else if eq (.Name | concat) "Update"}}
	return encodeGRPC{{$resourceName}}(resp.{{$resourceName}}), nil
{{- else}}
	// TODO
	return nil, nil
{{- end}}
}

func encodeGRPC{{.Name}}Request(_ context.Context, request interface{}) (interface{}, error) {
{{- if eq (.Name | concat) "List"}}
	return &apiv1.List{{$resourceNamePlural}}Request{
{{- else}}
	req := request.(endpoint.{{.Name}}Request)

	return &apiv1.{{.Name}}{{$resourceName}}Request{
{{- end}}
{{- if eq (.Name | concat) "Create"}}
		{{$resourceName}}: encodeGRPC{{$resourceName}}(req.{{$resourceName}}),
{{- else if eq (.Name | concat) "Delete"}}
		Name: req.Name,
{{- else if eq (.Name | concat) "Get"}}
		Name: req.Name,
{{- else if eq (.Name | concat) "List"}}
{{- else if eq (.Name | concat) "Update"}}
		{{$resourceName}}: encodeGRPC{{$resourceName}}(req.{{$resourceName}}),
{{- else}}
		// TODO
{{- end}}
	}, nil
}
{{end}}
