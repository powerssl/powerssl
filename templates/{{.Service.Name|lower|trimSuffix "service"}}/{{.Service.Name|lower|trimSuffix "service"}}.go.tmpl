// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
{{$resourceName := .Service.Name | trimSuffix "Service"}}
{{$package := $resourceName | lower}}
package {{$package}} // import "powerssl.io/pkg/resource/generated/{{$package}}"

import (
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"
	"github.com/jinzhu/gorm"
	"google.golang.org/grpc"

	apiv1 "powerssl.io/pkg/api/v1"
	resource "powerssl.io/pkg/resource"
	service"powerssl.io/pkg/resource/{{$package}}"
	"powerssl.io/pkg/resource/generated/{{$package}}/endpoint"
	"powerssl.io/pkg/resource/generated/{{$package}}/transport"
)

type {{$resourceName}} struct {
	db        *gorm.DB
	endpoints endpoint.Endpoints
	logger    log.Logger
}

func New(db *gorm.DB, logger log.Logger, duration metrics.Histogram) resource.Resource {
	svc := service.New(db, logger)
	endpoints := endpoint.NewEndpoints(svc, logger, duration)

	return &{{$resourceName}}{
		db:        db,
		endpoints: endpoints,
		logger:    logger,
	}
}

func ({{$resourceName | lowerCamelCase}} *{{$resourceName}}) RegisterGRPCServer(baseServer *grpc.Server) {
	grpcServer := transport.NewGRPCServer({{$resourceName | lowerCamelCase}}.endpoints, {{$resourceName | lowerCamelCase}}.logger)
	apiv1.Register{{.Service.Name}}Server(baseServer, grpcServer)
}
