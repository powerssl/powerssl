{{- $resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
{{- $File := .File}}
package {{$resourceName | lower}}

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/log"

	"powerssl.io/pkg/apiserver/api"
)

type Middleware func(Service) Service

func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next Service) Service {
		return loggingMiddleware{logger, next}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   Service
}
{{range .Service.Method}}
{{- $Parent := false}}
{{- $Name := (.Name | concat)}}
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat $Name $resourceName "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
        {{- $Parent = true}}
      {{- end}}
    {{- end}}
  {{- else if eq (.Name | concat) (concat $Name $resourceNamePlural "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
        {{- $Parent = true}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}

{{if eq (.Name | concat) "Create"}}
{{- if $Parent}}
func (mw loggingMiddleware) Create(ctx context.Context, parent string, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
{{- else}}
func (mw loggingMiddleware) Create(ctx context.Context, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
{{- end}}
	defer func() {
{{- if $Parent}}
		mw.logger.Log("method", "Create", "parent", parent, "{{$resourceName | lowerCamelCase}}", fmt.Sprintf("%+v", {{$resourceName | lowerCamelCase}}))
{{- else}}
		mw.logger.Log("method", "Create", "{{$resourceName | lowerCamelCase}}", fmt.Sprintf("%+v", {{$resourceName | lowerCamelCase}}))
{{- end}}
	}()
{{- if $Parent}}
	return mw.next.Create(ctx, parent, {{$resourceName | lowerCamelCase}})
{{- else}}
	return mw.next.Create(ctx, {{$resourceName | lowerCamelCase}})
{{- end}}
{{- else if eq (.Name | concat) "Delete"}}
func (mw loggingMiddleware) Delete(ctx context.Context, name string) error {
	defer func() {
		mw.logger.Log("method", "Delete", "name", name)
	}()
	return mw.next.Delete(ctx, name)
{{- else if eq (.Name | concat) "Get"}}
func (mw loggingMiddleware) Get(ctx context.Context, name string) (*api.{{$resourceName}}, error) {
	defer func() {
		mw.logger.Log("method", "Get", "name", name)
	}()
	return mw.next.Get(ctx, name)
{{- else if eq (.Name | concat) "List"}}
{{- if $Parent}}
func (mw loggingMiddleware) List(ctx context.Context, parent string, pageSize int, pageToken string) ([]*api.{{$resourceName}}, string, error) {
{{- else}}
func (mw loggingMiddleware) List(ctx context.Context, pageSize int, pageToken string) ([]*api.{{$resourceName}}, string, error) {
{{- end}}
	defer func() {
{{- if $Parent}}
		mw.logger.Log("method", "List", "parent", parent, "pageSize", pageSize, "pageToken", pageToken)
{{- else}}
		mw.logger.Log("method", "List", "pageSize", pageSize, "pageToken", pageToken)
{{- end}}
	}()
{{- if $Parent}}
	return mw.next.List(ctx, parent, pageSize, pageToken)
{{- else}}
	return mw.next.List(ctx, pageSize, pageToken)
{{- end}}
{{- else if eq (.Name | concat) "Update"}}
func (mw loggingMiddleware) Update(ctx context.Context, name string, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	defer func() {
		mw.logger.Log("method", "Update", "name", name, "{{$resourceName | lowerCamelCase}}", fmt.Sprintf("%+v", {{$resourceName | lowerCamelCase}}))
	}()
	return mw.next.Update(ctx, name, {{$resourceName | lowerCamelCase}})
{{- else}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context) error {
	defer func() {
		mw.logger.Log("method", "{{.Name}}")
	}()
	return mw.next.{{.Name}}(ctx)
{{- end}}
}
{{- end}}
