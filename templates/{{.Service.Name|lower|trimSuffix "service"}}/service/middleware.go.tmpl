{{- $resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
package {{$resourceName | lower}}

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/log"

	"powerssl.io/pkg/api"
)

type Middleware func(Service) Service

func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next Service) Service {
		return loggingMiddleware{logger, next}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   Service
}
{{range .Service.Method}}

{{if eq (.Name | concat) "Create"}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	defer func() {
		mw.logger.Log("method", "{{.Name}}", "{{$resourceName | lowerCamelCase}}", fmt.Sprintf("%+v", {{$resourceName | lowerCamelCase}}))
	}()
	return mw.next.{{.Name}}(ctx, {{$resourceName | lowerCamelCase}})
{{- else if eq (.Name | concat) "Delete"}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context, name string) error {
	defer func() {
		mw.logger.Log("method", "{{.Name}}", "name", name)
	}()
	return mw.next.{{.Name}}(ctx, name)
{{- else if eq (.Name | concat) "Get"}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context, name string) (*api.{{$resourceName}}, error) {
	defer func() {
		mw.logger.Log("method", "{{.Name}}", "name", name)
	}()
	return mw.next.{{.Name}}(ctx, name)
{{- else if eq (.Name | concat) "List"}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context) ([]*api.{{$resourceName}}, error) {
	defer func() {
		mw.logger.Log("method", "{{.Name}}")
	}()
	return mw.next.{{.Name}}(ctx)
{{- else if eq (.Name | concat) "Update"}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	defer func() {
		mw.logger.Log("method", "{{.Name}}", "{{$resourceName | lowerCamelCase}}", fmt.Sprintf("%+v", {{$resourceName | lowerCamelCase}}))
	}()
	return mw.next.{{.Name}}(ctx, {{$resourceName | lowerCamelCase}})
{{- else}}
func (mw loggingMiddleware) {{.Name}}(ctx context.Context) error {
	defer func() {
		mw.logger.Log("method", "{{.Name}}")
	}()
	return mw.next.{{.Name}}(ctx)
{{- end}}
}
{{- end}}
