{{- $resourceName := .Service.Name | trimSuffix "Service"}}
{{- $resourceNamePlural := concat $resourceName "s" }}
{{- if (regexMatch "y$" $resourceName)}}
{{- $resourceNamePlural = concat ($resourceName | trimSuffix "y") "ies" }}
{{- end}}
{{- $File := .File}}
package {{$resourceName | lower}}

import (
	"context"

	"github.com/go-kit/kit/log"
	"github.com/jinzhu/gorm"

	"powerssl.io/pkg/apiserver/api"
)

type Service interface {
{{- range .Service.Method}}
{{- $Parent := false}}
{{- $Name := (.Name | concat)}}
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat $Name $resourceName "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
        {{- $Parent = true}}
      {{- end}}
    {{- end}}
  {{- else if eq (.Name | concat) (concat $Name $resourceNamePlural "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
        {{- $Parent = true}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}
{{- if eq (.Name | concat) "Create"}}
	{{.Name}}(ctx context.Context, {{if $Parent}}parent string, {{end}}{{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error)
{{- else if eq (.Name | concat) "Delete"}}
	{{.Name}}(ctx context.Context, name string) error
{{- else if eq (.Name | concat) "Get"}}
	{{.Name}}(ctx context.Context, name string) (*api.{{$resourceName}}, error)
{{- else if eq (.Name | concat) "List"}}
	{{.Name}}(ctx context.Context, {{if $Parent}}parent string, {{end}}pageSize int, pageToken string) ([]*api.{{$resourceName}}, string, error)
{{- else if eq (.Name | concat) "Update"}}
	{{.Name}}(ctx context.Context, name string, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error)
{{- else}}
	{{.Name}}(ctx context.Context) error
{{- end}}
{{- end}}
}

func New(db *gorm.DB, logger log.Logger) Service {
	var svc Service
	{
		svc = NewBasicService(db)
		svc = LoggingMiddleware(logger)(svc)
	}
	return svc
}

type basicService struct {
	db *gorm.DB
}

func NewBasicService(db *gorm.DB) Service {
	return basicService{
		db: db,
	}
}
{{- range .Service.Method}}
{{- $Parent := false}}
{{- $Name := (.Name | concat)}}
{{- range $File.MessageType}}
  {{- if eq (.Name | concat) (concat $Name $resourceName "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
        {{- $Parent = true}}
      {{- end}}
    {{- end}}
  {{- else if eq (.Name | concat) (concat $Name $resourceNamePlural "Request")}}
    {{- range .Field}}
      {{- if eq (.Name | concat) "parent"}}
        {{- $Parent = true}}
      {{- end}}
    {{- end}}
  {{- end}}
{{- end}}

{{if eq (.Name | concat) "Create"}}
func (bs basicService) {{.Name}}(_ context.Context, {{if $Parent}}parent string, {{end}}{{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	return nil, nil
{{- else if eq (.Name | concat) "Delete"}}
func (bs basicService) {{.Name}}(_ context.Context, name string) error {
	return nil
{{- else if eq (.Name | concat) "Get"}}
func (bs basicService) {{.Name}}(_ context.Context, name string) (*api.{{$resourceName}}, error) {
	return nil, nil
{{- else if eq (.Name | concat) "List"}}
func (bs basicService) {{.Name}}(_ context.Context, {{if $Parent}}parent string, {{end}}pageSize int, pageToken string) ([]*api.{{$resourceName}}, string, error) {
	return nil, "", nil
{{- else if eq (.Name | concat) "Update"}}
func (bs basicService) {{.Name}}(_ context.Context, name string, {{$resourceName | lowerCamelCase}} *api.{{$resourceName}}) (*api.{{$resourceName}}, error) {
	return nil, nil
{{- else}}
func (bs basicService) {{.Name}}(_ context.Context) error {
	return nil
{{- end}}
}
{{- end}}
